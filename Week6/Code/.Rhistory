rm(list=ls())
data <- csv.read("/Users/amysolman/Documents/CMEECourseWork/Week6/Data/mfumagal-genomics_and_bioinformatics-5f3653a066bc/Practicals/bears.csv", stringsAsFactors=FALSE, colClasses="character")
data <- read.csv("/Users/amysolman/Documents/CMEECourseWork/Week6/Data/mfumagal-genomics_and_bioinformatics-5f3653a066bc/Practicals/bears.csv", stringsAsFactors=FALSE, colClasses="character")
View(data)
data <- read.csv("/Users/amysolman/Documents/CMEECourseWork/Week6/Data/mfumagal-genomics_and_bioinformatics-5f3653a066bc/Practicals/bears.csv", stringsAsFactors=FALSE, colClasses="character", headers=FALSE)
data <- read.csv("/Users/amysolman/Documents/CMEECourseWork/Week6/Data/mfumagal-genomics_and_bioinformatics-5f3653a066bc/Practicals/bears.csv", stringsAsFactors=FALSE, colClasses="character", header=FALSE)
View(data)
for (i in 1:ncol(data)) { #For each item in the columns of data
if # if
(lengths(unique(data[,1]))==2) #if the number of unique data entries between columns == 2
snps <- c(snps,1) #add that data entry to out vector
}
print(snp)
print(snps)
snps <- c() #Create empty vector
for (i in 1:ncol(data)) { #For each item in the columns of data
if # if
(lengths(unique(data[,1]))==2) #if the number of unique data entries between columns == 2
snps <- c(snps,1) #add that data entry to out vector
}
print(snps)
snps(data)
dim(data)
#reduce data set
data <- data[,snps]
dim(data)
print(data)
View(data)
data <- read.csv("/Users/amysolman/Documents/CMEECourseWork/Week6/Data/mfumagal-genomics_and_bioinformatics-5f3653a066bc/Practicals/bears.csv", stringsAsFactors=FALSE, colClasses="character", header=FALSE)
View(data)
data <- read.csv("/Users/amysolman/Documents/CMEECourseWork/Week6/Data/mfumagal-genomics_and_bioinformatics-5f3653a066bc/Practicals/bears.csv", stringsAsFactors=FALSE, colClasses=rep("character", 1000), header=FALSE)
dim(data)
snps <- c()
for (i in 1:ncol (data)) {
(lengths(unique(data[,1])==2))
snps <- c(snps, i)
}
for (i in 1:ncol (data)) {
(lengths(unique(data[,1]))==2)
snps <- c(snps, 1)
}
print(snps)
data <- data[,snps]
dim(data)
rm(list=ls())
data <- read.csv("/Users/amysolman/Documents/CMEECourseWork/Week6/Data/mfumagal-genomics_and_bioinformatics-5f3653a066bc/Practicals/bears.csv", stringsAsFactors=FALSE, colClasses=rep("character", 1000), header=FALSE)
snps <- c()
for (i in 1:ncol (data)) {
(lengths(unique(data[,1]))==2)
snps <- c(snps, 1)
}
data <- data[,snps]
dim(data)
View(data)
from collections import counter
import counter
rm(list=ls())
data <- read.csv("/Users/amysolman/Documents/CMEECourseWork/Week6/Data/mfumagal-genomics_and_bioinformatics-5f3653a066bc/Practicals/bears.csv", stringsAsFactors=FALSE, colClasses=rep("character", 1000), header=FALSE)
snps <- c() #create empty vector
for (i in data[,i]) {
if
(lengths(unique(data[,i])==2))
snps <- c(snps, i)
}
for (i in data[1:1000]) {
if
(lengths(unique(data[,i])==2))
snps <- c(snps, i)
}
for (i in 1:ncol(data)) {
if
(length(unique(data[,i]))==2)
snps <- c(snps, i)
}
cat("\nNumber of SNPs is:", length(snps))
#reduce the data set to polymorphic alleles only
data <- data[,snps]
dim(data)
View(data)
unique(data[,1])
count(unique(data[,1]))
for (i in 1:ncol(data)) {
unique(data[,1]) #prints what unique values are in the column
}
allele_frq <- c()
for (i in 1:ncol(data)) {
unique(data[,i]) #prints what unique values are in the column
allele_frq <- (allele_frq, i)
}
table(data)
as.data.frame(table(data))
library("dplyr")
data %>% group_by(factor1, factor2) %>% summarize(count=n())
data[,1] %>% group_by("A", "C") %>% summarize(count=n())
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
data %>%
as.tibble() %>%
count(value)
data %>%
as.tibble() %>%
count(data[,i])
data %>%
as.tibble() %>%
count(data[,1])
for (i in 1:ncol(data)) %>%
as.tibble() %>%
count(data[,1])
allele_frq <- c()
for (i in 1:ncol(data)) {
allele_frq <- sort(unique(data[,i])) #prints what unique values are in the column
}
cat("\nSNP", i, "with alleles". allele_frq)
for (i in 1:ncol(data)) {
alleles <- sort(unique(data[,i])) #prints what unique values are in the column
cat("\nSNP", i, "with alleles" alleles)}
cat("\nSNP", i, "with alleles", alleles)}
allele_frq <- c()
for (i in 1:ncol(data)) {
alleles <- sort(unique(data[,i]))
cat("\nSNP", i, "with alleles", alleles)
}
?sort
for (i in 1:ncol(data)) { #for each column in the data
alleles <- count(unique(data[,i])) # alleles = ordered uniqe data values in column
cat("\nSNP", i, "with alleles", alleles)
}
for (i in 1:ncol(data)) { #for each column in the data
alleles <- sort(unique(data[,i])) # alleles = ordered uniqe data values in column
cat("\nSNP", i, "with alleles", alleles)
}
OUT=NULL        #create a null dataset to append allele freqs to
for (x in 1:ncol(data)) {                       #begin for loop, to calculate frequencies for each locus
alleles=c(data[,x],data[,x+1])        #For example, combine columns 1 and 2 for locus 1 (two columns because they are diploid)
alleles2=as.data.frame(table(alleles))             #count each allele at locus x
missing=alleles2[which(alleles2[,1]==0),2]          #count missing data at locus x, entered as '0' in this dataset (not used further for simplicity)
alleles3=alleles2[-which(alleles2[,1]==0),]          #remove missing data (otherwise 0 would be counted in total number of alleles)
alleles4=cbind(alleles3,alleles3[,2]/sum(alleles3[,2])) #calculate frequencies
output=cbind(x,lnames[x],alleles4)                        #combine x, locusname, and frequencies
OUT <<- rbind(OUT,output)
}
colnames(OUT) <- c("Number","Locus","allele","count","frequency") #add column headers
Allelefreqs=OUT[,-1]
write.table(Allelefreqs,file="Allelefrequencies.txt",row.names=FALSE,col.names=TRUE,sep="\t",append=FALSE)
lnames=colnames(data)
for (x in 1:ncol(data)) {                       #begin for loop, to calculate frequencies for each locus
alleles=c(data[,x],data[,x+1])        #For example, combine columns 1 and 2 for locus 1 (two columns because they are diploid)
alleles2=as.data.frame(table(alleles))             #count each allele at locus x
missing=alleles2[which(alleles2[,1]==0),2]          #count missing data at locus x, entered as '0' in this dataset (not used further for simplicity)
alleles3=alleles2[-which(alleles2[,1]==0),]          #remove missing data (otherwise 0 would be counted in total number of alleles)
alleles4=cbind(alleles3,alleles3[,2]/sum(alleles3[,2])) #calculate frequencies
output=cbind(x,lnames[x],alleles4)                        #combine x, locusname, and frequencies
OUT <<- rbind(OUT,output)
}
colnames(OUT) <- c("Number","Locus","allele","count","frequency") #add column headers
Allelefreqs=OUT[,-1]
write.table(Allelefreqs,file="Allelefrequencies.txt",row.names=FALSE,col.names=TRUE,sep="\t",append=FALSE)
rm(list=ls())
data <- read.csv("/Users/amysolman/Documents/CMEECourseWork/Week6/Data/mfumagal-genomics_and_bioinformatics-5f3653a066bc/Practicals/bears.csv", stringsAsFactors=FALSE, colClasses=rep("character", 1000), header=FALSE)
dim(data)
snps <- c() #create empty vector
for (i in 1:ncol(data)) {
if
(length(unique(data[,i]))==2)
snps <- c(snps, i)
}
cat("\nNumber of SNPs is:", length(snps))
#reduce the data set to polymorphic alleles only
data <- data[,snps]
dim(data)
allele_frq <- c() #create empty vector
for (i in 1:ncol(data)) { #for each column in the data
alleles <- sort(unique(data[,i])) # alleles = ordered uniqe data values in column
cat("\nSNP", i, "with alleles", alleles)
}
freq <- length(which(data[,i]==alleles[1]))/nrow(data)
cat(" and allele frequence if the first allele" freq)
cat(" and allele frequence if the first allele", freq)
?which
for (i in 1:ncol(data)) {
freq <- length(which(data[,i]==alleles[i]))/nrow(data)
cat(" and allele frequence if the allele", freq)
}
for (i in 1:ncol(data)) {
freq <- length(which(data[,i]==alleles[i]))/nrow(data)
cat(freq)
}
for (i in 1:ncol(data)) {
freq <- length(which(data[,i]==alleles[1:ncol]))/nrow(data)
cat(freq)
}
for (i in 1:ncol(data)) {
freq <- length(which(data[,i]==alleles[1:ncol(data)]))/nrow(data)
cat(freq)
}
library("adegenet")
library("hierfstat")
library("pegas")
install.packages("adegenet")
install.packages("hierfstat")
install.packages("pegas")
library(adegenet)
library(hierfstat)
library(pegas)
nAll(data)
allele_frq <- c() #create empty vector
for (i in 1:ncol(data)) { #for each column in the data
alleles <- sort(unique(data[,i])) # alleles = ordered uniqe data values in column
cat("\nSNP", i, "with alleles", alleles)
}
for (i in 1:ncol(data)) {
freq <- length(which(data[,i]==alleles[1]))/nrow(data)
cat(freq)
}
freq <- length(which(data[,i]==alleles[1]))/nrow(data)
cat(freq)
for (i in 1:ncol(data)) {
freq <- length(which(data[,i]==alleles[1]))/nrow(data)
cat(freq)
}
for (i in 1:ncol(data)) {
freq <- length(which(data[,i]==alleles[]))/nrow(data)
cat(freq)
}
allele_frq <- c() #create empty vector
for (i in 1:ncol(data)) { #for each column in the data
alleles <- sort(unique(data[,i])) # alleles = ordered uniqe data values in column
cat("\nSNP", i, "with alleles", alleles)
freq <- length(which(data[,i]==alleles[2])) / nrow(data)
cat(" and allele frequency of the second allele", freq)
allele_frq <- c(allele_frq, freq)
}
allele_frq <- c() #create empty vector
for (i in 1:ncol(data)) { #for each column in the data
alleles <- sort(unique(data[,i])) # alleles = ordered uniqe data values in column
cat("\nSNP", i, "with alleles", alleles)
freq <- length(which(data[,i]==alleles[1])) / nrow(data)
cat(" and allele frequency of the first allele", freq)
allele_frq <- c(allele_frq, freq)
}
mytable <- c(alleles, allele_frq)
print(mytable)
myData <- data.frame(alleles=alleles, frequency=allele_frq)
print(myData)
myData <- data.frame(alleles=alleles, frequency_first_allele=allele_frq, frequency_second_allele=1-allel_frq)
myData <- data.frame(alleles=alleles, frequency_first_allele=allele_frq, frequency_second_allele=1-allele_frq)
print(myData)
myData <- data.frame(first_allele=alleles, frequency_first_allele=allele_frq, second_allele=alleles[2], frequency_second_allele=1-allele_frq)
print(myData)
myData <- data.frame(first_allele=alleles, frequency_first_allele=allele_frq, second_allele=(data[,1]==alleles[2]), frequency_second_allele=1-allele_frq)
myData <- data.frame(first_allele=alleles, frequency_first_allele=allele_frq, second_allele=data[,1]==alleles[2], frequency_second_allele=1-allele_frq)
myData <- data.frame(first_allele=alleles, frequency_first_allele=allele_frq, second_allele=alleles[2], frequency_second_allele=1-allele_frq)
print(myData)
myData <- data.frame(first_allele=alleles, frequency_first_allele=allele_frq, frequency_second_allele=1-allele_frq)
print(myData)
hist(allele_frq)
plot(allele_frq, type="h")
locus <- data
colnames(locus) <- gsub("\\.", "_", colnames(locus)) # locus names can't have "."
Mydata1 <- df2genind(locus, ploidy = 2, sep = "")
Mydata1
nAll(Mydata1)
Mydata2 <- genind2hierfstat(Mydata1)
div <- summary(Mydata1)
div
nsamples <- 20 #this is the number of individuals we have
genotype_frq <- c()
for (i in 1:ncol(data)) { #for each column of the data
alleles <- sort(unique(data[,i])) #sort the unique pair of values in the vecotr 'alleles'
genotype_counts <- c(0, 0, 0) #create a new empty vector
for (j in 1:nsamples) { #for each individual
genotype_index <- c( (j*2)-1, (j*2))
genotype <- length(which(data[genotype_index, i]==alleles[2])) + 1
### increase the counter for the corresponding genotype
genotype_counts[genotype] <- genotype_counts[genotype] + 1
}
cat(" and genotype frequencies", genotype_counts)
}
nsamples <- 20
for (i in 1:ncol(data)) {
### alleles in this SNPs
alleles <- sort(unique(data[,i]))
cat("\nSNP", i, "with alleles", alleles)
### as before, I can choose one allele as "reference"
### genotypes are Allele1/Allele1 Allele1/Allele2 Allele2/Allele2
genotype_counts <- c(0, 0, 0)
for (j in 1:nsamples) {
### indexes of genotypes for individual j
genotype_index <- c( (j*2)-1, (j*2) )
### count the Allele2 instances
genotype <- length(which(data[genotype_index, i]==alleles[2])) + 1
### increase the counter for the corresponding genotype
genotype_counts[genotype] <- genotype_counts[genotype] + 1
}
cat(" and genotype frequencies", genotype_counts)
}
?which
nsamples <- 20
for (i in 1:ncol(data)) {
alleles <- sort(unique(data[,i]))
cat("\nSNP", i, "with alleles", alleles)
for (j in 1:nsamples) {
genotype_index <- c((j*2)-1, (j*2))
genotype <- length(which(data[genotype_index, i]==alleles[2])) + 1
genotype_counts[genotype] <- genotype_counts[genotype] + 1
}
cat(" and heterozygosity", genotype_counts[2]/nsamples, "and homozygosity", 1-genotype_counts[2]/)
}
nsamples <- 20
for (i in 1:ncol(data)) {
alleles <- sort(unique(data[,i]))
cat("\nSNP", i, "with alleles", alleles)
for (j in 1:nsamples) {
genotype_index <- c((j*2)-1, (j*2))
genotype <- length(which(data[genotype_index, i]==alleles[2])) + 1
genotype_counts[genotype] <- genotype_counts[genotype] + 1
}
cat(" and heterozygosity", genotype_counts[2]/nsamples, "and homozygosity", 1-genotype_counts[2]/nsamples)
}
nsamples <- 20
for (i in 1:ncol(data)) {
### alleles in this SNPs
alleles <- sort(unique(data[,i]))
cat("\nSNP", i, "with alleles", alleles)
### as before, I can choose one allele as "reference"
### genotypes are Allele1/Allele1 Allele1/Allele2 Allele2/Allele2
genotype_counts <- c(0, 0, 0)
for (j in 1:nsamples) {
### indexes of genotypes for individual j
genotype_index <- c( (j*2)-1, (j*2) )
### count the Allele2 instances
genotype <- length(which(data[genotype_index, i]==alleles[2])) + 1
### increase the counter for the corresponding genotype
genotype_counts[genotype] <- genotype_counts[genotype] + 1
}
cat(" and heterozygosity", genotype_counts[2]/nsamples, "and homozygosity", 1-genotype_counts[2]/nsamples)
}
nsamples <- 20
for (i in 1:ncol(data)) {
alleles <- sort(unique(data[,i]))
cat("\nSNP", i, "with alleles", alleles)
for (j in 1:nsamples) {
genotype_index <- c((j*2)-1, (j*2))
genotype <- length(which(data[genotype_index, i]==alleles[2])) + 1
genotype_counts[genotype] <- genotype_counts[genotype] + 1
}
cat(" and heterozygosity", genotype_counts[2]/nsamples, "and homozygosity", 1-genotype_counts[2]/nsamples)
}
nsamples <- 20
for (i in 1:ncol(data)) {
alleles <- sort(unique(data[,i]))
cat("\nSNP", i, "with alleles", alleles)
for (j in 1:nsamples) {
genotype_index <- c((j*2)-1, (j*2))
genotype <- length(which(data[genotype_index, i]==alleles[2])) + 1
genotype_counts[genotype] <- genotype_counts[genotype] + 1
}
cat(" and heterozygosity", genotype_counts[2]/nsamples, "and homozygosity", 1-genotype_counts[2]/nsamples)
}
nsamples <- 20
for (i in 1:ncol(data)) {
### alleles in this SNPs
alleles <- sort(unique(data[,i]))
cat("\nSNP", i, "with alleles", alleles)
### as before, I can choose one allele as "reference"
### genotypes are Allele1/Allele1 Allele1/Allele2 Allele2/Allele2
genotype_counts <- c(0, 0, 0)
for (j in 1:nsamples) {
### indexes of genotypes for individual j
genotype_index <- c( (j*2)-1, (j*2) )
### count the Allele2 instances
genotype <- length(which(data[genotype_index, i]==alleles[2])) + 1
### increase the counter for the corresponding genotype
genotype_counts[genotype] <- genotype_counts[genotype] + 1
}
cat(" and heterozygosity", genotype_counts[2]/nsamples, "and homozygosity", 1-genotype_counts[2]/nsamples)
}
nsamples <- 20
for (i in 1:ncol(data)) {
### alleles in this SNPs
alleles <- sort(unique(data[,i]))
cat("\nSNP", i, "with alleles", alleles)
### as before, I can choose one allele as "reference"
### genotypes are Allele1/Allele1 Allele1/Allele2 Allele2/Allele2
genotype_counts <- c(0, 0, 0)
for (j in 1:nsamples) {
### indexes of genotypes for individual j
genotype_index <- c( (j*2)-1, (j*2) )
### count the Allele2 instances
genotype <- length(which(data[genotype_index, i]==alleles[2])) + 1
### increase the counter for the corresponding genotype
genotype_counts[genotype] <- genotype_counts[genotype] + 1
}
cat(" and heterozygosity", genotype_counts[2]/nsamples, "and homozygosity", 1-genotype_counts[2]/nsamples)
}
