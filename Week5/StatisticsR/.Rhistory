source("break.R")
source("browse.R")
source("countrol_flow.R")
source("control_flow.R")
source("DataWrang.R")
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F, stringsAsFactors = F))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
############# Inspect the dataset ###############
head(MyData) # shows top six data entries for each column
dim(MyData) # shows numnber of rows and columns
str(MyData) # shows structure of our data frame
fix(MyData) #you can also do this
source("DataWrang.R")
source("DataWrang.R")
source("DataWrangTidy.R")
source("DataWrangTidy.R")
source("Girko.R")
source("Girko.R")
source("Girko.R")
source("Mapping.R")
source("MyBars.R")
source("next.R")
source("PlotLin.R")
source("PP_Lattice.R")
source("PP_Regress.R")
source("PP_Regress.R")
install.packages("broom")
source("PP_Regress.R")
source("preallocate.R")
source("preallocate.R")
source("preallocate.R")
source("preallocate.R")
source("preallocate.R")
source("preallocate.R")
source("Ricker.R")
source("sample.R")
source("TAutoCorr.R")
# Null hypothesis: There is no significant correlation between the temperatures of
# one year with the next year in a given location (Key West)
# Alternative hypothesis: There is a significant correlation between the temperatures of
# one year with the next year in a given location (Key West)
rm(list=ls())
load("../Data/KeyWestAnnualMeanTemperature.Rdata")
head(ats)
plot(ats$Year, ats$Temp) # scatter plot of year (x-axis) and temp(y-axis)
x_t0 <- ats$Temp[-1]
x_t1 <- ats$Temp[-100]
head(cbind(x_t0, x_t1)) # Confirm that these vectors are the right pairs
plot(x_t0, x_t1) # plot the vectors
correlation <- cor(x_t0, x_t1) # Compute the correlation coefficient
# and store it
correlation
correlation_multi <- function(x_t0, x_t1){ # assign function that will take the popn and sample size
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
return(cor(x_t0, x_t1))
}
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
return(cor(x_t0, x_t1))
correlation_multi <- function(x_t0, x_t1){ # assign function that will take the popn and sample size
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
}
return(cor(x_t0, x_t1))
correlation_loop() <- function(x_t0, x_t1){ # assign function that will take popn, sample size,
# number of times to rerun experiment
result <- vector(, 10000)
for (i in 1:10000){ # for each element from 1 to the re-run number
result[i] <- correlation_multi() # run myexperiment on popn
# concatenate with result1 empty vector
}
return(result)
}
correlation_loop <- function(x_t0, x_t1){ # assign function that will take popn, sample size,
# number of times to rerun experiment
result <- vector(, 10000)
for (i in 1:10000){ # for each element from 1 to the re-run number
result[i] <- correlation_multi() # run myexperiment on popn
# concatenate with result1 empty vector
}
return(result)
}
# number of times to rerun experiment
result <- vector(, 10000)
for (i in 1:10000){ # for each element from 1 to the re-run number
result[i] <- correlation_multi() # run myexperiment on popn
# concatenate with result1 empty vector
}
# Amy Solman amy.solman19@imperial.ac.uk
# 18th October 2019
# TAutoCorr.R
# Null hypothesis: There is no significant correlation between the temperatures of
# one year with the next year in a given location (Key West)
# Alternative hypothesis: There is a significant correlation between the temperatures of
# one year with the next year in a given location (Key West)
rm(list=ls())
load("../Data/KeyWestAnnualMeanTemperature.Rdata")
head(ats)
# There are no missing values in the data set so 'na.rm' and 'use' aren't needed
plot(ats$Year, ats$Temp) # scatter plot of year (x-axis) and temp(y-axis)
# Visual assessment shows weak positive correlation between temperature and year
# Get the correlation coefficientthen store it
# Use autocorrelation/lagged correlations
# First create two vecotrs each with length n-1 such that
# the rows correspond to (x[t], x[t-1]) pairs or us
x_t0 <- ats$Temp[-1]
x_t1 <- ats$Temp[-100]
head(cbind(x_t0, x_t1)) # Confirm that these vectors are the right pairs
plot(x_t0, x_t1) # plot the vectors
correlation <- cor(x_t0, x_t1) # Compute the correlation coefficient
# and store it
correlation
# Repeat the calculation 10000 times, randomly permuting the time series, and then recalculating
# correlation coefficient for each randomly permuted year sequence and storing it (use sample function)
# Read the help file for this function and experiment with it
correlation_multi <- function(x_t0, x_t1){ # assign function that will take the popn and sample size
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
return(cor(x_t0, x_t1))
}
correlation_loop <- function(x_t0, x_t1){ # assign function that will take popn, sample size,
# number of times to rerun experiment
result <- vector(, 10000)
for (i in 1:10000){ # for each element from 1 to the re-run number
result[i] <- correlation_multi() # run myexperiment on popn
# concatenate with result1 empty vector
}
return(result)
}
repeat_results<- correlation_loop
repeat_results
# Calculate what fraction of the correlation coefficients were greater than that from the first step.
z <- repeat_results > correlation # shows how many times the random sample was greater than our
# original test
x <- length(z[z==TRUE])
y <- length(z[z==FALSE])
p_value = x/y
p_value
rm(list=ls())
# Amy Solman amy.solman19@imperial.ac.uk
# 18th October 2019
# TAutoCorr.R
# Null hypothesis: There is no significant correlation between the temperatures of
# one year with the next year in a given location (Key West)
# Alternative hypothesis: There is a significant correlation between the temperatures of
# one year with the next year in a given location (Key West)
load("../Data/KeyWestAnnualMeanTemperature.Rdata")
head(ats)
# There are no missing values in the data set so 'na.rm' and 'use' aren't needed
plot(ats$Year, ats$Temp) # scatter plot of year (x-axis) and temp(y-axis)
# Visual assessment shows weak positive correlation between temperature and year
# Get the correlation coefficientthen store it
# Use autocorrelation/lagged correlations
# First create two vecotrs each with length n-1 such that
# the rows correspond to (x[t], x[t-1]) pairs or us
x_t0 <- ats$Temp[-1]
x_t1 <- ats$Temp[-100]
head(cbind(x_t0, x_t1)) # Confirm that these vectors are the right pairs
plot(x_t0, x_t1) # plot the vectors
correlation <- cor(x_t0, x_t1) # Compute the correlation coefficient
# and store it
correlation
# Repeat the calculation 10000 times, randomly permuting the time series, and then recalculating
# correlation coefficient for each randomly permuted year sequence and storing it (use sample function)
# Read the help file for this function and experiment with it
correlation_multi <- function(x_t0, x_t1){ # assign function that will take the popn and sample size
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
return(cor(x_t0, x_t1))
}
correlation_loop() <- function(x_t0, x_t1){ # assign function that will take popn, sample size,
# number of times to rerun experiment
result <- vector(, 10000)
for (i in 1:10000){ # for each element from 1 to the re-run number
result[i] <- correlation_multi() # run myexperiment on popn
# concatenate with result1 empty vector
}
return(result)
}
repeat_results<- correlation_loop()
repeat_results
# Calculate what fraction of the correlation coefficients were greater than that from the first step.
z <- repeat_results > correlation # shows how many times the random sample was greater than our
# original test
x <- length(z[z==TRUE])
y <- length(z[z==FALSE])
p_value = x/y
p_value
load("../Data/KeyWestAnnualMeanTemperature.Rdata") #load script
head(ats)
plot(ats$Year, ats$Temp) # scatter plot of year (x-axis) and temp(y-axis)
# Get the correlation coefficientthen store it
# Use autocorrelation/lagged correlations
# First create two vecotrs each with length n-1 such that
# the rows correspond to (x[t], x[t-1]) pairs or us
x_t0 <- ats$Temp[-1]
x_t1 <- ats$Temp[-100]
head(cbind(x_t0, x_t1)) # Confirm that these vectors are the right pairs
View(ats)
plot(x_t0, x_t1) # plot the vectors
correlation <- cor(x_t0, x_t1) # Compute the correlation coefficient
# and store it
correlation
correlation_multi <- function(x_t0, x_t1){ # assign function that will take the popn and sample size
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
return(cor(x_t0, x_t1))
}
rm(list=ls())
# Amy Solman amy.solman19@imperial.ac.uk
# 18th October 2019
# TAutoCorr.R
# Null hypothesis: There is no significant correlation between the temperatures of
# one year with the next year in a given location (Key West)
# Alternative hypothesis: There is a significant correlation between the temperatures of
# one year with the next year in a given location (Key West)
load("../Data/KeyWestAnnualMeanTemperature.Rdata") #load script
head(ats)
# There are no missing values in the data set so 'na.rm' and 'use' aren't needed
plot(ats$Year, ats$Temp) # scatter plot of year (x-axis) and temp(y-axis)
# Visual assessment shows weak positive correlation between temperature and year
# Get the correlation coefficientthen store it
# Use autocorrelation/lagged correlations
# First create two vecotrs each with length n-1 such that
# the rows correspond to (x[t], x[t-1]) pairs or us
x_t0 <- ats$Temp[-1]
x_t1 <- ats$Temp[-100]
head(cbind(x_t0, x_t1)) # Confirm that these vectors are the right pairs
plot(x_t0, x_t1) # plot the vectors
correlation <- cor(x_t0, x_t1) # Compute the correlation coefficient
# and store it
correlation
# Repeat the calculation 10000 times, randomly permuting the time series, and then recalculating
# correlation coefficient for each randomly permuted year sequence and storing it (use sample function)
# Read the help file for this function and experiment with it
#This function takes the two variables of successive years (x_t0, x_t1)
# as a sample of 99 random temperatures from the list and correlates them
correlation_multi <- function(x_t0, x_t1){
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
return(cor(x_t0, x_t1))
}
correlation_lopp <- function(x_t0, x_t1){
result <- vector(,1000) #Preallocate expected size
for(i in 1:1000){
result[i] <- correlation_multi()
}
return(result)
}
repeat_results<- correlation_loop
correlation_loop <- function(x_t0, x_t1){
result <- vector(,1000) #Preallocate expected size
for(i in 1:1000){
result[i] <- correlation_multi()
}
return(result)
}
repeat_results<- correlation_loop
repeat_results
class(repeat_results)
# Amy Solman amy.solman19@imperial.ac.uk
# 18th October 2019
# TAutoCorr.R
# Null hypothesis: There is no significant correlation between the temperatures of
# one year with the next year in a given location (Key West)
# Alternative hypothesis: There is a significant correlation between the temperatures of
# one year with the next year in a given location (Key West)
load("../Data/KeyWestAnnualMeanTemperature.Rdata") #load script
head(ats)
# There are no missing values in the data set so 'na.rm' and 'use' aren't needed
plot(ats$Year, ats$Temp) # scatter plot of year (x-axis) and temp(y-axis)
# Visual assessment shows weak positive correlation between temperature and year
# Get the correlation coefficientthen store it
# Use autocorrelation/lagged correlations
# First create two vecotrs each with length n-1 such that
# the rows correspond to (x[t], x[t-1]) pairs or us
x_t0 <- ats$Temp[-1]
x_t1 <- ats$Temp[-100]
head(cbind(x_t0, x_t1)) # Confirm that these vectors are the right pairs
plot(x_t0, x_t1) # plot the vectors
correlation <- cor(x_t0, x_t1) # Compute the correlation coefficient
# and store it
correlation
# Repeat the calculation 10000 times, randomly permuting the time series, and then recalculating
# correlation coefficient for each randomly permuted year sequence and storing it (use sample function)
# Read the help file for this function and experiment with it
#This function takes the two variables of successive years (x_t0, x_t1)
# as a sample of 99 random temperatures from the list and correlates them
correlation_multi <- function(x_t0, x_t1){
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
return(cor(x_t0, x_t1))
}
# Now I want to repeat this function 10000 times
correlation_loop <- function(x_t0, x_t1){
result <- vector(,1000) #Preallocate expected size
for(i in 1:1000){
result[i] <- correlation_multi()
}
return(result)
}
z <- result > correlation # shows how many times the random sample was greater than our
# original test
x <- length(z[z==TRUE])
y <- length(z[z==FALSE])
p_value = x/y
p_value
correlation_loop(x_t0, x_t1)
# Amy Solman amy.solman19@imperial.ac.uk
# 18th October 2019
# TAutoCorr.R
# Null hypothesis: There is no significant correlation between the temperatures of
# one year with the next year in a given location (Key West)
# Alternative hypothesis: There is a significant correlation between the temperatures of
# one year with the next year in a given location (Key West)
load("../Data/KeyWestAnnualMeanTemperature.Rdata") #load script
head(ats)
# There are no missing values in the data set so 'na.rm' and 'use' aren't needed
plot(ats$Year, ats$Temp) # scatter plot of year (x-axis) and temp(y-axis)
# Visual assessment shows weak positive correlation between temperature and year
# Get the correlation coefficientthen store it
# Use autocorrelation/lagged correlations
# First create two vecotrs each with length n-1 such that
# the rows correspond to (x[t], x[t-1]) pairs or us
x_t0 <- ats$Temp[-1]
x_t1 <- ats$Temp[-100]
head(cbind(x_t0, x_t1)) # Confirm that these vectors are the right pairs
plot(x_t0, x_t1) # plot the vectors
correlation <- cor(x_t0, x_t1) # Compute the correlation coefficient
# and store it
correlation
# Repeat the calculation 10000 times, randomly permuting the time series, and then recalculating
# correlation coefficient for each randomly permuted year sequence and storing it (use sample function)
# Read the help file for this function and experiment with it
#This function takes the two variables of successive years (x_t0, x_t1)
# as a sample of 99 random temperatures from the list and correlates them
correlation_multi <- function(x_t0, x_t1){
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
return(cor(x_t0, x_t1))
}
# Now I want to repeat this function 10000 times
correlation_loop <- function(x_t0, x_t1){
result <- vector(,1000) #Preallocate expected size
for(i in 1:1000){
result[i] <- correlation_multi()
}
return(result)
}
loop_result <- correlation_loop(x_t0, x_t1)
z <- loop_result > correlation # shows how many times the random sample was greater than our
# original test
x <- length(z[z==TRUE])
y <- length(z[z==FALSE])
p_value = x/y
p_value
rm(list=ls())
source("TAutoCorr.R")
source("TreeHeight.R")
source("TreeHeight.R")
source("try.R")
source("Vectorize1.R")
source("Vectorize2.R")
rm(list=ls())
setwd("/Users/amysolman/Documents/CMEECourseWork/Week5/StatisticsR")
a <- read.table("rodents.csv", header=T)
head(a)
View(a)
a <- read.csv("rodents.csv", header=T)
head(a)
boxplot(a$hfl~a$species)
str(a)
View(a)
boxplot(a$hfl~a$sex)
a <- read.csv("rodents.csv", header=T, stringsAsFactors =T)
head(a)
ifelse(a$sex!="M" | a$sex!="F", a$sex <- "NA")
d <- ifelse(a$sex!="M" | a$sex!="F", a$sex <- "NA")
a <- ifelse(a$sex!="M" | a$sex!="F", a$sex <- "NA")
rm(list=ls())
setwd("/Users/amysolman/Documents/CMEECourseWork/Week5/StatisticsR")
a <- read.csv("rodents.csv", header=T, stringsAsFactors =T)
head(a)
str(a)
a$sex <- ifelse(a$sex!="M" | a$sex!="F", a$sex <- "NA")
str(a)
a$sex <- ifelse(a$sex!="M" | a$sex!="F", a$sex <- NA)
str(a)
b <- (a$sex!="M" | a$sex!="F", a$sex <- NA)
a$sex <- ifelse (a$sex!="M", ifelse(a$sex!="F", NA, "F"), "M")
str(a)
rm(list=ls())
setwd("/Users/amysolman/Documents/CMEECourseWork/Week5/StatisticsR")
a <- read.csv("rodents.csv", header=T, stringsAsFactors =T)
str(a)
a$sex <- ifelse (a$sex!="M", ifelse(a$sex!="F", NA, "F"), "M")
str(a)
boxplot(a$hfl~a$sex)
View(a)
a$sex <- ifelse(a$sex!="M", ifelse(a$sex!="F", "No_Data", "F"), "M")
boxplot(a$hfl~a$sex)
rm(list=ls())
setwd("/Users/amysolman/Documents/CMEECourseWork/Week5/StatisticsR")
a <- read.csv("rodents.csv", header=T, stringsAsFactors =T)
head(a)
str(a)
a$sex <- ifelse(a$sex!="M", ifelse(a$sex!="F", "No_Data", "F"), "M")
boxplot(a$hfl~a$sex)
a$tag <- ifelse(a$tag=="", "No_Tag", a$tag)
str(a)
View(a)
str(a)
a$yr <- as.factor(a$yr)
a$mo <- as.factor(a$mo)
a$sex <- as.factor(a$sex)
str(a)
colnames(a)[6] <- "hindfootlength.mm"
colnames(a)[7] <- "weight.g"
str(a)
colnames(a)[8] <- "precip.mm"
str(a)
a$tag <- as.factor(a$tag)
str(a)
rm(list=ls())
setwd("/Users/amysolman/Documents/CMEECourseWork/Week5/StatisticsR")
{#modifying the data for analysis
a <- read.csv("rodents.csv", header=T, stringsAsFactors =F)
head(a)
str(a)
a$sex <- ifelse(a$sex!="M", ifelse(a$sex!="F", "No_Data", "F"), "M")
a$tag <- ifelse(a$tag=="", "No_Tag", a$tag)
a$yr <- as.factor(a$yr)
a$mo <- as.factor(a$mo)
a$sex <- as.factor(a$sex)
a$tag <- as.factor(a$tag)
colnames(a)[6] <- "hindfootlength.mm"
colnames(a)[7] <- "weight.g"
colnames(a)[8] <- "precip.mm"
}
str(a)
a$species <- as.factor(a$species)
str(a)
boxplot(a$hfl~a$sex)
boxplot(a$hfl~a$species)
boxplot(a$hindfootlength.mm~a$species)
boxplot(a$hindfootlength.mm~a$sex)
boxplot(a$hindfootlength.mm~a$yr)
hist(a$hindfootlength.mm)
summary(a$hindfootlength.mm)
boxplot(a$weight.g~a$species)
boxplot(a$weight.g~a$sex)
boxplot(a$weight.g~a$yr)
boxplot(a$weight.g~a$precip.mm)
boxplot(a$weight.g~a$hindfootlength.mm)
boxplot(a$weight.g~a$mo)
require(lme4)
boxplot(a$weight.g~a$sex)
boxplot(a$weight.g~a$precip.mm)
shapiro.test(a$precip.mm)
require(ggplot2)
qqplot(a$precip.mm)
#testing normality
hist(a$precip.mm)
hist(a$weight.g)
#not normally distributed so lets try log
hist(log(a$precip.mm))
hist(log(a$weight.g))
#use qqplot to test if data is normally distributed
#if it is it meet parametric requirements for linear model
qqplot(y=a$weight.g, x=a$precip.mm); qqline(a$weight.g)
require(car)
install.packages("car")
library(car)
#use qqplot to test if data is normally distributed
#if it is it meet parametric requirements for linear model
qqPlot(log(a$weight.g))
qqPlot(log(a$precip.mm))
qqPlot(log(a$precip.mm), ylim = c(0, 10))
qqPlot(log(a$precip.mm), ylim = c(0, 50))
qqPlot(log(a$precip.mm), ylim = c(0, 5))
# We can't use parametric tests
hist(a$hindfootlength.mm)
hist(a$weight.g)
qqPlot(a$hindfootlength.mm)
#not normally distributed so lets try log
hist(log(a$precip.mm))
hist(log(a$weight.g))
cor(a$weight.g~a$precip.mm, method = "spearman")
cor(y=a$weight.g, x=a$precip.mm, method = "spearman")
cor.test(a$precip.mm, a$weight.g)
#correlation test
cor.test(a$precip.mm, a$weight.g, method="spearman")
cor.test(a$weight.g, a$precip.mm, method="spearman")
#no significant relationship
plot(log(a$weight.g)~log(a$precip.mm))
kruskal.test(a$weight.g~interaction(a$species, a$sex))
install.packages("PMCMRplus")
library(PMCMRplus)
plot(a$weight.g)~a$precip.mm)
plot(a$weight.g~a$precip.mm)
#no significant relationship
plot(log(a$weight.g)~log(a$precip.mm))
#no significant relationship
plot(log(a$weight.g)~log(a$precip.mm), main="Correlation between rodent weight and precipitation", ylab="log Rodent Weight", xlab = "log Precipitation")
aa<-a[which(a$sex!="No_Data"),]
aa$sex<-as.factor(as.character(aa$sex))
boxplot(aa$weight.g~aa$sex, main ="Boxplot of rodent weight against gender", ylab="Weight (g)", xlab = "Gender")
rm(list=ls())
