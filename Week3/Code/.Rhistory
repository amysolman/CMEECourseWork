points(gpdd$long, gpdd$lat, col="red", pch=1)
# Amy Solman amy.solman19@imperial.ac.uk
# 22nd October 2019
# Mapping.R
rm(list=ls())
graphics.off()
source('~/Documents/CMEECourseWork/Week3/Code/GDPP_Data.R')
source('~/Documents/CMEECourseWork/Week3/Code/GDPP_Data.R')
graphics.off()
plot(1, type="n", xlab="", ylab="", xlim=c(0, 4), ylim=c(0, 4), cex=0.2)
# add length to
sin(-1)
start_position <- c(1,2)
x <- start_position[1]
y <- start_position[2]
atan2(y, x)
# clear any existing graphs and plot your graph within the R window
graphics.off()
chaos_game <- function()  {
# clear any existing graphs and plot your graph within the R window
graphics.off()
plot(1, type="n", xlab="", ylab="", xlim=c(0, 4), ylim=c(0, 4), cex=0.2)
A <- c(0,0)
B <- c(3,4)
C <- c(4,1)
ABC <- rbind(A=A, B=B, C=C)
X <- as.numeric(A)
points(X[1], X[2], cex = 0.2) #plot X
for (i in 1:10000) {
p <- as.numeric(ABC[sample(nrow(ABC), 1), ])
x <- ((x + p[1])/2)
y <- ((y + p[2])/2)
points(x, y, cex = 0.2) #plot X
}
}
chaos_game()
chaos_game <- function()  {
# clear any existing graphs and plot your graph within the R window
graphics.off()
plot(1, type="n", xlab="", ylab="", xlim=c(0, 4), ylim=c(0, 4), cex=0.2)
A <- c(0,0)
B <- c(3,4)
C <- c(4,1)
ABC <- rbind(A=A, B=B, C=C)
X <- as.numeric(A)
points(X[1], X[2], cex = 0.2) #plot X
for (i in 1:10000) {
p <- as.numeric(ABC[sample(nrow(ABC), 1), ])
x <- ((x + p[1])/2)
y <- ((y + p[2])/2)
points(x, y, cex = 0.2) #plot X
}
}
graphics.off()
chaos_game()
Rscript Vectorize1.R
Vectorize1.R
source("Vectorize1.R")
View(M)
# M as an argument
Dimensions <- dim(M) # Dimensions of matrix applied to Dimensions variable
Tot
Tot <- 0 # Numerical value 0 applied to 'Tot'-al
for (i in 1:Dimensions[1]){ # For each element from 1 to the first element in dimensions (1000)
for (j in 1:Dimensions[2]){ # For each element from 1 to the second element in dimensions (1000)
Tot <- Tot + M[i,j] # Tot is assigned the value of Tot plus one element from first dimention
# and one element from second dimension of matrix
}
}
source("Vectorize1.R")
source("Vectorize2.R")
p0=runif(1000,.5,1.5)
p0
rnorm(1, 0, 0.2)
rnorm(1, 0, 0.2)
rnorm(1, 0, 0.2)
rm(list=ls()) # remove all objects from the current workspace
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100) # assigns function that
# takes the arguments: 'p0' starting population of 1000 randomly generated numbers of a uniform distribution
# 'r' as intrinsic growth rate, 'K' as carrying capacity of environment, 'sigma' as standard deviation,
# and 'numyears' as the number of times the model will be run
{
#initialize
N<-matrix(NA,numyears,length(p0)) # initialize matrix (N) of 100 by 1000 empty element
# so the model should give us a matrix of population numbers by years
N[1,]<-p0 # apply the starting population to the matrix first row, all columns
for (pop in 1:length(p0)) #loop through the populations
# for each element (population number) from 1 to the length of the starting population (1000)
{
for (yr in 2:numyears) #for each pop, loop through the years
# for each year from year two to the total number of years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma)) # run the stochastic
# (with gauccian fluctuations) Ricker Eqn and applies the results to the 'N' matrix of
# year by population
}
}
return(N)
}
stochrick()
load("../Data/KeyWestAnnualMeanTemperature.Rdata") #load script
head(ats)
plot(ats$Year, ats$Temp) # scatter plot of year (x-axis) and temp(y-axis)
x_t0 <- ats$Temp[-1]
x_t1 <- ats$Temp[-100]
head(cbind(x_t0, x_t1)) # Confirm that these vectors are the right pairs
plot(x_t0, x_t1) # plot the vectors
correlation <- cor(x_t0, x_t1) # Compute the correlation coefficient
# and store it
correlation
correlation_multi <- function(x_t0, x_t1){
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
return(cor(x_t0, x_t1))
}
correlation_loop <- function(x_t0, x_t1){
result <- vector(,1000) #Preallocate expected size
for(i in 1:1000){
result[i] <- correlation_multi()
}
return(result)
}
loop_result <- correlation_loop(x_t0, x_t1)
z <- loop_result > correlation # shows how many times the random sample was greater than our
# original test
x <- length(z[z==TRUE])
y <- length(z[z==FALSE])
p_value = x/y
p_value
x
y
z
loop_result
correlation
ats$Temp[-1]
View(ats)
ats$Temp[-100]
head(cbind(x_t0, x_t1)) # Confirm that these vectors are the right pairs
plot(x_t0, x_t1) # plot the vectors
p <- plot(x_t0, x_t1) # plot the vectors
p
plot(x_t0, x_t1) # plot the vectors
correlation <- cor(x_t0, x_t1) # Compute the correlation coefficient
# and store it
correlation
correlation_multi <- function(x_t0, x_t1){
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
return(cor(x_t0, x_t1))
}
correlation_multi()
correlation_multi()
correlation_multi()
correlation_multi()
correlation_multi()
correlation_multi()
correlation_multi()
correlation_loop <- function(x_t0, x_t1){
result <- vector(,1000) #Preallocate expected size
for(i in 1:1000){
result[i] <- correlation_multi()
}
return(result)
}
correlation_loop()
loop_result <- correlation_loop(x_t0, x_t1)
z <- loop_result > correlation # shows how many times the random sample was greater than our
# original test
x <- length(z[z==TRUE])
y <- length(z[z==FALSE])
p_value = x/y
p_value
source("TAutoCorr.R")
# Amy Solman amy.solman19@imperial.ac.uk
# 18th October 2019
# TAutoCorr.R
# Autocorrelation in weather: Are temperatures of one year significantly correlated
#with the next year (successive years), across years in a given location?
# Null hypothesis: There is no significant correlation between the temperatures of
# one year with the next year in a given location (Key West)
# Alternative hypothesis: There is a significant correlation between the temperatures of
# one year with the next year in a given location (Key West)
load("../Data/KeyWestAnnualMeanTemperature.Rdata") #load script
head(ats)
# There are no missing values in the data set so 'na.rm' and 'use' aren't needed
plot(ats$Year, ats$Temp) # scatter plot of year (x-axis) and temp(y-axis)
# Visual assessment shows weak positive correlation between temperature and year
# Get the correlation coefficientthen store it
# Use autocorrelation/lagged correlations
# First create two vecotrs each with length n-1 such that
# the rows correspond to (x[t], x[t-1]) pairs or us
x_t0 <- ats$Temp[-1] # Temps starting from the second
x_t1 <- ats$Temp[-100] #Temps starting from the first
head(cbind(x_t0, x_t1)) # Confirm that these vectors are the right pairs
plot(x_t0, x_t1) # plot the vectors
correlation <- cor(x_t0, x_t1) # Compute the correlation coefficient
# and store it
correlation
# Repeat the calculation 10000 times, randomly permuting the time series, and then recalculating
# correlation coefficient for each randomly permuted year sequence and storing it (use sample function)
# Read the help file for this function and experiment with it
#This function takes the two variables of successive years (x_t0, x_t1)
# as a sample of 99 random temperatures from the list and correlates them
correlation_multi <- function(x_t0, x_t1){
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
return(cor(x_t0, x_t1))
}
# Now I want to repeat this function 10000 times
correlation_loop <- function(x_t0, x_t1){
result <- vector(,1000) #Preallocate expected size
for(i in 1:1000){
result[i] <- correlation_multi()
}
return(result)
}
loop_result <- correlation_loop(x_t0, x_t1)
# Calculate what fraction of the correlation coefficients were greater than that from the first step.
z <- loop_result > correlation # shows how many times the random sample was greater than our
# original test
x <- length(z[z==TRUE])
y <- length(z[z==FALSE])
p_value = x/y
p_value
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida") # scatter plot of year (x-axis) and temp(y-axis)
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)") # scatter plot of year (x-axis) and temp(y-axis)
plot(x_t0, x_t1, main = "Lag-1 correlation of mean temperature per year in Key West, Floria",
xlab = "Year", ylab = "Temperature (°C)") # plot the vectors
plot(x_t0, x_t1, main = "Lag-1 correlation of mean temp per year in Key West, Floria",
xlab = "Year", ylab = "Temperature (°C)") # plot the vectors
plot(x_t0, x_t1, main = "Lag-1 correlation of mean temp per year in Key West, FL",
xlab = "Year", ylab = "Temperature (°C)") # plot the vectors
plot(x_t0, x_t1, main = "Lag-1 corr. of mean temp per year in Key West, FL",
xlab = "Year", ylab = "Temperature (°C)") # plot the vectors
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)")
save("../Results/TAutoPlot1.pdf")#
pdf("../Results/TAutoPlot1.pdf")
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)")
dev.off()
source("TAutoCorr.R")
plot(x_t0, x_t1, main = "Lag-1 corr. of mean temp per year in Key West, FL",
xlab = "Temperature (°C)", ylab = "Temperature (°C)")
correlation_multi <- function(x_t0, x_t1){
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
return(cor(x_t0, x_t1))
}
plot(x_t0, x_t1, main = "Randomly sampled mean temp per year in Key West, FL",
xlab = "Temperature (°C)", ylab = "Temperature (°C)")
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
plot(x_t0, x_t1, main = "Randomly sampled mean temp per year in Key West, FL",
xlab = "Temperature (°C)", ylab = "Temperature (°C)")
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
plot(x_t0, x_t1, main = "Randomly sampled mean temp per year in Key West, FL",
xlab = "Temperature (°C)", ylab = "Temperature (°C)")
source("TAutoCorr.R")
x_t0 <- ats$Temp[-1] # Temps starting from the second
x_t1 <- ats$Temp[-100] #Temps starting from the first
head(cbind(x_t0, x_t1)) # Confirm that these vectors are the right pairs
pdf("../Results/TAutoPlot2.pdf")
plot(x_t0, x_t1, main = "Lag-1 corr. of mean temp per year in Key West, FL",
xlab = "Temperature (°C)", ylab = "Temperature (°C)")
dev.off()# plot the vectors
correlation <- cor(x_t0, x_t1) # Compute the correlation coefficient
# and store it
correlation
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
pdf("../Results/TAutoPlot3.pdf")
plot(x_t0, x_t1, main = "Random pairing of mean yearly temperature in Key West, FL",
xlab = "Temperature (°C)", ylab = "Temperature (°C)")
dev.off()#
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)")
line(ats$Year, ats$Temp)
# There are no missing values in the data set so 'na.rm' and 'use' aren't needed
fit <- lm(Year~Temp, data = ats)
lines(ats$Temp, fitted(fit), col = "c=blue")
lines(ats$Temp, fitted(fit), col = "blue")
fit <- lm(Year~Temp, data = ats)
pdf("../Results/TAutoPlot1.pdf")
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)")
lines(ats$Temp, fitted(fit), col = "blue")
dev.off()
View(fit)
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)", lines = fit)
abline(fit, col = "blue")
fit <- lm(Year~Temp, data = ats)
pdf("../Results/TAutoPlot1.pdf")
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)", lines = fit)
abline(fit, col = "blue")
dev.off()
fit <- lm(Year~Temp, data = ats)
pdf("../Results/TAutoPlot1.pdf")
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)", lines = fit)
abline(fit, col = "blue")
dev.off()
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)", abline(fit, col = "blue"))
fit <- lm(Year~Temp, data = ats)
pdf("../Results/TAutoPlot1.pdf")
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)", abline(fit, col = "blue"))
dev.off()
?commandArgs
args = "trees.csv"
MyTrees <- read.csv(args[1], header=TRUE) # read trees.csv to MyTrees data frame
View(MyTrees)
TreeDistance <- MyTrees[[2]] # assign second column of MyTrees data frame to TreeDistance numerical vector
TreeDegrees <- MyTrees[[3]] # assign third column of MyTrees data frame to TreeDegrees numerical vector
TreeHeight <- function(degrees, distance){ # defines the function and the two arguments it will take
radians <- degrees * pi / 180 # applies 'degrees' multiplied by pie divided by 180 to radians
height <- distance * tan(radians)
print(paste(height))
}
Tree.Height <- TreeHeight(TreeDegrees, TreeDistance)
# Add height to MyTrees data frame - WRONG!
MyTrees$"Tree.Height.m" <- Tree.Height
filename <- tools::file_path_sans_ext(args[1])
filename
write.table(paste0(MyTrees, file = "../Results/",filename,"_treeheights.csv", row.names=FALSE, col.names=TRUE))
write.table(MyTrees, file = "../Results/",filename,"_treeheights.csv", row.names=FALSE, col.names=TRUE)
write.table(paste(MyTrees, file = "../Results/",filename,"_treeheights.csv", row.names=FALSE, col.names=TRUE))
?commandArgs
View(ats)
View(MyTrees)
MyTrees <- read.csv("../Data/trees.csv", header=TRUE) # read trees.csv to MyTrees data frame
TreeDistance <- MyTrees[[2]] # assign second column of MyTrees data frame to TreeDistance numerical vector
TreeDegrees <- MyTrees[[3]] # assign third column of MyTrees data frame to TreeDegrees numerical vector
TreeHeight <- function(degrees, distance){ # defines the function and the two arguments it will take
radians <- degrees * pi / 180 # applies 'degrees' multiplied by pie divided by 180 to radians
height <- distance * tan(radians)
print(paste(height))
#return (height)
}
Tree.Height <- TreeHeight(TreeDegrees, TreeDistance)
# Add height to MyTrees data frame - WRONG!
MyTrees$"Tree.Height.m" <- Tree.Height
write.table(MyTrees, file = "../Results/TreeHts.csv", row.names=FALSE, col.names=TRUE)
filename <- tools::file_path_sans_ext(args[1])
filename <- paste0(tools::file_path_sans_ext(args[1]),".csv")
filename <- paste0(tools::file_path_sans_ext(args[1]),"_treeheights.csv")
output_folder <- paste0("../Results/",filename)
require(ggplot2)
require(dplyr)
install.packages("broom")
require(broom)
##########OPEN DATASET TO READ - PUT INTO DATAFRAME##########
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
p <- qplot(Prey.mass, Predator.mass, facets = Type.of.feeding.interaction ~., data = MyDF, shape= I(3), log="xy",
xlab = "Prey mass in grams",
ylab = "Predator mass in grams",
colour = Predator.lifestage) +
theme(legend.position="bottom") +
geom_smooth(method = "lm",
fullrange = TRUE)
pdf("../Results/PP_Regress.pdf", 5, 9)
print(p)
dev.off()
My_Data <- MyDF[c("Predator.lifestage", "Type.of.feeding.interaction", "Predator.mass", "Prey.mass")]
head(My_Data)
My_Data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
do(tidy(lm(Predator.mass ~ Prey.mass, .))) %>%
write.csv("../Results/PP_Regress_Results.csv")
View(My_Data)
My_Data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
do(tidy(lm(Predator.mass ~ Prey.mass, .)))
My_Data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
(lm(Predator.mass ~ Prey.mass, .))
My_Data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
(lm(Predator.mass ~ Prey.mass))
require(plyr)
require(plyr)
require(dplyr)
my_lms <- dlply(MyData, "Predator.lifestage", function(df)
lm(Predator.mass ~ Prey.mass, data = MyData))
my_lms <- dlply(MyData, "Predator.lifestage", function(df)
lm(Predator.mass ~ Prey.mass, data = My_Data))
my_lms <- dlply(My_Data, "Predator.lifestage", function(df)
lm(Predator.mass ~ Prey.mass, data = My_Data))
ldply(my_lms, coef)
l_ply(my_lms, summary, .print = TRUE)
x <- l_ply(my_lms, summary, .print = TRUE)
My_Data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
(lm(Predator.mass ~ Prey.mass))
My_Data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
(lm(Predator.mass ~ Prey.mass, .))
My_Data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
(lm(Predator.mass ~ Prey.mass, data = My_Data))
lm(Predator.mass~Prey.mass, data = My_Data)
summary(lm(Predator.mass~Prey.mass, data = My_Data))
fit <- lm(Predator.mass~Prey.mass, data = My_Data)
x <- cbind(My_Data, t(as.numeric(coefficients(fit))), t(as.numeric(summary(fit)$coefficients[,4])), summary(fit)$r.squared)
names(x)[(length(x) - 6): length(x)] <- c(paste("coeff", names(coefficients(fit))), paste("P-value", names(summary(fit)$coefficients[, 4])), "R-squared")
x
View(x)
View(fit)
library(lme4)
fits <- lmList(Predator.mass ~ Prey.mass | Type.of.feeding.interaction | Predator.lifestage, data = My_Data)
View(fits)
View(fit)
fits <- lmList(Predator.mass ~ Prey.mass | Predator.lifestage, data = My_Data)
View(fit)
View(fits)
source("PP_Regression.R")
source("PP_Regression.R")
source("PP_Regress.R")
source("PP_Regress.R")
install.packages("broom")
require(plyr)
require(dplyr)
install.packages("broom")
require(broom)
##########OPEN DATASET TO READ - PUT INTO DATAFRAME##########
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
View(My_Data)
View(MyDF)
My_Data <- MyDF[c("Location", "Predator.mass", "Prey.mass")]
My_Data %>%
group_by(Location) %>%
do(tidy(lm(Predator.mass ~ Prey.mass, .))) %>%
write.csv("../Results/PP_Regress_Results_loc.csv") # write it out as a new file
source("PP_Regress_loc.R")
install.packages("broom")
source("PP_Regress_loc.R")
rm(list=ls())
amy = 29
ben = 29
amy + ben
lauren = 25
lauren - amy + ben
names <- amy, ben, lauren
names <- "amy", "ben", "lauren"
names <- c("amy", "ben", "lauren")
for (i in 1:(length(unique(names)))) {
return(i + " is my name.")
}
for (i in 1:(length(unique(names)))) {
return(i " is my name.")
}
for (i in 1:(length(unique(names)))) {
print(i " is my name.")
}
for (i in 1:(length(unique(names)))) {
print i " is my name."
}
for (i in 1:(length(unique(names)))) {
" is my name."
}
print(" is my name.")
for (i in 1:(length(unique(names)))) {
print(" is my name.")
}
for (i in 1:(length(unique(names)))) {
print(i, " is my name.")
}
for (i in 1:(length(unique(names)))) {
print(i" is my name.")
}
for (i in 1:(length(unique(names)))) {
print( i" is my name.")
}
rm(list=ls())
# setwd("/Users/amysolman/Documents/CMEECourseWork/Miniproject/Code")
graphics.off()
library("plyr")
# library("dplyr")
#library("readr")
library("minpack.lm")
#Open the (new, modified dataset from previous step)
data <- read.csv('../data/modified_data.csv')
data[data==0] <- NA
data<-data[complete.cases(data$PopBio),]
data <- data[data$PopBio >= 0, ]
data <- data[data$Time >= 0, ]
statistics <- list()
plots <- list()
rm(list=ls())
# setwd("/Users/amysolman/Documents/CMEECourseWork/Miniproject/Code")
graphics.off()
# library("plyr")
library("dplyr")
#library("readr")
library("minpack.lm")
#Open the (new, modified dataset from previous step)
#We use dplyr here
data <- read.csv('../data/modified_data.csv')
data[data==0] <- NA
data<-data[complete.cases(data$PopBio),]
data <- data[data$PopBio >= 0, ]
data <- data[data$Time >= 0, ]
statistics <- list()
plots <- list()
library("plyr")
library("dplyr")
data <- read.csv('../data/modified_data.csv')
