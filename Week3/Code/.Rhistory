x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
return(cor(x_t0, x_t1))
}
# Now I want to repeat this function 10000 times
correlation_loop <- function(x_t0, x_t1){
result <- vector(,1000) #Preallocate expected size
for(i in 1:1000){
result[i] <- correlation_multi()
}
return(result)
}
loop_result <- correlation_loop(x_t0, x_t1)
# Calculate what fraction of the correlation coefficients were greater than that from the first step.
z <- loop_result > correlation # shows how many times the random sample was greater than our
# original test
x <- length(z[z==TRUE])
y <- length(z[z==FALSE])
p_value = x/y
p_value
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida") # scatter plot of year (x-axis) and temp(y-axis)
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)") # scatter plot of year (x-axis) and temp(y-axis)
plot(x_t0, x_t1, main = "Lag-1 correlation of mean temperature per year in Key West, Floria",
xlab = "Year", ylab = "Temperature (°C)") # plot the vectors
plot(x_t0, x_t1, main = "Lag-1 correlation of mean temp per year in Key West, Floria",
xlab = "Year", ylab = "Temperature (°C)") # plot the vectors
plot(x_t0, x_t1, main = "Lag-1 correlation of mean temp per year in Key West, FL",
xlab = "Year", ylab = "Temperature (°C)") # plot the vectors
plot(x_t0, x_t1, main = "Lag-1 corr. of mean temp per year in Key West, FL",
xlab = "Year", ylab = "Temperature (°C)") # plot the vectors
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)")
save("../Results/TAutoPlot1.pdf")#
pdf("../Results/TAutoPlot1.pdf")
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)")
dev.off()
source("TAutoCorr.R")
plot(x_t0, x_t1, main = "Lag-1 corr. of mean temp per year in Key West, FL",
xlab = "Temperature (°C)", ylab = "Temperature (°C)")
correlation_multi <- function(x_t0, x_t1){
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
return(cor(x_t0, x_t1))
}
plot(x_t0, x_t1, main = "Randomly sampled mean temp per year in Key West, FL",
xlab = "Temperature (°C)", ylab = "Temperature (°C)")
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
plot(x_t0, x_t1, main = "Randomly sampled mean temp per year in Key West, FL",
xlab = "Temperature (°C)", ylab = "Temperature (°C)")
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
plot(x_t0, x_t1, main = "Randomly sampled mean temp per year in Key West, FL",
xlab = "Temperature (°C)", ylab = "Temperature (°C)")
source("TAutoCorr.R")
x_t0 <- ats$Temp[-1] # Temps starting from the second
x_t1 <- ats$Temp[-100] #Temps starting from the first
head(cbind(x_t0, x_t1)) # Confirm that these vectors are the right pairs
pdf("../Results/TAutoPlot2.pdf")
plot(x_t0, x_t1, main = "Lag-1 corr. of mean temp per year in Key West, FL",
xlab = "Temperature (°C)", ylab = "Temperature (°C)")
dev.off()# plot the vectors
correlation <- cor(x_t0, x_t1) # Compute the correlation coefficient
# and store it
correlation
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
pdf("../Results/TAutoPlot3.pdf")
plot(x_t0, x_t1, main = "Random pairing of mean yearly temperature in Key West, FL",
xlab = "Temperature (°C)", ylab = "Temperature (°C)")
dev.off()#
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)")
line(ats$Year, ats$Temp)
# There are no missing values in the data set so 'na.rm' and 'use' aren't needed
fit <- lm(Year~Temp, data = ats)
lines(ats$Temp, fitted(fit), col = "c=blue")
lines(ats$Temp, fitted(fit), col = "blue")
fit <- lm(Year~Temp, data = ats)
pdf("../Results/TAutoPlot1.pdf")
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)")
lines(ats$Temp, fitted(fit), col = "blue")
dev.off()
View(fit)
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)", lines = fit)
abline(fit, col = "blue")
fit <- lm(Year~Temp, data = ats)
pdf("../Results/TAutoPlot1.pdf")
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)", lines = fit)
abline(fit, col = "blue")
dev.off()
fit <- lm(Year~Temp, data = ats)
pdf("../Results/TAutoPlot1.pdf")
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)", lines = fit)
abline(fit, col = "blue")
dev.off()
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)", abline(fit, col = "blue"))
fit <- lm(Year~Temp, data = ats)
pdf("../Results/TAutoPlot1.pdf")
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)", abline(fit, col = "blue"))
dev.off()
?commandArgs
args = "trees.csv"
MyTrees <- read.csv(args[1], header=TRUE) # read trees.csv to MyTrees data frame
View(MyTrees)
TreeDistance <- MyTrees[[2]] # assign second column of MyTrees data frame to TreeDistance numerical vector
TreeDegrees <- MyTrees[[3]] # assign third column of MyTrees data frame to TreeDegrees numerical vector
TreeHeight <- function(degrees, distance){ # defines the function and the two arguments it will take
radians <- degrees * pi / 180 # applies 'degrees' multiplied by pie divided by 180 to radians
height <- distance * tan(radians)
print(paste(height))
}
Tree.Height <- TreeHeight(TreeDegrees, TreeDistance)
# Add height to MyTrees data frame - WRONG!
MyTrees$"Tree.Height.m" <- Tree.Height
filename <- tools::file_path_sans_ext(args[1])
filename
write.table(paste0(MyTrees, file = "../Results/",filename,"_treeheights.csv", row.names=FALSE, col.names=TRUE))
write.table(MyTrees, file = "../Results/",filename,"_treeheights.csv", row.names=FALSE, col.names=TRUE)
write.table(paste(MyTrees, file = "../Results/",filename,"_treeheights.csv", row.names=FALSE, col.names=TRUE))
?commandArgs
View(ats)
View(MyTrees)
MyTrees <- read.csv("../Data/trees.csv", header=TRUE) # read trees.csv to MyTrees data frame
TreeDistance <- MyTrees[[2]] # assign second column of MyTrees data frame to TreeDistance numerical vector
TreeDegrees <- MyTrees[[3]] # assign third column of MyTrees data frame to TreeDegrees numerical vector
TreeHeight <- function(degrees, distance){ # defines the function and the two arguments it will take
radians <- degrees * pi / 180 # applies 'degrees' multiplied by pie divided by 180 to radians
height <- distance * tan(radians)
print(paste(height))
#return (height)
}
Tree.Height <- TreeHeight(TreeDegrees, TreeDistance)
# Add height to MyTrees data frame - WRONG!
MyTrees$"Tree.Height.m" <- Tree.Height
write.table(MyTrees, file = "../Results/TreeHts.csv", row.names=FALSE, col.names=TRUE)
filename <- tools::file_path_sans_ext(args[1])
filename <- paste0(tools::file_path_sans_ext(args[1]),".csv")
filename <- paste0(tools::file_path_sans_ext(args[1]),"_treeheights.csv")
output_folder <- paste0("../Results/",filename)
require(ggplot2)
require(dplyr)
install.packages("broom")
require(broom)
##########OPEN DATASET TO READ - PUT INTO DATAFRAME##########
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
p <- qplot(Prey.mass, Predator.mass, facets = Type.of.feeding.interaction ~., data = MyDF, shape= I(3), log="xy",
xlab = "Prey mass in grams",
ylab = "Predator mass in grams",
colour = Predator.lifestage) +
theme(legend.position="bottom") +
geom_smooth(method = "lm",
fullrange = TRUE)
pdf("../Results/PP_Regress.pdf", 5, 9)
print(p)
dev.off()
My_Data <- MyDF[c("Predator.lifestage", "Type.of.feeding.interaction", "Predator.mass", "Prey.mass")]
head(My_Data)
My_Data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
do(tidy(lm(Predator.mass ~ Prey.mass, .))) %>%
write.csv("../Results/PP_Regress_Results.csv")
View(My_Data)
My_Data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
do(tidy(lm(Predator.mass ~ Prey.mass, .)))
My_Data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
(lm(Predator.mass ~ Prey.mass, .))
My_Data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
(lm(Predator.mass ~ Prey.mass))
require(plyr)
require(plyr)
require(dplyr)
my_lms <- dlply(MyData, "Predator.lifestage", function(df)
lm(Predator.mass ~ Prey.mass, data = MyData))
my_lms <- dlply(MyData, "Predator.lifestage", function(df)
lm(Predator.mass ~ Prey.mass, data = My_Data))
my_lms <- dlply(My_Data, "Predator.lifestage", function(df)
lm(Predator.mass ~ Prey.mass, data = My_Data))
ldply(my_lms, coef)
l_ply(my_lms, summary, .print = TRUE)
x <- l_ply(my_lms, summary, .print = TRUE)
My_Data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
(lm(Predator.mass ~ Prey.mass))
My_Data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
(lm(Predator.mass ~ Prey.mass, .))
My_Data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
(lm(Predator.mass ~ Prey.mass, data = My_Data))
lm(Predator.mass~Prey.mass, data = My_Data)
summary(lm(Predator.mass~Prey.mass, data = My_Data))
fit <- lm(Predator.mass~Prey.mass, data = My_Data)
x <- cbind(My_Data, t(as.numeric(coefficients(fit))), t(as.numeric(summary(fit)$coefficients[,4])), summary(fit)$r.squared)
names(x)[(length(x) - 6): length(x)] <- c(paste("coeff", names(coefficients(fit))), paste("P-value", names(summary(fit)$coefficients[, 4])), "R-squared")
x
View(x)
View(fit)
library(lme4)
fits <- lmList(Predator.mass ~ Prey.mass | Type.of.feeding.interaction | Predator.lifestage, data = My_Data)
View(fits)
View(fit)
fits <- lmList(Predator.mass ~ Prey.mass | Predator.lifestage, data = My_Data)
View(fit)
View(fits)
source("PP_Regression.R")
source("PP_Regression.R")
source("PP_Regress.R")
source("PP_Regress.R")
install.packages("broom")
require(plyr)
require(dplyr)
install.packages("broom")
require(broom)
##########OPEN DATASET TO READ - PUT INTO DATAFRAME##########
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
View(My_Data)
View(MyDF)
My_Data <- MyDF[c("Location", "Predator.mass", "Prey.mass")]
My_Data %>%
group_by(Location) %>%
do(tidy(lm(Predator.mass ~ Prey.mass, .))) %>%
write.csv("../Results/PP_Regress_Results_loc.csv") # write it out as a new file
source("PP_Regress_loc.R")
install.packages("broom")
source("PP_Regress_loc.R")
rm(list=ls())
amy = 29
ben = 29
amy + ben
lauren = 25
lauren - amy + ben
names <- amy, ben, lauren
names <- "amy", "ben", "lauren"
names <- c("amy", "ben", "lauren")
for (i in 1:(length(unique(names)))) {
return(i + " is my name.")
}
for (i in 1:(length(unique(names)))) {
return(i " is my name.")
}
for (i in 1:(length(unique(names)))) {
print(i " is my name.")
}
for (i in 1:(length(unique(names)))) {
print i " is my name."
}
for (i in 1:(length(unique(names)))) {
" is my name."
}
print(" is my name.")
for (i in 1:(length(unique(names)))) {
print(" is my name.")
}
for (i in 1:(length(unique(names)))) {
print(i, " is my name.")
}
for (i in 1:(length(unique(names)))) {
print(i" is my name.")
}
for (i in 1:(length(unique(names)))) {
print( i" is my name.")
}
rm(list=ls())
# setwd("/Users/amysolman/Documents/CMEECourseWork/Miniproject/Code")
graphics.off()
library("plyr")
# library("dplyr")
#library("readr")
library("minpack.lm")
#Open the (new, modified dataset from previous step)
data <- read.csv('../data/modified_data.csv')
data[data==0] <- NA
data<-data[complete.cases(data$PopBio),]
data <- data[data$PopBio >= 0, ]
data <- data[data$Time >= 0, ]
statistics <- list()
plots <- list()
rm(list=ls())
# setwd("/Users/amysolman/Documents/CMEECourseWork/Miniproject/Code")
graphics.off()
# library("plyr")
library("dplyr")
#library("readr")
library("minpack.lm")
#Open the (new, modified dataset from previous step)
#We use dplyr here
data <- read.csv('../data/modified_data.csv')
data[data==0] <- NA
data<-data[complete.cases(data$PopBio),]
data <- data[data$PopBio >= 0, ]
data <- data[data$Time >= 0, ]
statistics <- list()
plots <- list()
library("plyr")
library("dplyr")
data <- read.csv('../data/modified_data.csv')
rm(list=ls())
rho = 1
theta = 200
K = 10
m0 = 0.0005 #arbitraty immigration rate parameter for hypothetical reference island
A0 = 1 #arbitrary area parameter for hypothetical reference island
AonA0s = 10^seq(log10(10^3),log10(10^10),length.out=22) #
Class(AonA0s)
class(AonA0s)
View(AonA0s)
As = A0*AonA0s #number of species observed on hypothetical reference island generated by multiplying area parameter and vector
a = m0*sqrt(A0)
a
view(a)
View(a)
b = sqrt(A0)/sqrt(A)
b = sqrt(A0)/sqrt(As)
b
sqrt(A0)
sqrt(As)
rm(list=ls())
graphics.off()
library("minpack.lm")
chisholm_model <- function(theta, K, J_stars, gamma_stars) {
return(theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K)))
}
rho = 1
theta = 200
K = 10
m0 = 0.0005
A0 = 1
AonA0s = 10^seq(log10(10^3),log10(10^10),length.out=22)
As = A0*AonA0s
Js = As*rho
J_stars = Js/K
ms = m0*sqrt(A0)/sqrt(As)
gamma_stars = J_stars*ms/(1-ms)
plot(AonA0s, As)
species_rich <- c(1, 1, 3, 4, 4, 6, 10, 15, 15, 19, 25, 31, 47, 56, 53, 54, 56, 58, 58, 58)
area <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
data <- data.frame(species_rich, area)
rho = 1
theta = 200
K = 10
#m0 = 0.0005
#A0 = 1
#AonA0s = 10^seq(log10(10^3),log10(10^10),length.out=22)
#As = A0*AonA0s
Js = data$area*rho
J_stars = Js/K
ms = K/sqrt(data$area)
View(ms)
sqrt(data$area)
m0 = 0.0005
A0 = 1
ms = m0*sqrt(A0)/sqrt(As)
View(ms)
ms
ms[1]
ms[20]
rho = 1
theta = 200
K = 10
m0 = 0.0005
A0 = 1
AonA0s = 10^seq(log10(10^3),log10(10^10),length.out=22)
As = A0*AonA0s
Js = As*rho
J_stars = Js/K
ms = m0*sqrt(A0)/sqrt(As)
gamma_stars = J_stars*ms/(1-ms)
ms
View(ms)
species_rich <- c(1, 1, 3, 4, 4, 6, 10, 15, 15, 19, 25, 31, 47, 56, 53, 54, 56, 58, 58, 58)
area <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
data <- data.frame(species_rich, area)
rho = 1
theta = 200
K = 10
m0 = 0.0005
A0 = 1
#AonA0s = 10^seq(log10(10^3),log10(10^10),length.out=22)
#As = A0*AonA0s
Js = data$area*rho
J_stars = Js/K
ms = m0*sqrt(A0)/sqrt(data$area)
gamma_stars = J_stars*ms/(1-ms)
plot(data$species_rich, data$area) #plot area vs species
plot(data$area, data$species_rich) #plot area vs species
theta
K
gamma_stars
J_stars
chisholm_fit <- nlsLM(species_rich ~ chisholm_model(theta, K, gamma_stars, J_stars), data = data, start = list(theta=theta, K=K, gamma_stars=gamma_stars, J_stars=J_stars))
rm(list=ls())
rho = 1
theta = 200
K = 10
m0 = 0.0005
A0 = 1
AonA0s = 10^seq(log10(10^3),log10(10^10),length.out=22)
As = A0*AonA0s
Js = As*rho
J_stars = Js/K
ms = m0*sqrt(A0)/sqrt(As)
gamma_stars = J_stars*ms/(1-ms)
Ss = theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K))
Ss
ms = sqrt(data$area)/data$area #immigration rate = immigration rate at area 1* square root of area 1/
ms = sqrt(data$area)/(data$area() #immigration rate = immigration rate at area 1* square root of area 1/
ms = sqrt(data$area)/(data$area) #immigration rate = immigration rate at area 1* square root of area 1/
data$area
species_rich <- c(1, 1, 3, 4, 4, 6, 10, 15, 15, 19, 25, 31, 47, 56, 53, 54, 56, 58, 58, 58)
area <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
data <- data.frame(species_rich, area)
ms = sqrt(data$area)/(data$area) #immigration rate = immigration rate at area 1* square root of area 1/
ms
data$area
rm(list=ls())
graphics.off()
#install nlls fitting package
library("minpack.lm")
#create a function object for the model
chisholm_model <- function(theta, K, J_stars, gamma_stars) {
return(theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K)))
}
#import the data
#My dummy dataset
species_rich <- c(1, 1, 3, 4, 4, 6, 10, 15, 15, 19, 25, 31, 47, 56, 53, 54, 56, 58, 58, 58)
area <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
data <- data.frame(species_rich, area)
#define the starting values for model fitting
rho = 1 #number of individuals per unit area
theta = 200 #equivalent to fishers alpha, diversity index typically between 1 - 200
K = 10
rm(list=ls())
rho = 1
theta = 200
K = 10
m0 = 0.0005
A0 = 1
AonA0s = 10^seq(log10(10^3),log10(10^10),length.out=22)
As = A0*AonA0s
Js = As*rho
J_stars = Js/K
ms = m0*sqrt(A0)/sqrt(As)
gamma_stars = J_stars*ms/(1-ms)
Ss = theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K))
library(sfsmisc)
graphics.off()
par(mar=c(6,5,4,2))
plot(As,Ss,log='x',type='l',
xlim=c(min(As),1e9),ylim=c(0,200),pch=19,
xlab=expression('Area ('*italic(A)*')'),ylab=expression('Species richness ('*italic(S)*')'),
cex=2,cex.lab=2,cex.axis=2,lwd=2,
cex.main=2,xaxt='n',col='grey')
eaxis(1,10^seq(0,10,2),cex.axis=2,padj=0.2)
species_rich <- c(1, 1, 3, 4, 4, 6, 10, 15, 15, 19, 25, 31, 47, 56, 53, 54, 56, 58, 58, 58)
area <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
data <- data.frame(species_rich, area)
As = data$area
Js = As*rho
J_stars = Js/K
ms = m0*sqrt(A0)/sqrt(As)
gamma_stars = J_stars*ms/(1-ms)
Ss = theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K))
library(sfsmisc)
graphics.off()
par(mar=c(6,5,4,2))
plot(As,Ss,log='x',type='l',
xlim=c(min(As),1e9),ylim=c(0,200),pch=19,
xlab=expression('Area ('*italic(A)*')'),ylab=expression('Species richness ('*italic(S)*')'),
cex=2,cex.lab=2,cex.axis=2,lwd=2,
cex.main=2,xaxt='n',col='grey')
eaxis(1,10^seq(0,10,2),cex.axis=2,padj=0.2)
rm(list=ls())
graphics.off()
#install nlls fitting package
library("minpack.lm")
#create a function object for the model
chisholm_model <- function(theta, K, J_stars, gamma_stars) {
return(theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K)))
}
#import the data
#My dummy dataset
species_rich <- c(1, 1, 3, 4, 4, 6, 10, 15, 15, 19, 25, 31, 47, 56, 53, 54, 56, 58, 58, 58)
area <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
data <- data.frame(species_rich, area)
#define the starting values for model fitting
rho = 1 #number of individuals per unit area
theta = 200 #equivalent to fishers alpha, diversity index typically between 1 - 200
K = 10 #number of niches
#parameters A0 and m0 are used to define the area and immigration rate of some hypothetical reference island
#--essentially it defines one point on the m versus A curve
m0 = 0.0005 #immigration rate when island area is 1 (A0)
A0 = 1 #island area
Js = data$area*rho #total number of individuals on each island
J_stars = Js/K #number of individuals per niche on each island
ms = m0*sqrt(A0)/sqrt(data$area) #estimated immigration rate of each island
gamma_stars = J_stars*ms/(1-ms)
#plot area vs species
plot(data$area, data$species_rich)
#fit the model to the data using nlls
chisholm_fit <- nlsLM(species_rich ~ chisholm_model(theta, K, gamma_stars, J_stars), data = data, start = list(theta=theta, K=K, gamma_stars=gamma_stars, J_stars=J_stars))
