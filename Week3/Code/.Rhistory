vrt = c(TRUE, FALSE)
class(vtr1)
vrt1 = c(TRUE, FALSE)
vtr1 = c(TRUE, FALSE)
vtr2 = c(15, 85.83468634597245, 93983474567)
vtr2 = c(15, 85.83468634597245, 93983474567)
vtr2 = c(15, 85.83468634597245, 93983474567)
#Numeric
vtr2 = c(15, 85.83468634597245, 93983474567)
a <- 4
a
a*a
a_squared <- a*a
sqrt(a_squared)
v <- c(0, 1, 2, 3, 4) # build a vector with c
?c
v
is.vector(v)
mean(v)
var(v)
median(v)
sum(v)
prod(v + 1)
length(v)
wing.width <- 1.2 #Using dot notation
wing.length.cm <- c(4.7, 5.2, 4.8)
wing.
x <- (1 + (2 * 3)
v <- TRUE
class(v)
v <- 3.2
class(V)
class(v)
v <- 2L
class(v)
v <- "A string"
class(v)
b <- NA
is.na(b)
b <- 0/0
b
is.nan(b)
b <- 5/0
b
Inf?
?Inf
?NULL
is.infinite(b)
is.finite(b)
is.finite(0/0)
as.integer(3.1)
as.numeric(4)
as.roman(155)
as.character(155)
as.logical(5)
ls()
as.logical(0)
1E4
1e4
5e-2
1e4^2
1 / 3 / le8
1 / 3 / 1e8
ls()
ls.str()
a <- 5
is.vector(a)
v1 <- c(0.02, 0/5, 1)
v2 <- c("a", "bc", "def", "ghij")
v3 <- c(TRUE, TRUE, FALSE)
v1;v2;v3
v1 <- c(0.02, TRUE, 1)
v1
v1 <- c(0.02, "Mary", 1)
v1
mat1 <- matrix(1:25, 5, 5)
mat1
mat1 <- matrix(1:25, 5, 5, byrow=TRUE)
mat1
dim(mat1)
arr1 <- array(1:50, c(5, 5, 2))
arr1[,,1]
print(arr1)
arr1[,,2]
mat1 <- "Andy"
mat1
Col <- 1:10
col1
Col1
Col1 <- 1:10
Col1
Col2 <- LETTERS[1:10]
Col2
Col3 <- runif(10) #10 random numbers from a uniform distribution
Col3
MrDF <- data.frame(Col1, Col2, Col3)
print(MyDF)
print(MrDF)
names(MrDF) <- c("MyFirstColumn", "My Second Column", "My.Third.Column")
MrDF
MrDF$MyFirstColumn
MrDF$My Second Column
colnames(MrDF)[2] <- "MySecondColumn"
MrDF
MrDF$My.Third.Column
MrDF[,1]
MrDF[1,1]
MrDF[c("MrFirstColumn", "My.Third.Column")]
MrDF[c("MyFirstColumn", "My.Third.Column")]
class(MrDF)
str(MrDF)
head(MrDF)
tail(MrDF)
a <- as.factor(c(1,2))
a
class(a)
levels(a)
class(MrDF$MySecondColumn)
MrDF$MySecondColumn
MrDF$MySecondColumn <- as.character(MrDF$MySecondColumn)
class(MrDF$MySecondColumn)
str(MrDF)
MyList <- list(species=c("Quercus robur", "Fraxinus excelsior"), age=c(123, 84))
MyList
MyList[[1]]
MyList$species
MyList[["species"]]
MyList$species[1]
years <- 1990:2009
years
years <- 2009:1990
years
seq(1, 10, 0.5)
?seq
seq(from=1,to=10, by=0.5)
seq(from=1, by=0.5, to=10)
MyVar <- c( 'a', 'b', 'c', 'd', 'e')
MyVar[1]
MyVar[4]
MyVar[c(1,1,5,5)]
v <- c(0, 1, 2, 3, 4)
v[3]
v[1:3]
v[-3]
v[c(1, 4)]
mat1 <- matrix(1:25, 5, 5, byrow=TRUE)
mat1
mat1[1,2]
mat1[1,2:4]
mat1[1:2, 2:4]
mat1[1,]
mat1[,1]
a <- c(1,5) + 2
a
x <- c(1,2); y <- c(5, 4, 9, 2)
x;y
x + y
x + c(y, 1)
v <- c(0, 1, 2, 3, 4)
v2 <- v*2
v2
t(v)
v %*% t(v)
v3 <- 1:7
v3
v4 <- c(v2, v3)
v4
species.name <- "Quercus robur"
species.name
paste("Quercus", "robur")
paste("Quercus", "robur", sep = "")
paste("Quercus", "robur", sep = ", ")
paste('Year is:', 1990:2009)
runif(20, min=0, max=2)
set.seed(1234567)
rnorm(1)
rnorm(10)
?rnorm
. x <- rnorm(50) # Generate your population. Generates 50 sudo random
# numbers and applies to the vector x
doit <- function(x){
x <- sample(x, replace = TRUE)
if(length(unique(x)) > 30) { #only take mean if sample was sufficient
print(paste("Mean of this sample was:" as.character(mean(x))))
}
}
x <- rnorm(50)
doit <- function(x){
x <- sample(x, replace = TRUE)
if(length(unique(x)) > 30) { #only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(x))))
}
}
result <- lapply(1:100, function(i) doit(x))
result <- vector ("list", 100) #Preallocate/Initialize
for(i in 1:100){
result[[1]] <- doit(x)
}
cd
getwd()
setwd("/Users/amysolman/Documents/CMEECourseWork/Week3")
dir()
getwd()
setwd("/Users/amysolman/Documents/CMEECourseWork/Week3/Code"
)
dir()
1 + 1
2*4
3/8
11.75-4.813
10^2
log(10)
log(10)
log10(10)
sin(2*pi)
7<10
log10(10)
1:10
1:50
seq(from=0, to=10, by=1)
rum(list = ls())
rm(list = ls())
seq(from=1, to=10, by1)
seq(from=1, to=10, by=1)
seq(from=1, to=10, by=0.5)
x <- seq(from=1, to=10, by=0.5)
x
y <- seq(from=101, to 110, by 0.5)
y <- seq(from=101, to=110, by=0.5)
x + y
11.75 - 4.813
10^2
log(10) # Remember that log is natural in R!
log10(10)
sin(2*pi)
x <- seq(1, 10, 0.5)
y <- seq(101, 110, 0.5)
x + y
# Amy Solman amy.solman19@imperial.ac.uk
# 15th October 2019
# Practise script, Getting Started with R
# Clear R's brain
rm(list = ls()) # Good to start with this to clear any info from the previous session
# Unless you want to use previous info!
# Some interesting maths in R
1 + 1
2 * 4
3 / 8
11.75 - 4.813
10^2
log(10) # Remember that log is natural in R!
log10(10)
sin(2*pi)
x <- seq(1, 10, 0.5)
y <- seq(101, 110, 0.5)
x + y
install.packages(c("dplyr", "ggplot2"))
?read.csv()
qplot(y=x^2)
# Amy Solman amy.solman19@imperial.ac.uk
# 15th October 2019
# Plotting two graphs and a histogram
library(dplyr)
library(ggplot2)
qplot(y=x^2)
?qplot
# Amy Solman amy.solman19@imperial.ac.uk
# 15th October 2019
# Plotting two graphs and a histogram
library(dplyr)
library(ggplot2)
x <- seq(-10, 10, 1)
y <- x^2
qplot(x, y, gemo="line")
# Amy Solman amy.solman19@imperial.ac.uk
# 15th October 2019
# Plotting two graphs and a histogram
library(dplyr)
library(ggplot2)
x <- seq(-10, 10, 1)
y <- x^2
qplot(x, y)
x <- seq(-10, 10, 1)
y <- sin(x)
qplot(x, y)
x <- seq(-10, 10, 1)
y <- sin(x)
qplot(x, y, geom = "path")
x <- seq(-10, 10, 1)
y <- sin(x)
qplot(x, y, geom = "line")
x <- seq(0, 25, 1)
y <- sin(x)
qplot(x, y, geom = "line")
x <- seq(0, 8*pi, 0.1)
y <- sin(x)
qplot(x, y, geom = "line")
x <- seq(0, 8*pi, 1) # Why is this different?
y <- sin(x)
qplot(x, y, geom = "line")
x <- seq(0, 8*pi, 0.1) # 0.1 gives greater number of points = smooth line
y <- sin(x)
qplot(x, y, geom = "line")
rnorm(1:1000)
qplot(rnorm)
x <- seq(-3, 3, 1)
y <- rnorm(1:1000)
qplot(x, y)
x <- rnorm(1:1000)
qplot(x)
MyData <- read.csv("../data/trees.csv")
ls()
ls.str()
head(MyData)
str(MyData)
MyData <- read.csv("../data/trees.csv", header = F)
head(MyData)
MyData <- read.table("../data/trees.csv", sep ',', header = TRUE)
MyData <- read.table("../Data/trees.csv", sep = ',', header = TRUE)
head(MyData)
MyData <- read.csv("../Data/trees,csv", skip = 5)
MyData <- read.csv("..Data/trees.csv", skip = 5)
MyData <- read.csv("../Data/trees.csv", skip = 5)
head(MyData)
write.csv(MyData, "../Results/MyData.csv")
fir ("../results/")
dir("../results/")
write.table(MyData[1,], file = "../Results/MyData.csv", append=TRUE)
write.csv(MyData, "../results/MyData.csv", row.names=TRUE)
write.table(MyData, "../results/MyData.csv", col.names=FALSE)
MyData <- read.csv("../data/trees.csv", header = TRUE) # import with headers
head(MyData)
write.csv(MyData, "../results/MyData.csv") # write it out as a new file
write.table(MyData[1,], file = "../results/MyData.csv, append=TRUE") # Append to it
write.table(MyData[1,], file = "../results/MyData.csv", append=TRUE) # Append to it
write.csv(MyData, "../results/MyData.csv", row.names=TRUE) # write row names
head(MyData)
write.table(MrData, "../results/MyData.csv", col.names=FALSE) # ignore column names
write.table(MyData, "../results/MyData.csv", col.names=FALSE) # ignore column names
# A simple script to illustrate R input-output
# Run line by line and check inputs, outputs, to understand what is happening
MyData <- read.csv("../data/trees.csv", header = TRUE) # import with headers
write.csv(MyData, "../results/MyData.csv") # write it out as a new file
write.table(MyData[1,], file = "../results/MyData.csv", append=TRUE) # Append to it
# warning message expected
write.csv(MyData, "../results/MyData.csv", row.names=TRUE) # write row names
write.table(MyData, "../results/MyData.csv", col.names=FALSE) # ignore column names
source("basic_io.R")
a <- TRUE
if (a == TRUE) {
print ("a is TRUE")
} else {
print("a is FALSE")
}
z <- runif(1) ## uniformly distributed random number
if (z <= 0.5) {print("Less than half")}
z <- runif(1) ## uniformly distributed random number
if (z <= 0.5) {print("Less than half")}
z <- runif(1) ## uniformly distributed random number
if (z <= 0.5) {print("Less than half")}
for (i in 1:10){ # this is an explicit input - for each number in 1 to 10
j <- i * i # times that number by itself and assign to variable j
print(paste(i, " squared is", j)) # print each number "is suqare by" assigned j variable
}
?paste
for(species in c('Heliodoxa rubinoides',
'Bolissonneaua jardini',
'Sula nebouxii')){
print(paste('The species is', species)) #paste converts arguments to character strings and
# concatenates them
}
v1 <- c("a", "bc", "def")
for (i in v1){
print(i)
}
i <- 0
while (i<10){
i <- i + 1
print(i^2) # squared numbers up to 10
i <- 0
while (i<10){
i <- i + 1
print(i^2) # squared numbers up to 10
}
q
i <- 0
while (i<10){
i <- i + 1
print(i^2) # squared numbers up to 10
}
soure("control_flow.R")
source("control_flow.R")
M <- matrix(runif(1000000),1000,1000)
SumAllElements <- function(M){
Dimensions <- dim(M)
Tot <- 0
for (i in 1:Dimensions[1]){
for (j in 1:Dimensions[2]){
Tot <- Tot + M[i,j]
}
}
return (Tot)
}
print("Using loops, the time taken is:")
print(system.time(SumAllElements(M)))
print("Using the in-built vectorized function, the time taken is:")
print(system.time(sum(M)))
M <- matrix(rnorm(100), 10, 10)
## Take the mean of each row
RowMeans <-apply(M, 1, mean)
print(RowMeans)
RowVars <- apply(M, 1, var)
print(RowVars)
ColMEans <- apply(M, 2, mean)
print(ColMeans)
ColMeans <- apply(M, 2, mean)
print(ColMeans)
SomeOperation <- function(v){ #(What does this function do?)
if (sum(v) > 0){
return(v*100)
}
return(v)
}
M <- matrix(rnowm(100), 10, 10)
print(apply(M, 1, SomeOperation))
popn <-rnorm(1000)
hist(popn)
a <-4
a
a|*a
a*a
a_squared <- a*a
sqrt(a_squared)
v <- (0, 1, 2, 3, 4)
v <- c(0, 1, 2, 3, 4)
v
is.vector(v)
mean(v)
var(v)
median(v)
sum(v)
prod(v + 1)
length(v)
wing.width.cm <-1.2
wing.length.cm <- c(4.7, 5.2, 4.8)
v <- TRUE
class(v)
v <- 3.2
class(v)
v <- 2L
class(v)
v <- "A string"
class(v)
b <- NA
is.na(b)
b <- 0/0
b
?NaN
is.nan(b)
b <- 5/0
b
is.infinite(b)
is.finite(b)
is.finite(0/0)
as.integer(3.1)
as.numeric(4)
as.roman(155)
as.character(155)
as.logical(5)
as.logical(0)
1E4^2
1 / 3 / 1e8
a <- 5
is.vector(a)
v1 <- c(0.02, 0.5, 1)
v2 <- c("a", "bc", "def", "ghij")
v3 <- c(TRUE, TRUE, FALSE)
v1;v2;v3
