correlation_loop <- function(x_t0, x_t1){
result <- vector(,1000) #Preallocate expected size
for(i in 1:1000){
result[i] <- correlation_multi()
}
return(result)
}
correlation_loop()
loop_result <- correlation_loop(x_t0, x_t1)
z <- loop_result > correlation # shows how many times the random sample was greater than our
# original test
x <- length(z[z==TRUE])
y <- length(z[z==FALSE])
p_value = x/y
p_value
source("TAutoCorr.R")
# Amy Solman amy.solman19@imperial.ac.uk
# 18th October 2019
# TAutoCorr.R
# Autocorrelation in weather: Are temperatures of one year significantly correlated
#with the next year (successive years), across years in a given location?
# Null hypothesis: There is no significant correlation between the temperatures of
# one year with the next year in a given location (Key West)
# Alternative hypothesis: There is a significant correlation between the temperatures of
# one year with the next year in a given location (Key West)
load("../Data/KeyWestAnnualMeanTemperature.Rdata") #load script
head(ats)
# There are no missing values in the data set so 'na.rm' and 'use' aren't needed
plot(ats$Year, ats$Temp) # scatter plot of year (x-axis) and temp(y-axis)
# Visual assessment shows weak positive correlation between temperature and year
# Get the correlation coefficientthen store it
# Use autocorrelation/lagged correlations
# First create two vecotrs each with length n-1 such that
# the rows correspond to (x[t], x[t-1]) pairs or us
x_t0 <- ats$Temp[-1] # Temps starting from the second
x_t1 <- ats$Temp[-100] #Temps starting from the first
head(cbind(x_t0, x_t1)) # Confirm that these vectors are the right pairs
plot(x_t0, x_t1) # plot the vectors
correlation <- cor(x_t0, x_t1) # Compute the correlation coefficient
# and store it
correlation
# Repeat the calculation 10000 times, randomly permuting the time series, and then recalculating
# correlation coefficient for each randomly permuted year sequence and storing it (use sample function)
# Read the help file for this function and experiment with it
#This function takes the two variables of successive years (x_t0, x_t1)
# as a sample of 99 random temperatures from the list and correlates them
correlation_multi <- function(x_t0, x_t1){
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
return(cor(x_t0, x_t1))
}
# Now I want to repeat this function 10000 times
correlation_loop <- function(x_t0, x_t1){
result <- vector(,1000) #Preallocate expected size
for(i in 1:1000){
result[i] <- correlation_multi()
}
return(result)
}
loop_result <- correlation_loop(x_t0, x_t1)
# Calculate what fraction of the correlation coefficients were greater than that from the first step.
z <- loop_result > correlation # shows how many times the random sample was greater than our
# original test
x <- length(z[z==TRUE])
y <- length(z[z==FALSE])
p_value = x/y
p_value
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida") # scatter plot of year (x-axis) and temp(y-axis)
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)") # scatter plot of year (x-axis) and temp(y-axis)
plot(x_t0, x_t1, main = "Lag-1 correlation of mean temperature per year in Key West, Floria",
xlab = "Year", ylab = "Temperature (°C)") # plot the vectors
plot(x_t0, x_t1, main = "Lag-1 correlation of mean temp per year in Key West, Floria",
xlab = "Year", ylab = "Temperature (°C)") # plot the vectors
plot(x_t0, x_t1, main = "Lag-1 correlation of mean temp per year in Key West, FL",
xlab = "Year", ylab = "Temperature (°C)") # plot the vectors
plot(x_t0, x_t1, main = "Lag-1 corr. of mean temp per year in Key West, FL",
xlab = "Year", ylab = "Temperature (°C)") # plot the vectors
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)")
save("../Results/TAutoPlot1.pdf")#
pdf("../Results/TAutoPlot1.pdf")
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)")
dev.off()
source("TAutoCorr.R")
plot(x_t0, x_t1, main = "Lag-1 corr. of mean temp per year in Key West, FL",
xlab = "Temperature (°C)", ylab = "Temperature (°C)")
correlation_multi <- function(x_t0, x_t1){
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
return(cor(x_t0, x_t1))
}
plot(x_t0, x_t1, main = "Randomly sampled mean temp per year in Key West, FL",
xlab = "Temperature (°C)", ylab = "Temperature (°C)")
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
plot(x_t0, x_t1, main = "Randomly sampled mean temp per year in Key West, FL",
xlab = "Temperature (°C)", ylab = "Temperature (°C)")
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
plot(x_t0, x_t1, main = "Randomly sampled mean temp per year in Key West, FL",
xlab = "Temperature (°C)", ylab = "Temperature (°C)")
source("TAutoCorr.R")
x_t0 <- ats$Temp[-1] # Temps starting from the second
x_t1 <- ats$Temp[-100] #Temps starting from the first
head(cbind(x_t0, x_t1)) # Confirm that these vectors are the right pairs
pdf("../Results/TAutoPlot2.pdf")
plot(x_t0, x_t1, main = "Lag-1 corr. of mean temp per year in Key West, FL",
xlab = "Temperature (°C)", ylab = "Temperature (°C)")
dev.off()# plot the vectors
correlation <- cor(x_t0, x_t1) # Compute the correlation coefficient
# and store it
correlation
x_t0 <- sample(ats$Temp, 99, replace = FALSE)
x_t1 <- sample(ats$Temp, 99, replace = FALSE)
pdf("../Results/TAutoPlot3.pdf")
plot(x_t0, x_t1, main = "Random pairing of mean yearly temperature in Key West, FL",
xlab = "Temperature (°C)", ylab = "Temperature (°C)")
dev.off()#
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)")
line(ats$Year, ats$Temp)
# There are no missing values in the data set so 'na.rm' and 'use' aren't needed
fit <- lm(Year~Temp, data = ats)
lines(ats$Temp, fitted(fit), col = "c=blue")
lines(ats$Temp, fitted(fit), col = "blue")
fit <- lm(Year~Temp, data = ats)
pdf("../Results/TAutoPlot1.pdf")
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)")
lines(ats$Temp, fitted(fit), col = "blue")
dev.off()
View(fit)
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)", lines = fit)
abline(fit, col = "blue")
fit <- lm(Year~Temp, data = ats)
pdf("../Results/TAutoPlot1.pdf")
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)", lines = fit)
abline(fit, col = "blue")
dev.off()
fit <- lm(Year~Temp, data = ats)
pdf("../Results/TAutoPlot1.pdf")
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)", lines = fit)
abline(fit, col = "blue")
dev.off()
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)", abline(fit, col = "blue"))
fit <- lm(Year~Temp, data = ats)
pdf("../Results/TAutoPlot1.pdf")
plot(ats$Year, ats$Temp, main = "Mean temperature per year in Key West, Florida",
xlab = "Year", ylab = "Temperature (°C)", abline(fit, col = "blue"))
dev.off()
?commandArgs
args = "trees.csv"
MyTrees <- read.csv(args[1], header=TRUE) # read trees.csv to MyTrees data frame
View(MyTrees)
TreeDistance <- MyTrees[[2]] # assign second column of MyTrees data frame to TreeDistance numerical vector
TreeDegrees <- MyTrees[[3]] # assign third column of MyTrees data frame to TreeDegrees numerical vector
TreeHeight <- function(degrees, distance){ # defines the function and the two arguments it will take
radians <- degrees * pi / 180 # applies 'degrees' multiplied by pie divided by 180 to radians
height <- distance * tan(radians)
print(paste(height))
}
Tree.Height <- TreeHeight(TreeDegrees, TreeDistance)
# Add height to MyTrees data frame - WRONG!
MyTrees$"Tree.Height.m" <- Tree.Height
filename <- tools::file_path_sans_ext(args[1])
filename
write.table(paste0(MyTrees, file = "../Results/",filename,"_treeheights.csv", row.names=FALSE, col.names=TRUE))
write.table(MyTrees, file = "../Results/",filename,"_treeheights.csv", row.names=FALSE, col.names=TRUE)
write.table(paste(MyTrees, file = "../Results/",filename,"_treeheights.csv", row.names=FALSE, col.names=TRUE))
?commandArgs
View(ats)
View(MyTrees)
MyTrees <- read.csv("../Data/trees.csv", header=TRUE) # read trees.csv to MyTrees data frame
TreeDistance <- MyTrees[[2]] # assign second column of MyTrees data frame to TreeDistance numerical vector
TreeDegrees <- MyTrees[[3]] # assign third column of MyTrees data frame to TreeDegrees numerical vector
TreeHeight <- function(degrees, distance){ # defines the function and the two arguments it will take
radians <- degrees * pi / 180 # applies 'degrees' multiplied by pie divided by 180 to radians
height <- distance * tan(radians)
print(paste(height))
#return (height)
}
Tree.Height <- TreeHeight(TreeDegrees, TreeDistance)
# Add height to MyTrees data frame - WRONG!
MyTrees$"Tree.Height.m" <- Tree.Height
write.table(MyTrees, file = "../Results/TreeHts.csv", row.names=FALSE, col.names=TRUE)
filename <- tools::file_path_sans_ext(args[1])
filename <- paste0(tools::file_path_sans_ext(args[1]),".csv")
filename <- paste0(tools::file_path_sans_ext(args[1]),"_treeheights.csv")
output_folder <- paste0("../Results/",filename)
require(ggplot2)
require(dplyr)
install.packages("broom")
require(broom)
##########OPEN DATASET TO READ - PUT INTO DATAFRAME##########
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
p <- qplot(Prey.mass, Predator.mass, facets = Type.of.feeding.interaction ~., data = MyDF, shape= I(3), log="xy",
xlab = "Prey mass in grams",
ylab = "Predator mass in grams",
colour = Predator.lifestage) +
theme(legend.position="bottom") +
geom_smooth(method = "lm",
fullrange = TRUE)
pdf("../Results/PP_Regress.pdf", 5, 9)
print(p)
dev.off()
My_Data <- MyDF[c("Predator.lifestage", "Type.of.feeding.interaction", "Predator.mass", "Prey.mass")]
head(My_Data)
My_Data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
do(tidy(lm(Predator.mass ~ Prey.mass, .))) %>%
write.csv("../Results/PP_Regress_Results.csv")
View(My_Data)
My_Data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
do(tidy(lm(Predator.mass ~ Prey.mass, .)))
My_Data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
(lm(Predator.mass ~ Prey.mass, .))
My_Data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
(lm(Predator.mass ~ Prey.mass))
require(plyr)
require(plyr)
require(dplyr)
my_lms <- dlply(MyData, "Predator.lifestage", function(df)
lm(Predator.mass ~ Prey.mass, data = MyData))
my_lms <- dlply(MyData, "Predator.lifestage", function(df)
lm(Predator.mass ~ Prey.mass, data = My_Data))
my_lms <- dlply(My_Data, "Predator.lifestage", function(df)
lm(Predator.mass ~ Prey.mass, data = My_Data))
ldply(my_lms, coef)
l_ply(my_lms, summary, .print = TRUE)
x <- l_ply(my_lms, summary, .print = TRUE)
My_Data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
(lm(Predator.mass ~ Prey.mass))
My_Data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
(lm(Predator.mass ~ Prey.mass, .))
My_Data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
(lm(Predator.mass ~ Prey.mass, data = My_Data))
lm(Predator.mass~Prey.mass, data = My_Data)
summary(lm(Predator.mass~Prey.mass, data = My_Data))
fit <- lm(Predator.mass~Prey.mass, data = My_Data)
x <- cbind(My_Data, t(as.numeric(coefficients(fit))), t(as.numeric(summary(fit)$coefficients[,4])), summary(fit)$r.squared)
names(x)[(length(x) - 6): length(x)] <- c(paste("coeff", names(coefficients(fit))), paste("P-value", names(summary(fit)$coefficients[, 4])), "R-squared")
x
View(x)
View(fit)
library(lme4)
fits <- lmList(Predator.mass ~ Prey.mass | Type.of.feeding.interaction | Predator.lifestage, data = My_Data)
View(fits)
View(fit)
fits <- lmList(Predator.mass ~ Prey.mass | Predator.lifestage, data = My_Data)
View(fit)
View(fits)
source("PP_Regression.R")
source("PP_Regression.R")
source("PP_Regress.R")
source("PP_Regress.R")
install.packages("broom")
require(plyr)
require(dplyr)
install.packages("broom")
require(broom)
##########OPEN DATASET TO READ - PUT INTO DATAFRAME##########
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
View(My_Data)
View(MyDF)
My_Data <- MyDF[c("Location", "Predator.mass", "Prey.mass")]
My_Data %>%
group_by(Location) %>%
do(tidy(lm(Predator.mass ~ Prey.mass, .))) %>%
write.csv("../Results/PP_Regress_Results_loc.csv") # write it out as a new file
source("PP_Regress_loc.R")
install.packages("broom")
source("PP_Regress_loc.R")
library(igraph) # Load the igraph package
rm(list = ls())
# 	ICL	UoR	CEH	ZSL	CEFAS	Nonacademic/CASE
# ICL	0	0	10	9	5	70
# UoR		0	12	0	2	76
# CEH			0	0	0	6
# ZSL			       0 	0	28
# CEFAS			       0	0
# Nonacademic/CASE                        0
links <- read.csv("../data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
#Test plot
plot(net, edge.arrow.size=1, edge.curved=.1,
vertex.color="orange", vertex.frame.color="#555555",
vertex.label=V(net)$Type, vertex.label.color="black",
vertex.label.cex=.7)
# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]
# Set node size based on Number of PIs:
# V(net)$size <- V(net)$Pis*0.9
V(net)$size <- 50
# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight
#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"
E(net)$width <- 1+E(net)$weight/10
graphics.off()
svg("../Results/QMEENet.svg",width=7,height=7)
plot(net, edge.curved=0, vertex.label.color="black")
legend(x=-1.5, y=-0.1, c("Hosting Partner", "Non-hosting Partner", "University"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
dev.off()
plot(net, edge.arrow.size=1, edge.curved=.1,
vertex.color="orange", vertex.frame.color="#555555",
vertex.label=V(net)$Type, vertex.label.color="black",
vertex.label.cex=.7)
links <- read.csv("../data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
#Test plot
plot(net, edge.arrow.size=1, edge.curved=.1,
vertex.color="orange", vertex.frame.color="#555555",
vertex.label=V(net)$Type, vertex.label.color="black",
vertex.label.cex=.7)
library(igraph) # Load the igraph package
links <- read.csv("../data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
links <- read.csv("../data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
setwd("~/Documents/CMEECourseWork/Week7/Code")
links <- read.csv("../data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
plot(net, edge.arrow.size=1, edge.curved=.1,
vertex.color="orange", vertex.frame.color="#555555",
vertex.label=V(net)$Type, vertex.label.color="black",
vertex.label.cex=.7)
V(net)$size <- 50
# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight
#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"
E(net)$width <- 1+E(net)$weight/10
plot(net, edge.curved=0, vertex.label.color="black")
legend(x=-1.5, y=-0.1, c("Hosting Partner", "Non-hosting Partner", "University"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
plot(net, edge.curved=0, vertex.label.color="black")
legend(x=-1.5, y=-0.1, c("Hosting Partner", "Non-hosting Partner", "University"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]
V(net)$size <- 50
# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"
library(igraph) # Load the igraph package
rm(list = ls())
# 	ICL	UoR	CEH	ZSL	CEFAS	Nonacademic/CASE
# ICL	0	0	10	9	5	70
# UoR		0	12	0	2	76
# CEH			0	0	0	6
# ZSL			       0 	0	28
# CEFAS			       0	0
# Nonacademic/CASE                        0
links <- read.csv("../data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
#Test plot
plot(net, edge.arrow.size=1, edge.curved=.1,
vertex.color="orange", vertex.frame.color="#555555",
vertex.label=V(net)$Type, vertex.label.color="black",
vertex.label.cex=.7)
# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]
# Set node size based on Number of PIs:
# V(net)$size <- V(net)$Pis*0.9
V(net)$size <- 50
# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight
#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"
E(net)$width <- 1+E(net)$weight/10
graphics.off()
svg("../Results/QMEENet.svg",width=7,height=7)
plot(net, edge.curved=0, vertex.label.color="black")
legend(x=-1.5, y=-0.1, c("Hosting Partner", "Non-hosting Partner", "University"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
dev.off()
library(igraph) # Load the igraph package
rm(list = ls())
# 	ICL	UoR	CEH	ZSL	CEFAS	Nonacademic/CASE
# ICL	0	0	10	9	5	70
# UoR		0	12	0	2	76
# CEH			0	0	0	6
# ZSL			       0 	0	28
# CEFAS			       0	0
# Nonacademic/CASE                        0
links <- read.csv("../data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
#Test plot
# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7)
# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]
# Set node size based on Number of PIs:
# V(net)$size <- V(net)$Pis*0.9
V(net)$size <- 50
# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight
#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"
E(net)$width <- 1+E(net)$weight/10
graphics.off()
svg("../Results/QMEENet.svg",width=7,height=7)
plot(net, edge.curved=0, vertex.label.color="black")
legend(x=-1.5, y=-0.1, c("Hosting Partner", "Non-hosting Partner", "University"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
dev.off()
source("Nets.R")
library(igraph) # Load the igraph package
rm(list = ls())
# 	ICL	UoR	CEH	ZSL	CEFAS	Nonacademic/CASE
# ICL	0	0	10	9	5	70
# UoR		0	12	0	2	76
# CEH			0	0	0	6
# ZSL			       0 	0	28
# CEFAS			       0	0
# Nonacademic/CASE                        0
links <- read.csv("../data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
#Test plot
# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7)
# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]
# Set node size based on Number of PIs:
# V(net)$size <- V(net)$Pis*0.9
V(net)$size <- 50
# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight
#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"
E(net)$width <- 1+E(net)$weight/10
graphics.off()
svg("../results/QMEENet.svg",width=7,height=7)
plot(net, edge.curved=0, vertex.label.color="black")
legend(x=-1.5, y=-0.1, c("Hosting Partner", "Non-hosting Partner", "University"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
dev.off()
install.packages(svglite)
install.packages("svglite")
rm(list = ls())
# 	ICL	UoR	CEH	ZSL	CEFAS	Nonacademic/CASE
# ICL	0	0	10	9	5	70
# UoR		0	12	0	2	76
# CEH			0	0	0	6
# ZSL			       0 	0	28
# CEFAS			       0	0
# Nonacademic/CASE                        0
links <- read.csv("../data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
#Test plot
# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7)
# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]
# Set node size based on Number of PIs:
# V(net)$size <- V(net)$Pis*0.9
V(net)$size <- 50
# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight
#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"
E(net)$width <- 1+E(net)$weight/10
graphics.off()
plot(net, edge.curved=0, vertex.label.color="black")
legend(x=-1.5, y=-0.1, c("Hosting Partner", "Non-hosting Partner", "University"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
