library(igraph) # Load the igraph package
rm(list = ls())
links <- read.csv("../data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)
View(links)
View(nodes)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
View(net)
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]
V(net)$size <- 50
# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"
E(net)$width <- 1+E(net)$weight/10
graphics.off()
svg("../results/QMEENet.svg",width=7,height=7)
plot(net, edge.curved=0, vertex.label.color="black")
legend(x=-1.5, y=-0.1, c("Hosting Partner", "Non-hosting Partner", "University"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
dev.off()
source("Nets.R")
plot(net, edge.arrow.size=1, edge.curved=.1,
vertex.color="orange", vertex.frame.color="#555555",
vertex.label=V(net)$Type, vertex.label.color="black",
vertex.label.cex=.7)
# Set node size based on Number of PIs:
V(net)$size <- V(net)$Pis*0.9
plot(net, edge.curved=0, vertex.label.color="black")
legend(x=-1.5, y=-0.1, c("Hosting Partner", "Non-hosting Partner", "University"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
#first let's open a plot to test on:
plot(1, type="n", xlab="", ylab="", xlim=c(0, 4), ylim=c(0, 4), cex=0.2)
start_position = 1, 1
direction = 0.5 #radians
length = 2
start_position = (1, 1)
direction = 0.5 #radians
length = 2
start_position = (1 1)
start_position = 1,1
start_position = 1 1
start_position = c(1,1)
#start position plus lenght plus direction = new point
next_position <- start_position + length
x <- starting_position[1]
y <- starting_position[2]
x <- start_position[1]
y <- start_position[2]
x <- direction*cos(length)
y <- direction*sin(length)
#first let's open a plot to test on:
plot(1, type="n", xlab="", ylab="", xlim=c(0, 4), ylim=c(0, 4), cex=0.2)
start_position = c(1,1)
direction = 0.5 #radians
length = 2
x <- start_position[1]
y <- start_position[2]
plot(x,y)
x <- direction*cos(length)
y <- direction*sin(length)
plot(x,y)
#first let's open a plot to test on:
plot(1, type="n", xlab="", ylab="", xlim=c(0, 4), ylim=c(0, 4), cex=0.2)
start_position = c(1,1)
direction = 0.5 #radians
length = 2
x <- start_position[1]
y <- start_position[2]
points(x,y)
x <- direction*cos(length)
y <- direction*sin(length)
points(x,y)
plot(1, type="n", xlab="", ylab="", xlim=c(-4, 4), ylim=c(-4, 4), cex=0.2)
turtle <- function(start_position, direction, length)  {
start_position = c(1,1)
direction = 0.5 #radians
length = 2
#start position plus lenght plus direction = new point
x <- start_position[1]
y <- start_position[2]
points(x,y)
x <- direction*cos(length)
y <- direction*sin(length)
points(x,y)
}
start_position = c(1,1)
direction = 0.5 #radians
length = 2
x <- start_position[1]
y <- start_position[2]
points(x,y)
x <- direction*cos(length)
y <- direction*sin(length)
points(x,y)
segmentInf <- (xs, ys) {
fit <- lm(ys~xs)
abline(fit)
}
segmentInf <- function(xs, ys){
fit <- lm(ys~xs)
abline(fit)
}
segementInf(x,y)
segmentInf(x,y)
start_position = c(1,1)
direction = 0.5 #radians
length = 2
x0 <- start_position[1]
y0 <- start_position[2]
points(x0,y0)
#first let's open a plot to test on:
plot(1, type="n", xlab="", ylab="", xlim=c(-4, 4), ylim=c(-4, 4), cex=0.2)
start_position = c(1,1)
direction = 0.5 #radians
length = 2
x0 <- start_position[1]
y0 <- start_position[2]
points(x0,y0)
x <- length*cos(direction) + x0
y <- length*sin(direction) + y0
points(x,y)
#draw a line from position 1 to position 2
line(x0, y0, x = x0, y = y0)
#first let's open a plot to test on:
plot(1, type="n", xlab="", ylab="", xlim=c(-4, 4), ylim=c(-4, 4), cex=0.2)
start_position = c(1,1)
direction = 0.5 #radians
length = 2
x0 <- start_position[1]
y0 <- start_position[2]
points(x0,y0)
x1 <- length*cos(direction) + x0
y1 <- length*sin(direction) + y0
points(x1,y1)
#draw a line from position 1 to position 2
segments(x0, y0, x = x1, y = y1)
#draw a line from position 1 to position 2
segments(x0, y0, x1 = x0, y1 = y0)
#draw a line from position 1 to position 2
segments(x0, y0, x1 = x0, y1 = y0, col = par("fg)"))
#draw a line from position 1 to position 2
segments(x0, y0, x1 = x0, y1 = y0, col = "pink")
point1 <- points(x0,y0)
point2 <- points(x1, y1)
line(point1, point2)
lines(point1, point2)
lines(point1, point2, pch=16)
#first let's open a plot to test on:
plot(1, type="n", xlab="", ylab="", xlim=c(-4, 4), ylim=c(-4, 4), cex=0.2)
start_position = c(1,1)
direction = 0.5 #radians
length = 2
#start position plus lenght plus direction = new point
x0 <- start_position[1]
y0 <- start_position[2]
points(x0,y0)
x1 <- length*cos(direction) + x0
y1 <- length*sin(direction) + y0
points(x1,y1)
#draw a line from position 1 to position 2
segments(x0, y0, x1 = x0, y1 = y0, col = "pink")
#draw a line from position 1 to position 2
segments(x0, y0, x1 = x0, y1 = y0, col = 'blue')
segments(x0 = 1, y0 = 1, x1 = 2, y2 = 2)
segments(x0 = x0, y0 = y0, x1 = x1, y2 = y2)
#draw a line from position 1 to position 2
segments(x0, y0, x1 = x1, y1 = y1, col = 'blue')
#first let's open a plot to test on:
plot(1, type="n", xlab="", ylab="", xlim=c(-4, 4), ylim=c(-4, 4), cex=0.2)
plot(1, type="n", xlab="", ylab="", xlim=c(-4, 4), ylim=c(-4, 4), cex=0.2)
start_position = c(1,1)
direction = 0.5 #radians
length = 2
turtle <- function(start_position, direction, length)  {
#start position plus lenght plus direction = new point
x0 <- start_position[1]
y0 <- start_position[2]
points(x0,y0)
x1 <- length*cos(direction) + x0
y1 <- length*sin(direction) + y0
points(x1,y1)
#draw a line from position 1 to position 2
segments(x0, y0, x1 = x1, y1 = y1, col = 'blue')
return(x1, y1) # you should return your endpoint here.
}
turtle()
turtle <- function(start_position, direction, length)  {
#start position plus lenght plus direction = new point
x0 <- start_position[1]
y0 <- start_position[2]
points(x0,y0)
x1 <- length*cos(direction) + x0
y1 <- length*sin(direction) + y0
points(x1,y1)
#draw a line from position 1 to position 2
segments(x0, y0, x1 = x1, y1 = y1, col = 'blue')
return(x1, y1) # you should return your endpoint here.
}
turtle(start_position = c(1,1), direction = 0.5, length = 2)
turtle <- function(start_position, direction, length)  {
#start position plus lenght plus direction = new point
x0 <- start_position[1]
y0 <- start_position[2]
points(x0,y0)
x1 <- length*cos(direction) + x0
y1 <- length*sin(direction) + y0
#points(x1,y1)
endpoint <- points(x1,y1)
#draw a line from position 1 to position 2
segments(x0, y0, x1 = x1, y1 = y1, col = 'blue')
return(endpoint) # you should return your endpoint here.
}
#first let's open a plot to test on:
plot(1, type="n", xlab="", ylab="", xlim=c(-4, 4), ylim=c(-4, 4), cex=0.2)
turtle(start_position = c(1,1), direction = 0.5, length = 2)
turtle <- function(start_position, direction, length)  {
#start position plus lenght plus direction = new point
x0 <- start_position[1]
y0 <- start_position[2]
points(x0,y0)
x1 <- length*cos(direction) + x0
y1 <- length*sin(direction) + y0
#points(x1,y1)
endpoint <- (x1,y1)
#draw a line from position 1 to position 2
segments(x0, y0, x1 = x1, y1 = y1, col = 'blue')
return(endpoint) # you should return your endpoint here.
}
turtle <- function(start_position, direction, length)  {
#start position plus lenght plus direction = new point
x0 <- start_position[1]
y0 <- start_position[2]
points(x0,y0)
x1 <- length*cos(direction) + x0
y1 <- length*sin(direction) + y0
#points(x1,y1)
endpoint <- c(x1,y1)
#draw a line from position 1 to position 2
segments(x0, y0, x1 = x1, y1 = y1, col = 'blue')
return(endpoint) # you should return your endpoint here.
}
#first let's open a plot to test on:
plot(1, type="n", xlab="", ylab="", xlim=c(-4, 4), ylim=c(-4, 4), cex=0.2)
turtle(start_position = c(1,1), direction = 0.5, length = 2)
turtle <- function(start_position, direction, length)  {
#start position plus lenght plus direction = new point
x0 <- start_position[1]
y0 <- start_position[2]
points(x0,y0)
x1 <- length*cos(direction) + x0
y1 <- length*sin(direction) + y0
points(x1,y1)
endpoint <- c(x1,y1)
#draw a line from position 1 to position 2
segments(x0, y0, x1 = x1, y1 = y1, col = 'blue')
return(endpoint) # you should return your endpoint here.
}
#first let's open a plot to test on:
plot(1, type="n", xlab="", ylab="", xlim=c(-4, 4), ylim=c(-4, 4), cex=0.2)
turtle(start_position = c(1,1), direction = 0.5, length = 2)
load("/Users/amysolman/Documents/CMEECourseWork/Week9/Results/simulation/simulation_1.rda")
View(species_octaves_list)
plot(1, type="n", xlab="", ylab="", xlim=c(-4, 4), ylim=c(-4, 4), cex=0.2)
elbow(start_position = c(1,1), direction = 0.5, length = 2)
# Question 25
elbow <- function(start_position, direction, length)  {
first_line <- turtle(start_position, direction, length)
}
elbow(start_position = c(1,1), direction = 0.5, length = 2)
first_line
first_line <- turtle(start_position, direction, length)
45*pi/4
45*(pi/4)
pi*4
# Question 25
elbow <- function(start_position, direction, length)  {
first_line <- turtle(start_position, direction, length)
second_line <-turtle(start_position = first_line, direction = (pi/4), length = length*0.95)
}
elbow(start_position = c(1,1), direction = 0.5, length = 2)
plot(1, type="n", xlab="", ylab="", xlim=c(-4, 4), ylim=c(-4, 4), cex=0.2)
# Question 25
elbow <- function(start_position, direction, length)  {
first_line <- turtle(start_position, direction, length)
second_line <-turtle(start_position = first_line, direction = (pi/4), length = length*0.95)
}
elbow(start_position = c(1,1), direction = 0.5, length = 2)
pi/4
plot(1, type="n", xlab="", ylab="", xlim=c(0, 15), ylim=c(0, 15), cex=0.2)
plot(1, type="n", xlab="", ylab="", xlim=c(0, 20), ylim=c(0, 20), cex=0.2)
# Question 26
spiral <- function(start_position, direction, length)  {
first_line <- turtle(start_position, direction, length)
second_line <-spiral(start_position = first_line, direction = (pi/4), length = length*0.95)
return("type your written answer here")
}
spiral(start_position = c(1,1), direction = 0.5, length = 2)
# Question 26
spiral <- function(start_position, direction, length)  {
first_line <- turtle(start_position, direction, length)
second_line <-spiral(start_position = first_line, direction = (pi/4)+(pi/4), length = length*0.95)
return("type your written answer here")
}
plot(1, type="n", xlab="", ylab="", xlim=c(0, 20), ylim=c(0, 20), cex=0.2)
spiral(start_position = c(1,1), direction = 0.5, length = 2)
# Question 26
spiral <- function(start_position, direction, length)  {
first_line <- turtle(start_position, direction, length)
second_line <-spiral(start_position = first_line, direction = (pi/4), length = length*0.95)
return("type your written answer here")
}
spiral(start_position = c(1,1), direction = 0.5, length = 2)
# Question 26
spiral <- function(start_position, direction, length)  {
first_line <- turtle(start_position, direction, length)
second_line <-spiral(start_position = first_line, direction = direction + (pi/4), length = length*0.95)
return("type your written answer here")
}
spiral <- function(start_position, direction, length)  {
first_line <- turtle(start_position, direction, length)
second_line <-spiral(start_position = first_line, direction = direction + (pi/4), length = length*0.95)
return("type your written answer here")
}
spiral(start_position = c(1,1), direction = 0.5, length = 2)
plot(1, type="n", xlab="", ylab="", xlim=c(0, 20), ylim=c(0, 20), cex=0.2)
plot(1, type="n", xlab="", ylab="", xlim=c(0, 8), ylim=c(0, 8), cex=0.2)
# Question 26
spiral <- function(start_position, direction, length)  {
first_line <- turtle(start_position, direction, length)
second_line <-spiral(start_position = first_line, direction = direction + (pi/4), length = length*0.95)
return("type your written answer here")
}
spiral(start_position = c(1,1), direction = 0.5, length = 2)
plot(1, type="n", xlab="", ylab="", xlim=c(-2, 8), ylim=c(0, 8), cex=0.2)
# Question 26
spiral <- function(start_position, direction, length)  {
first_line <- turtle(start_position, direction, length)
second_line <-spiral(start_position = first_line, direction = direction + (pi/4), length = length*0.95)
return("type your written answer here")
}
spiral(start_position = c(1,1), direction = 0.5, length = 2)
turtle <- function(start_position, direction, length)  {
#start position plus lenght plus direction = new point
x0 <- start_position[1]
y0 <- start_position[2]
#points(x0,y0)
x1 <- length*cos(direction) + x0
y1 <- length*sin(direction) + y0
#points(x1,y1)
endpoint <- c(x1,y1)
#draw a line from position 1 to position 2
segments(x0, y0, x1 = x1, y1 = y1, col = 'blue')
return(endpoint) # you should return your endpoint here.
}
spiral <- function(start_position, direction, length)  {
first_line <- turtle(start_position, direction, length)
second_line <-spiral(start_position = first_line, direction = direction + (pi/4), length = length*0.95)
return("type your written answer here")
}
spiral(start_position = c(1,1), direction = 0.5, length = 2)
plot(1, type="n", xlab="", ylab="", xlim=c(-2, 8), ylim=c(0, 8), cex=0.2)
spiral(start_position = c(1,1), direction = 0.5, length = 2)
spiral <- function(start_position, direction, length)  {
first_line <- turtle(start_position, direction, length)
second_line <-spiral(start_position = first_line, direction = direction + (pi/4), length = length*0.95)
return("This function uses turtle to draw the first line, then calls itself the draw proceeding lines
from the last point, with direction angle + new angle, with gradually decreasing length.")
}
plot(1, type="n", xlab="", ylab="", xlim=c(-2, 8), ylim=c(0, 8), cex=0.2)
spiral(start_position = c(1,1), direction = 0.5, length = 2)
spiral()
spiral <- function(start_position, direction, length)
--
# Question 26
spiral <- function(start_position, direction, length)  {
first_line <- turtle(start_position, direction, length)
second_line <-spiral(start_position = first_line, direction = direction + (pi/4), length = length*0.95)
return("This function uses turtle to draw the first line, then calls itself the draw proceeding lines
from the last point, with direction angle + new angle, with gradually decreasing length.")
}
plot(1, type="n", xlab="", ylab="", xlim=c(-2, 8), ylim=c(0, 8), cex=0.2)
spiral(start_position = c(1,1), direction = 0.5, length = 2)
spiral <- function(start_position, direction, length)  {
first_line <- turtle(start_position, direction, length)
second_line <-spiral(start_position = first_line, direction = direction + (pi/4), length = length*0.95)
return("This function uses turtle to draw the first line, then calls itself the draw proceeding lines from the last point, with direction angle + new angle, with gradually decreasing length.")
}
plot(1, type="n", xlab="", ylab="", xlim=c(-2, 8), ylim=c(0, 8), cex=0.2)
}
spiral(start_position = c(1,1), direction = 0.5, length = 2)
spiral <- function(start_position, direction, length)  {
first_line <- turtle(start_position, direction, length)
second_line <-spiral(start_position = first_line, direction = direction + (pi/4), length = length*0.95)
x <- "This function uses turtle to draw the first line, then calls itself the draw proceeding lines from the last point, with direction angle + new angle, with gradually decreasing length."
return(x)
}
plot(1, type="n", xlab="", ylab="", xlim=c(-2, 8), ylim=c(0, 8), cex=0.2)
spiral(start_position = c(1,1), direction = 0.5, length = 2)
