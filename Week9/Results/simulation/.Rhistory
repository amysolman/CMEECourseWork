x <- sum_vect(oct_2500[[1]], oct_2500[[2]])
for (i in 3:(length(oct_2500) - 1)) {
a <- sum_vect(x, oct_2500[[i]])
x <- a
}
#The total number of simulations (25) x total number of generations in each simulation
# equals total generations simulated
len_2500 <- 0
for (i in 1:length(octave_2500)) {
len_2500 <- len_2500 + length(octave_2500[[i]])
}
oct_2500_total <- x/len_2500
#######MEAN OCTAVES FOR COMMUNITY SIZE 5000#########
oct_5000 <- list()
for (j in 1:length(octave_5000)) { #for each simulation
i <- 1 #assign value of 1 to i
x <- octave_5000[[j]][i] #apply the first octave from the first sim to x
y <- octave_5000[[j]][i+1] #apply the second octave for the first sim to y
x <- sum_vect(x[[1]], y[[1]]) #add them together and save to x
for (i in 2:length(octave_5000[[i]])) { #from 2 to the number of generations in the simulation
y <- octave_5000[[j]][i+1] #apply the third octave of the first sim to y
y <- as.numeric(y[[1]]) #turn it into a number
x <- sum_vect(x, y) #add the x of gen 1 and 2 to gen 3
oct_5000[[j]] <- x #stores the octave totals for each simulation
}
}
x <- sum_vect(oct_5000[[1]], oct_5000[[2]])
for (i in 3:(length(oct_5000) - 1)) {
a <- sum_vect(x, oct_5000[[i]])
x <- a
}
#The total number of simulations (25) x total number of generations in each simulation
# equals total generations simulated
len_5000 <- 0
for (i in 1:length(octave_5000)) {
len_5000 <- len_5000 + length(octave_5000[[i]])
}
oct_5000_total <- x/len_5000
graphics.off()
par(mfcol=c(2,2)) #initialize multi-paneled plot
par(mfg = c(1,1)) #specify which subplot to use first
barplot(oct_500_total,
names.arg=1:length(oct_500_total), xlab = "octaves", ylab = "Count", col = "blue", border = "pink",
main = 'Community Size 500') #Add title
par(mfg = c(1,2)) #Second sub-plot
barplot(oct_1000_total, names.arg=1:length(oct_1000_total), xlab = "octaves", ylab = "Count", col = "green",
border = "pink", main = 'Community Size 1000')
par(mfg = c(2,1)) #Second sub-plot
barplot(oct_2500_total, names.arg=1:length(oct_2500_total), xlab = "octaves", ylab = "Count", col = "red",
border = "pink", main = 'Community Size 2500')
par(mfg = c(2,2)) #Second sub-plot
barplot(oct_5000_total, names.arg=1:length(oct_5000_total), xlab = "octaves", ylab = "Count", col = "yellow",
border = "pink", main = 'Community Size 5000')
combined_results <- list(oct_500_total, oct_1000_total, oct_2500_total, oct_5000_total) #create your list output here to return
return(combined_results)
}
# Question 21
question_21 <- function()  {
x <- list()
x[1] <- log(8)/log(3)
x[2] <- "To find fractal dimensions we divide the log(number of pieces we are dividing into) by the log(magnification factor)."
return(x)
}
# Question 22
question_22 <- function()  {
x <- list()
x[1] <- log(24)/log(3)
x[2] <- "To find this fractal dimension we divided the log(number of pieces = 8x3) by log(magnification factor)."
return(x)
}
# Question 23
chaos_game <- function()  {
# clear any existing graphs and plot your graph within the R window
graphics.off()
plot(1, type="n", xlab="", ylab="", xlim=c(0, 4), ylim=c(0, 4), cex=0.2)
A <- c(0,0)
B <- c(3,4)
C <- c(4,1)
ABC <- rbind(A=A, B=B, C=C)
X <- as.numeric(A)
points(X[1], X[2], cex = 0.2) #plot X
x <- 0
y <- 0
for (i in 1:10000) {
p <- as.numeric(ABC[sample(nrow(ABC), 1), ])
x <- ((x + p[1])/2)
y <- ((y + p[2])/2)
points(x, y, cex = 0.2) #plot X
}
}
# Question 24
turtle <- function(start_position, direction, length)  {
#start position plus lenght plus direction = new point
x0 <- start_position[1]
y0 <- start_position[2]
x1 <- length*cos(direction) + x0
y1 <- length*sin(direction) + y0
endpoint <- c(x1,y1)
#draw a line from position 1 to position 2
segments(x0, y0, x1 = x1, y1 = y1, col = 'blue')
return(endpoint) # you should return your endpoint here.
}
# Question 25
elbow <- function(start_position, direction, length)  {
first_line <- turtle(start_position, direction, length)
second_line <-turtle(start_position = first_line, direction = (pi/4), length = length*0.95)
}
# Question 26
spiral <- function(start_position, direction, length)  {
if (length > 0.05) {
first_line <- turtle(start_position, direction, length)
second_line <-spiral(start_position = first_line, direction = direction + (pi/4), length = length*0.95)
}
return("This function uses turtle to draw the initial line, then calls itself to draw proceeding lines, adding 0.79 to the direction and decreasing line length by 5% each time.") #get return to work
}
# Question 27
draw_spiral <- function()  {
graphics.off()
plot(1, type="n", xlab="", ylab="", xlim=c(-2, 8), ylim=c(0, 8), cex=0.2)
spiral(start_position = c(1,1), direction = 0.5, length = 2)
}
# Question 28
tree <- function(start_position, direction, length)  {
if (length > 0.05) {
first_line <- turtle(start_position, direction, length)
second_line <-tree(start_position = first_line, direction = direction + (pi/4), length = length*0.65)
third_line <-tree(start_position = first_line, direction = direction - (pi/4), length = length*0.65)
}
}
draw_tree <- function()  {
graphics.off()
plot(1, type="n", xlab="", ylab="", xlim=c(-2, 8), ylim=c(0, 9), cex=0.2)
tree(start_position = c(1,1), direction = 1, length = 3)
}
# Question 29
fern <- function(start_position, direction, length)  {
if (length > 0.05) {
first_line <- turtle(start_position, direction, length)
second_line <-fern(start_position = first_line, direction = direction + (pi/4), length = length*0.38)
third_line <-fern(start_position = first_line, direction = direction, length = length*0.87)
}
}
draw_fern <- function()  {
# clear any existing graphs and plot your graph within the R window
graphics.off()
plot(1, type="n", xlab="", ylab="", xlim=c(0,10), ylim=c(0,14), cex=0.2)
fern(start_position = c(1,1), direction = 1, length = 2)
}
# Question 30
fern2 <- function(start_position, direction, length, dir)  {
if (length > 0.005) {
first_line <- turtle(start_position, direction, length)
second_line <-fern2(start_position = first_line, direction = direction + (pi/4) * dir, length = length*0.38, dir = dir)
third_line <-fern2(start_position = first_line, direction = direction, length = length*0.87, dir = dir * -1)
}
}
draw_fern2 <- function()  {
# clear any existing graphs and plot your graph within the R window
graphics.off()
plot(1, type="n", xlab="", ylab="", xlim=c(-3, 5), ylim=c(0, 16))
fern2(start_position = c(1,1), direction = 1.58, length = 2, dir = 1)
}
# Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.
# Challenge question A
Challenge_A <- function() {
# clear any existing graphs and plot your graph within the R window
graphics.off()
y <- c() #initialising empty vector
y2 <-c()
sim = 50 #simualtion size
duration = 600 #number of generations
speciation_rate <- 0.1 #speciation rate
community_max <- init_community_max(100) #create initial community with maximum diversity
community_min <- init_community_min(100) #create initial community with minimum diversity
for(i in 1:sim){ #loop through simulations
richness <- neutral_time_series_speciation(community_max, speciation_rate, duration)
richness2 <- neutral_time_series_speciation(community_min, speciation_rate, duration)
y <- sum_vect(y, richness) #add vectors of richness
y2 <- sum_vect(y2, richness2)
}
#averages from the simulations
yav <- round(y/sim)
y2av <- round(y2/sim)
#we want to plot how many unique species are present at each generation against generation
#so, how many unique species are present at each time step
x1 <- 1:(duration + 1)
y1 <- apply(yav, 1, function(x)length(unique(x)))
plot(y1~x1, pch=20, col = "blue", type = "l", xlab = "Number of Generations",
ylab = "Species diversity",
main = "Neutral Time Series Speciation, Average of 50 Simulations", ylim = c(0, 40))
x2 <- 1:(duration + 1)
y2 <- apply(y2av, 1, function(x)length(unique(x)))
lines(y2~x2, pch=20, col = "red")
#lines(upper_max_to_plot, col = "pink")
legend('topright', pch = c(2,2, 19), c('Initial maximum diversity', 'Initial minimum diversity', 'Estimated dynamic equilibrium'), col = c("blue", "red", "black"))
#find confidence intervals and merge into data frame with y1
#CONFIDENCE INTERVALS
error_max <- qt(0.975,df=length(y1)-1)*sd(y1)/sqrt(length(y1))
upper_max <- y1 + error_max
lower_max <- y1 - error_max
error_min <- qt(0.975,df=length(y2)-1)*sd(y2)/sqrt(length(y2))
upper_min <- y2 + error_min
lower_min <- y2 - error_min
#make polygon where coordinates start with lower limit and
#then upper limit in reverse order
polygon(c(x1,rev(x1)),c(lower_max,rev(upper_max)),col = "grey75", border = FALSE)
polygon(c(x2,rev(x2)),c(lower_min,rev(upper_min)),col = "grey75", border = FALSE)
#Estimate and plot number of generations needed to reach dynamic equilibrium
points(x1[350],y1[350], col = "black", pch=19)
}
# Challenge question B
Challenge_B <- function() {
###INITIAL COMMUNITY FUNCTION###
init_community <- function(size, richness){
a <- seq(richness) #create sequence from 1 to richness value
community <- rep(a, size/richness) #replicate the values of a (size/richness) times
return(community)
}
plot_fun <- function(community) {
graphics.off()
x <- c() #initialise empty x vector
y <- c() #initialise empty y vector
sim = 10 #define number of simulations
duration = 500 #define number of generations
speciation_rate = 0.1 #define speciation rate
for (i in 1:sim) { #for each simulation
richness <- neutral_time_series_speciation(community, speciation_rate, duration) #run a neutral_time_series_speciation
y <- sum_vect(y, richness) #store the sum of all the richness vectors
}
average_y <- y/sim #average the total richness vectors
return(average_y)
}
size = 100 #define the community size
richnesses <- c(1, 1:10*10) #create vector of richnesses, 1 to 10 * 10
total_rich <- c() #define empty total_richness vector
for (x in richnesses){  #for each richness
community <- init_community(size, x) #create the initial community
a <- plot_fun(community) #run the neutral_time_series_speciation on that community
total_rich <- cbind(total_rich, a) #bind the total richnesses together
}
###PLOT THE AVERAGED TIME SERIES SPECIATIONS###
plot(x = 1:nrow(total_rich), y = total_rich[,1],type = "l", col = "black", ylim = c(0,100), xlab = "Generations", ylab = "Species richness")
title(main = "Species richness through generations \nacross multiple average communities", line = 0.05, cex=0.01)
for (i in 1:ncol(total_rich)){
lines(x = 1:nrow(total_rich), y = total_rich[,i], col = i)
}
}
# Challenge question C
Challenge_C <- function() {
# clear any existing graphs and plot your graph within the R window
}
# Challenge question D
Challenge_D <- function() {
# clear any existing graphs and plot your graph within the R window
return("type your written answer here")
}
# Challenge question E
Challenge_E <- function() {
# clear any existing graphs and plot your graph within the R window
graphics.off()
plot(1, type="n", xlab="", ylab="", xlim=c(0, 4), ylim=c(0, 4), cex=0.2) #open graph
A <- c(1,1) #assign point A
B <- c(3,1) #assign point B
C <- c(2,3) #assign point C
ABC <- rbind(A=A, B=B, C=C) #bind the point values into a matrix
X <- as.numeric(A) #assign the values of A to X
points(X[1], X[2], cex = 0.2) #plot X
x <- 0
y <- 0
for (i in 1:8000) { #loop 8000 times
p <- as.numeric(ABC[sample(nrow(ABC), 1), ]) #assign p a random row of ABC
x <- ((x + p[1])/2) #x coordinate becomes x + the first value of p divided by 2
y <- ((y + p[2])/2) #y coordinate becomes y + the second value of p divided by 2
points(x, y, cex = 0.2, col="red") #plot x and y in red
}
for (i in 1:2000) { #loop 2000 times
p <- as.numeric(ABC[sample(nrow(ABC), 1), ]) #assign p a random row of ABC
x <- ((x + p[1])/2) #x coordinate becomes x + the first value of p divided by 2
y <- ((y + p[2])/2) #y coordinate becomes y + the second value of p divided by 2
points(x, y, cex = 0.2, col = "blue") #plot x and y in blue
}
return("The fractcal triangle changes angle and position on the graph when the chaos game is run from a different starting point.")
}
Challenge_F <- function() {
another_turtle <- function(start_position, direction, length, col)  {
#start position plus lenght plus direction = new point
x0 <- start_position[1]
y0 <- start_position[2]
x1 <- length*cos(direction) + x0
y1 <- length*sin(direction) + y0
endpoint <- c(x1,y1)
#draw a line from position 1 to position 2
segments(x0, y0, x1 = x1, y1 = y1, col = col)
return(endpoint) # you should return your endpoint here.
}
fern_1 <- function(start_position, direction, length, dir)  {
if (length > 0.005) {
first_line <- another_turtle(start_position, direction, length, col = "olivedrab4")
second_line <-fern_1(start_position = first_line, direction = direction + (pi/2) * dir, length = length*0.38, dir = dir)
third_line <-fern_1(start_position = first_line, direction = direction, length = length*0.87, dir = dir * -1)
}
}
fern_2 <- function(start_position, direction, length, dir)  {
if (length > 0.005) {
first_line <- another_turtle(start_position, direction, length, col = "orange")
second_line <-fern_2(start_position = first_line, direction = direction + (pi/2) * dir, length = length*0.38, dir = dir)
third_line <-fern_2(start_position = first_line, direction = direction, length = length*0.87, dir = dir * -1)
}
}
fern_3 <- function(start_position, direction, length, dir)  {
if (length > 0.005) {
first_line <- another_turtle(start_position, direction, length, col = "orange3")
second_line <-fern_3(start_position = first_line, direction = direction + (pi/2) * dir, length = length*0.38, dir = dir)
third_line <-fern_3(start_position = first_line, direction = direction, length = length*0.87, dir = dir * -1)
}
}
fern_4 <- function(start_position, direction, length, dir)  {
if (length > 0.005) {
first_line <- another_turtle(start_position, direction, length, col = "saddlebrown")
second_line <-fern_4(start_position = first_line, direction = direction + (pi/2) * dir, length = length*0.38, dir = dir)
third_line <-fern_4(start_position = first_line, direction = direction, length = length*0.87, dir = dir * -1)
}
}
graphics.off()
par(mfcol=c(2,2))
par(cex=0.6)
par(mar = c(0,0,0,0))
plot(1, xaxt='n', yaxt='n', ann=FALSE, xlim=c(-6, 8), ylim=c(0, 25))
fern_1(start_position = c(1,1), direction = 1.58, length = 3, dir = 1)
par(mfg=c(1,2))
plot(1, xaxt='n', yaxt='n', ann=FALSE, xlim=c(-6, 8), ylim=c(0, 25))
fern_2(start_position = c(1,1), direction = 1.58, length = 3, dir = -1)
par(mfg=c(2,1))
plot(1, xaxt='n', yaxt='n', ann=FALSE, xlim=c(-6, 8), ylim=c(0, 25))
fern_3(start_position = c(1,1), direction = 1.58, length = 3, dir = 1)
par(mfg=c(2,2))
plot(1, xaxt='n', yaxt='n', ann=FALSE, xlim=c(-6, 8), ylim=c(0, 25))
fern_4(start_position = c(1,1), direction = 1.58, length = 3, dir = -1)
return("As the line size threshold is increased the image produced is less detailed and takes less time to generate. As the line size threshold is decreased the image takes longer to generate.")
}
# Challenge question G should be written in a separate file that has no dependencies on any functions here.
process_cluster_results()
setwd("~/Documents/CMEECourseWork/Week9/Results/simulation")
# one set of results as a list from all your cluster runs put together.
#That is the four sets of octaves in a list of 4 vectors as the only thing saved in an RDA file.
##########CODE TO IMPORT RESULTS#########
octave_500 <- list() #create empty lists for each octave
octave_1000 <- list()
octave_2500 <- list()
octave_5000 <- list()
##########LOAD SPECIES OCTAVES AND RICHNESS BY SIMULATION SIZE###########
for (i in 1:100) {
loaded <- load(paste0("simulation_",i,".rda"))
if (size == 500) {
octave_500[[i]] <- species_octaves_list
} else {
if (size == 1000) {
octave_1000[[i]] <- species_octaves_list
} else {
if (size == 2500) {
octave_2500[[i]] <- species_octaves_list
} else {
if (size == 5000) {
octave_5000[[i]] <- species_octaves_list
}
}
}
}
}
##########REMOVE NULL VALUES#########
l1 <- lapply(octave_1000, function(x) x[lengths(x) > 0])
octave_1000 <- l1[lengths(l1) >  0]
l1 <- lapply(octave_2500, function(x) x[lengths(x) > 0])
octave_2500 <- l1[lengths(l1) >  0]
l1 <- lapply(octave_500, function(x) x[lengths(x) > 0])
octave_500 <- l1[lengths(l1) >  0]
l1 <- lapply(octave_5000, function(x) x[lengths(x) > 0])
octave_5000 <- l1[lengths(l1) >  0]
# rm(l1)
# rm(species_octaves_list)
# rm(species_richness_list)
# rm(burn_in_generations)
# rm(community)
# rm(i)
# rm(interval_oct)
# rm(interval_rich)
# rm(loaded)
# rm(size)
# rm(speciation_rate)
# rm(total_time)
# rm(x)
# rm(y)
#removes species abundance octaves before burn in time
for (i in 1:25) {
octave_500[[i]][1:80] <- NULL
octave_1000[[i]][1:80] <- NULL
octave_2500[[i]][1:80] <- NULL
octave_5000[[i]][1:80] <- NULL
}
###use octave_500, octave_1000, octave_2500 and octave_5000 to create four bar charts of average species abundance
oct_500 <- list()
for (j in 1:length(octave_500)) { #for each simulation
i <- 1 #assign value of 1 to i
x <- octave_500[[j]][i] #apply the first octave from the first sim to x
y <- octave_500[[j]][i+1] #apply the second octave for the first sim to y
x <- sum_vect(x[[1]], y[[1]]) #add them together and save to x
for (i in 2:length(octave_500[[i]])) { #from 2 to the number of generations in the simulation
y <- octave_500[[j]][i+1] #apply the third octave of the first sim to y
y <- as.numeric(y[[1]]) #turn it into a number
x <- sum_vect(x, y) #add the x of gen 1 and 2 to gen 3
oct_500[[j]] <- x #stores the octave totals for each simulation
}
}
x <- sum_vect(oct_500[[1]], oct_500[[2]])
for (i in 3:(length(oct_500) - 1)) {
a <- sum_vect(x, oct_500[[i]])
x <- a
}
#The total number of simulations (25) x total number of generations in each simulation
# equals total generations simulated
len_500 <- 0
for (i in 1:length(octave_500)) {
len_500 <- len_500 + length(octave_500[[i]])
}
oct_500_total <- x/len_500 #divide the totalled octave values by the number of octave values
#######MEAN OCTAVES FOR COMMUNITY SIZE 1000#########
oct_1000 <- list()
for (j in 1:length(octave_1000)) { #for each simulation
i <- 1 #assign value of 1 to i
x <- octave_1000[[j]][i] #apply the first octave from the first sim to x
y <- octave_1000[[j]][i+1] #apply the second octave for the first sim to y
x <- sum_vect(x[[1]], y[[1]]) #add them together and save to x
for (i in 2:length(octave_1000[[i]])) { #from 2 to the number of generations in the simulation
y <- octave_1000[[j]][i+1] #apply the third octave of the first sim to y
y <- as.numeric(y[[1]]) #turn it into a number
x <- sum_vect(x, y) #add the x of gen 1 and 2 to gen 3
oct_1000[[j]] <- x #stores the octave totals for each simulation
}
}
x <- sum_vect(oct_1000[[1]], oct_1000[[2]])
for (i in 3:(length(oct_1000) - 1)) {
a <- sum_vect(x, oct_1000[[i]])
x <- a
}
#The total number of simulations (25) x total number of generations in each simulation
# equals total generations simulated
len_1000 <- 0
for (i in 1:length(octave_1000)) {
len_1000 <- len_1000 + length(octave_1000[[i]])
}
oct_1000_total <- x/len_1000 #divi
#######MEAN OCTAVES FOR COMMUNITY SIZE 2500#########
oct_2500 <- list()
for (j in 1:length(octave_2500)) { #for each simulation
i <- 1 #assign value of 1 to i
x <- octave_2500[[j]][i] #apply the first octave from the first sim to x
y <- octave_2500[[j]][i+1] #apply the second octave for the first sim to y
x <- sum_vect(x[[1]], y[[1]]) #add them together and save to x
for (i in 2:length(octave_2500[[i]])) { #from 2 to the number of generations in the simulation
y <- octave_2500[[j]][i+1] #apply the third octave of the first sim to y
y <- as.numeric(y[[1]]) #turn it into a number
x <- sum_vect(x, y) #add the x of gen 1 and 2 to gen 3
oct_2500[[j]] <- x #stores the octave totals for each simulation
}
}
x <- sum_vect(oct_2500[[1]], oct_2500[[2]])
for (i in 3:(length(oct_2500) - 1)) {
a <- sum_vect(x, oct_2500[[i]])
x <- a
}
#The total number of simulations (25) x total number of generations in each simulation
# equals total generations simulated
len_2500 <- 0
for (i in 1:length(octave_2500)) {
len_2500 <- len_2500 + length(octave_2500[[i]])
}
oct_2500_total <- x/len_2500
#######MEAN OCTAVES FOR COMMUNITY SIZE 5000#########
oct_5000 <- list()
for (j in 1:length(octave_5000)) { #for each simulation
i <- 1 #assign value of 1 to i
x <- octave_5000[[j]][i] #apply the first octave from the first sim to x
y <- octave_5000[[j]][i+1] #apply the second octave for the first sim to y
x <- sum_vect(x[[1]], y[[1]]) #add them together and save to x
for (i in 2:length(octave_5000[[i]])) { #from 2 to the number of generations in the simulation
y <- octave_5000[[j]][i+1] #apply the third octave of the first sim to y
y <- as.numeric(y[[1]]) #turn it into a number
x <- sum_vect(x, y) #add the x of gen 1 and 2 to gen 3
oct_5000[[j]] <- x #stores the octave totals for each simulation
}
}
x <- sum_vect(oct_5000[[1]], oct_5000[[2]])
for (i in 3:(length(oct_5000) - 1)) {
a <- sum_vect(x, oct_5000[[i]])
x <- a
}
#The total number of simulations (25) x total number of generations in each simulation
# equals total generations simulated
len_5000 <- 0
for (i in 1:length(octave_5000)) {
len_5000 <- len_5000 + length(octave_5000[[i]])
}
oct_5000_total <- x/len_5000
#save(octave_500, octave_1000, octave_2500, octave_5000, file = "asolman_cluster_results.rda")
oct_1000_total
save(oct_500_total, oct_1000_total, oct_2500_total, oct_5000_total, file = "abs119_cluster_results.rda")
rm(list=ls())
load("/Users/amysolman/Documents/CMEECourseWork/Week9/Results/simulation/abs119_cluster_results.rda")
rm(list=ls())
load("/Users/amysolman/Documents/CMEECourseWork/Week9/Results/simulation/abs119_cluster_results.rda")
oct_1000_total
oct_2500_total
