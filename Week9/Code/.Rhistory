len_2500 <- len_2500 + length(octave_2500[[i]])
}
oct_2500_total <- x/len_2500
#######MEAN OCTAVES FOR COMMUNITY SIZE 5000#########
oct_5000 <- list()
for (j in 1:length(octave_5000)) { #for each simulation
i <- 1 #assign value of 1 to i
x <- octave_5000[[j]][i] #apply the first octave from the first sim to x
y <- octave_5000[[j]][i+1] #apply the second octave for the first sim to y
x <- sum_vect(x[[1]], y[[1]]) #add them together and save to x
for (i in 2:length(octave_5000[[i]])) { #from 2 to the number of generations in the simulation
y <- octave_5000[[j]][i+1] #apply the third octave of the first sim to y
y <- as.numeric(y[[1]]) #turn it into a number
x <- sum_vect(x, y) #add the x of gen 1 and 2 to gen 3
oct_5000[[j]] <- x #stores the octave totals for each simulation
}
}
x <- sum_vect(oct_5000[[1]], oct_5000[[2]])
for (i in 3:(length(oct_5000) - 1)) {
a <- sum_vect(x, oct_5000[[i]])
x <- a
}
#The total number of simulations (25) x total number of generations in each simulation
# equals total generations simulated
len_5000 <- 0
for (i in 1:length(octave_5000)) {
len_5000 <- len_5000 + length(octave_5000[[i]])
}
oct_5000_total <- x/len_5000
graphics.off()
par(mfcol=c(2,2)) #initialize multi-paneled plot
par(mfg = c(1,1)) #specify which subplot to use first
barplot(oct_500_total,
names.arg=1:length(oct_500_total), xlab = "octaves", ylab = "Count", col = "blue", border = "pink",
main = 'Community Size 500') #Add title
par(mfg = c(1,2)) #Second sub-plot
barplot(oct_1000_total, names.arg=1:length(oct_1000_total), xlab = "octaves", ylab = "Count", col = "green",
border = "pink", main = 'Community Size 1000')
par(mfg = c(2,1)) #Second sub-plot
barplot(oct_2500_total, names.arg=1:length(oct_2500_total), xlab = "octaves", ylab = "Count", col = "red",
border = "pink", main = 'Community Size 2500')
par(mfg = c(2,2)) #Second sub-plot
barplot(oct_5000_total, names.arg=1:length(oct_5000_total), xlab = "octaves", ylab = "Count", col = "yellow",
border = "pink", main = 'Community Size 5000')
combined_results <- list(oct_500_total, oct_1000_total, oct_2500_total, oct_5000_total) #create your list output here to return
return(combined_results)
}
# Question 21
question_21 <- function()  {
x <- list()
x[1] <- log(8)/log(3)
x[2] <- "To find fractal dimensions we divide the log(number of pieces we are dividing into) by the log(magnification factor)."
return(x)
}
# Question 22
question_22 <- function()  {
x <- list()
x[1] <- log(24)/log(3)
x[2] <- "To find this fractal dimension we divided the log(number of pieces = 8x3) by log(magnification factor)."
return(x)
}
# Question 23
chaos_game <- function()  {
# clear any existing graphs and plot your graph within the R window
graphics.off()
plot(1, type="n", xlab="", ylab="", xlim=c(0, 4), ylim=c(0, 4), cex=0.2)
A <- c(0,0)
B <- c(3,4)
C <- c(4,1)
ABC <- rbind(A=A, B=B, C=C)
X <- as.numeric(A)
points(X[1], X[2], cex = 0.2) #plot X
for (i in 1:10000) {
p <- as.numeric(ABC[sample(nrow(ABC), 1), ])
x <- ((x + p[1])/2)
y <- ((y + p[2])/2)
points(x, y, cex = 0.2) #plot X
}
}
# Question 24
turtle <- function(start_position, direction, length)  {
#start position plus lenght plus direction = new point
x0 <- start_position[1]
y0 <- start_position[2]
x1 <- length*cos(direction) + x0
y1 <- length*sin(direction) + y0
endpoint <- c(x1,y1)
#draw a line from position 1 to position 2
segments(x0, y0, x1 = x1, y1 = y1, col = 'blue')
return(endpoint) # you should return your endpoint here.
}
# Question 25
elbow <- function(start_position, direction, length)  {
first_line <- turtle(start_position, direction, length)
second_line <-turtle(start_position = first_line, direction = (pi/4), length = length*0.95)
}
# Question 26
spiral <- function(start_position, direction, length)  {
if (length > 0.05) {
first_line <- turtle(start_position, direction, length)
second_line <-spiral(start_position = first_line, direction = direction + (pi/4), length = length*0.95)
}
return("This function uses turtle to draw the first line, then calls itself to draw proceeding lines, with direction angle + new angle and decreasing line length.") #get return to work
}
# Question 27
draw_spiral <- function()  {
graphics.off()
plot(1, type="n", xlab="", ylab="", xlim=c(-2, 8), ylim=c(0, 8), cex=0.2)
spiral(start_position = c(1,1), direction = 0.5, length = 2)
}
# Question 28
tree <- function(start_position, direction, length)  {
if (length > 0.05) {
first_line <- turtle(start_position, direction, length)
second_line <-tree(start_position = first_line, direction = direction + (pi/4), length = length*0.65)
third_line <-tree(start_position = first_line, direction = direction - (pi/4), length = length*0.65)
}
}
draw_tree <- function()  {
graphics.off()
plot(1, type="n", xlab="", ylab="", xlim=c(-2, 8), ylim=c(0, 9), cex=0.2)
tree(start_position = c(1,1), direction = 1, length = 3)
}
# Question 29
fern <- function(start_position, direction, length)  {
if (length > 0.05) {
first_line <- turtle(start_position, direction, length)
second_line <-fern(start_position = first_line, direction = direction + (pi/4), length = length*0.38)
third_line <-fern(start_position = first_line, direction = direction, length = length*0.87)
}
}
draw_fern <- function()  {
# clear any existing graphs and plot your graph within the R window
graphics.off()
plot(1, type="n", xlab="", ylab="", xlim=c(0,10), ylim=c(0,14), cex=0.2)
fern(start_position = c(1,1), direction = 1, length = 2)
}
# Question 30
fern2 <- function(start_position, direction, length, dir)  {
if (length > 0.005) {
first_line <- turtle(start_position, direction, length)
second_line <-fern2(start_position = first_line, direction = direction + (pi/4) * dir, length = length*0.38, dir = dir)
third_line <-fern2(start_position = first_line, direction = direction, length = length*0.87, dir = dir * -1)
}
}
draw_fern2 <- function()  {
# clear any existing graphs and plot your graph within the R window
graphics.off()
plot(1, type="n", xlab="", ylab="", xlim=c(-3, 5), ylim=c(0, 16))
fern2(start_position = c(1,1), direction = 1.58, length = 2, dir = 1)
}
# Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.
# Challenge question A
Challenge_A <- function() {
# clear any existing graphs and plot your graph within the R window
}
# Challenge question B
Challenge_B <- function() {
# clear any existing graphs and plot your graph within the R window
}
# Challenge question C
Challenge_C <- function() {
# clear any existing graphs and plot your graph within the R window
}
# Challenge question D
Challenge_D <- function() {
# clear any existing graphs and plot your graph within the R window
return("type your written answer here")
}
# Challenge question E
Challenge_E <- function() {
# clear any existing graphs and plot your graph within the R window
graphics.off()
plot(1, type="n", xlab="", ylab="", xlim=c(0, 4), ylim=c(0, 4), cex=0.2) #open graph
A <- c(1,1) #assign point A
B <- c(3,1) #assign point B
C <- c(2,3) #assign point C
ABC <- rbind(A=A, B=B, C=C) #bind the point values into a matrix
X <- as.numeric(A) #assign the values of A to X
points(X[1], X[2], cex = 0.2) #plot X
x <- 0
y <- 0
for (i in 1:8000) { #loop 8000 times
p <- as.numeric(ABC[sample(nrow(ABC), 1), ]) #assign p a random row of ABC
x <- ((x + p[1])/2) #x coordinate becomes x + the first value of p divided by 2
y <- ((y + p[2])/2) #y coordinate becomes y + the second value of p divided by 2
points(x, y, cex = 0.2, col="red") #plot x and y in red
}
for (i in 1:2000) { #loop 2000 times
p <- as.numeric(ABC[sample(nrow(ABC), 1), ]) #assign p a random row of ABC
x <- ((x + p[1])/2) #x coordinate becomes x + the first value of p divided by 2
y <- ((y + p[2])/2) #y coordinate becomes y + the second value of p divided by 2
points(x, y, cex = 0.2, col = "blue") #plot x and y in blue
}
return("The fractcal triangle changes angle and position on the graph when the chaos game is run from a different starting point.")
}
Challenge_F <- function() {
another_turtle <- function(start_position, direction, length, col)  {
#start position plus lenght plus direction = new point
x0 <- start_position[1]
y0 <- start_position[2]
x1 <- length*cos(direction) + x0
y1 <- length*sin(direction) + y0
endpoint <- c(x1,y1)
#draw a line from position 1 to position 2
segments(x0, y0, x1 = x1, y1 = y1, col = col)
return(endpoint) # you should return your endpoint here.
}
fern_1 <- function(start_position, direction, length, dir)  {
if (length > 0.005) {
first_line <- another_turtle(start_position, direction, length, col = "olivedrab4")
second_line <-fern_1(start_position = first_line, direction = direction + (pi/2) * dir, length = length*0.38, dir = dir)
third_line <-fern_1(start_position = first_line, direction = direction, length = length*0.87, dir = dir * -1)
}
}
fern_2 <- function(start_position, direction, length, dir)  {
if (length > 0.005) {
first_line <- another_turtle(start_position, direction, length, col = "orange")
second_line <-fern_2(start_position = first_line, direction = direction + (pi/2) * dir, length = length*0.38, dir = dir)
third_line <-fern_2(start_position = first_line, direction = direction, length = length*0.87, dir = dir * -1)
}
}
fern_3 <- function(start_position, direction, length, dir)  {
if (length > 0.005) {
first_line <- another_turtle(start_position, direction, length, col = "orange3")
second_line <-fern_3(start_position = first_line, direction = direction + (pi/2) * dir, length = length*0.38, dir = dir)
third_line <-fern_3(start_position = first_line, direction = direction, length = length*0.87, dir = dir * -1)
}
}
fern_4 <- function(start_position, direction, length, dir)  {
if (length > 0.005) {
first_line <- another_turtle(start_position, direction, length, col = "saddlebrown")
second_line <-fern_4(start_position = first_line, direction = direction + (pi/2) * dir, length = length*0.38, dir = dir)
third_line <-fern_4(start_position = first_line, direction = direction, length = length*0.87, dir = dir * -1)
}
}
graphics.off()
par(mfcol=c(2,2))
par(cex=0.6)
par(mar = c(0,0,0,0))
plot(1, xaxt='n', yaxt='n', ann=FALSE, xlim=c(-6, 8), ylim=c(0, 25))
fern_1(start_position = c(1,1), direction = 1.58, length = 3, dir = 1)
par(mfg=c(1,2))
plot(1, xaxt='n', yaxt='n', ann=FALSE, xlim=c(-6, 8), ylim=c(0, 25))
fern_2(start_position = c(1,1), direction = 1.58, length = 3, dir = -1)
par(mfg=c(2,1))
plot(1, xaxt='n', yaxt='n', ann=FALSE, xlim=c(-6, 8), ylim=c(0, 25))
fern_3(start_position = c(1,1), direction = 1.58, length = 3, dir = 1)
par(mfg=c(2,2))
plot(1, xaxt='n', yaxt='n', ann=FALSE, xlim=c(-6, 8), ylim=c(0, 25))
fern_4(start_position = c(1,1), direction = 1.58, length = 3, dir = -1)
return("As the line size threshold is increased the image produced is less detailed and takes less time to generate. As the line size threshold is decreased the image takes longer to generate.")
}
# Challenge question G should be written in a separate file that has no dependencies on any functions here.
graphics.off()
y <- c() #initialising vectors
y2 <-c()
upper <- c()
lower <- c()
upper2 <- c()
lower2 <- c()
sim = 10 #simualtion size
duration = 200 #number of generations
speciation_rate <- 0.1
community_max <- init_community_max(100)
community_min <- init_community_min(100)
for(i in 1:sim){ #loop through simulations
richness <- neutral_time_series_speciation(community_max, speciation_rate, duration)
richness2 <- neutral_time_series_speciation(community_min, speciation_rate, duration)
y <- sum_vect(y, richness) #add vectors of richness
y2 <- sum_vect(y2, richness2)
}
View(y)
yav <- y/sim
y2av <- y2/sim
yav[1]
yav[[1]]
View(yav)
plot(yav)
plot(yav, col = 'black', ylim = c(15,35), pch = 8, type = 'l')
# clear any existing graphs and plot your graph within the R window
graphics.off()
plot(duration, yav, col = 'black', ylim = c(15,35), pch = 8, type = 'l')
length(yav)
col(yav)
y <- apply(yav, 1, function(x)length(unique(x)))
y
x <- 1:length(duration)
y <- apply(yav, 1, function(x)length(unique(x)))
plot(y~x, pch=20, col = "blue", type = "l", xlab = "Number of Generations",
ylab = "Species diversity (number of species)",
main = "Neutral Theory Simulation with Speciation (0.1)", ylim = c(0, 100))
length(y)
x <- 1:length(duration) + 1
y <- apply(yav, 1, function(x)length(unique(x)))
plot(y~x, pch=20, col = "blue", type = "l", xlab = "Number of Generations",
ylab = "Species diversity (number of species)",
main = "Neutral Theory Simulation with Speciation (0.1)", ylim = c(0, 100))
x
x <- 1:length((duration) + 1)
x
x <- 1:length(duration)
x
x <- 1:length(duration)
x
x <- 1:duration
x
x <- 1:(duration + 1)
x
length(x)
x <- 1:(duration + 1)
y <- apply(yav, 1, function(x)length(unique(x)))
plot(y~x, pch=20, col = "blue", type = "l", xlab = "Number of Generations",
ylab = "Species diversity (number of species)",
main = "Neutral Theory Simulation with Speciation (0.1)", ylim = c(0, 100))
x <- 1:(duration + 1)
y <- apply(y2av, 1, function(x)length(unique(x)))
plot(y~x, pch=20, col = "blue", type = "l", xlab = "Number of Generations",
ylab = "Species diversity (number of species)",
main = "Neutral Theory Simulation with Speciation (0.1)", ylim = c(0, 100))
# clear any existing graphs and plot your graph within the R window
graphics.off()
x <- 1:(duration + 1)
y <- apply(yav, 1, function(x)length(unique(x)))
plot(y~x, pch=20, col = "blue", type = "l", xlab = "Number of Generations",
ylab = "Species diversity (number of species)",
main = "Neutral Theory Simulation with Speciation (0.1)", ylim = c(0, 100))
x <- 1:(duration + 1)
y <- apply(y2av, 1, function(x)length(unique(x)))
lines(y~x, pch=20, col = "red")
legend('topright', pch = c(2,2), c('Initial maximum diversity', 'Initial minimum diversity'), col = c("blue", "red"))
}
error <- qnorm(.0243, lower.tail=FALSE) #calculate error
upper <- (yav + error)
lower <- (yav - error)
upper2 <- (y2av + error)
lower2 <- (y2av - error)
xpol <- c(seq(0, duration), seq(duration, 0))
ypol <- c(c(upper), rev(c(lower)))
polygon(xpol, ypol, col = 'grey75', border = FALSE)
ypol2 <- c(c(upper2), rev(c(lower2)))
polygon(xpol, ypol2,col ="grey75", border = FALSE)
# clear any existing graphs and plot your graph within the R window
graphics.off()
y <- c() #initialising vectors
y2 <-c()
upper <- c()
lower <- c()
upper2 <- c()
lower2 <- c()
sim = 10 #simualtion size
duration = 200 #number of generations
speciation_rate <- 0.1
community_max <- init_community_max(100)
community_min <- init_community_min(100)
for(i in 1:sim){ #loop through simulations
richness <- neutral_time_series_speciation(community_max, speciation_rate, duration)
richness2 <- neutral_time_series_speciation(community_min, speciation_rate, duration)
y <- sum_vect(y, richness) #add vectors of richness
y2 <- sum_vect(y2, richness2)
}
#averages from the simulations
yav <- y/sim
y2av <- y2/sim
#confidence intervals
error <- qnorm(.0243, lower.tail=FALSE) #calculate error
upper <- (yav + error)
upper
View(error)
View(upper)
xpol <- c(seq(0, duration), seq(duration, 0))
xpol
View(xpol)
x <- 1:(duration + 1)
y <- apply(yav, 1, function(x)length(unique(x)))
plot(y~x, pch=20, col = "blue", type = "l", xlab = "Number of Generations",
ylab = "Species diversity (number of species)",
main = "Neutral Theory Simulation with Speciation (0.1)", ylim = c(0, 100))
x <- 1:(duration + 1)
y <- apply(y2av, 1, function(x)length(unique(x)))
lines(y~x, pch=20, col = "red")
legend('topright', pch = c(2,2), c('Initial maximum diversity', 'Initial minimum diversity'), col = c("blue", "red"))
x <- 1:(duration + 1)
y <- apply(yav, 1, function(x)length(unique(x)))
plot(y~x, pch=20, col = "blue", type = "l", xlab = "Number of Generations",
ylab = "Species diversity (number of species)",
main = "Neutral Time Series Speciation, Average of 10 Simulations", ylim = c(0, 100))
x <- 1:(duration + 1)
y <- apply(y2av, 1, function(x)length(unique(x)))
lines(y~x, pch=20, col = "red")
legend('topright', pch = c(2,2), c('Initial maximum diversity', 'Initial minimum diversity'), col = c("blue", "red"))
x <- 1:(duration + 1)
y <- apply(yav, 1, function(x)length(unique(x)))
plot(y~x, pch=20, col = "blue", type = "l", xlab = "Number of Generations",
ylab = "Species diversity",
main = "Neutral Time Series Speciation, Average of 10 Simulations", ylim = c(0, 100))
x <- 1:(duration + 1)
y <- apply(y2av, 1, function(x)length(unique(x)))
lines(y~x, pch=20, col = "red")
legend('topright', pch = c(2,2), c('Initial maximum diversity', 'Initial minimum diversity'), col = c("blue", "red"))
lines(upper, col="blue",lty=2)
a <- apply(upper, 1, function(x)length(unique(x)))
a
error <- qnorm(.0243, lower.tail=FALSE) #calculate error
upper <- (yav + error)
upper <- apply(upper, 1, function(x)length(unique(x)))
lower <- (yav - error)
lower <- apply(lower, 1, function(x)length(unique(x)))
upper2 <- (y2av + error)
upper2 <- apply(upper2, 1, function(x)length(unique(x)))
lower2 <- (y2av - error)
lower2 <- apply(lower2, 1, function(x)length(unique(x)))
lines(upper, col="blue",lty=2)
lines(lower, col="blue",lty= 2)
lines(upper2, col="red",lty=2)
lines(lower2, col="red", lty = 2)
# clear any existing graphs and plot your graph within the R window
graphics.off()
x <- 1:(duration + 1)
y <- apply(yav, 1, function(x)length(unique(x)))
plot(y~x, pch=20, col = "blue", type = "l", xlab = "Number of Generations",
ylab = "Species diversity",
main = "Neutral Time Series Speciation, Average of 10 Simulations", ylim = c(0, 100))
x <- 1:(duration + 1)
y <- apply(y2av, 1, function(x)length(unique(x)))
lines(y~x, pch=20, col = "red")
legend('topright', pch = c(2,2), c('Initial maximum diversity', 'Initial minimum diversity'), col = c("blue", "red"))
lines(upper, col="green",lty=2)
lines(lower, col="green",lty= 2)
View(yav)
error <- qnorm(.0243, lower.tail=FALSE) #calculate error
upper <- (yav + error)
#  upper <- apply(upper, 1, function(x)length(unique(x)))
lower <- (yav - error)
#lower <- apply(lower, 1, function(x)length(unique(x)))
upper2 <- (y2av + error)
#upper2 <- apply(upper2, 1, function(x)length(unique(x)))
lower2 <- (y2av - error)
# clear any existing graphs and plot your graph within the R window
graphics.off()
plot(col="black", ylim = c(15, 35), pch = 8, type = 'l')
plot(duration, col="black", ylim = c(15, 35), pch = 8, type = 'l')
# clear any existing graphs and plot your graph within the R window
graphics.off()
plot(duration, col="black", ylim = c(15, 35), pch = 8, type = 'l')
plot(1, type="l", xlab="", ylab="", xlim=c(0, 100), ylim=c(0, 200), cex=0.2) #open graph
plot(1, type="l", xlab="", ylab="", xlim=c(0, 200), ylim=c(0, 100), cex=0.2) #open graph
xpol <- c(seq(0, duration), seq(duration, 0))
ypol <- c(c(upper), rev(c(lower)))
polygon(xpol, ypol, col = 'grey75', border = FALSE)
length(xpol)
length(ypol)
View(xpol)
View(ypol)
upper
seq(0, duration)
rev(c(lower))
ypol <- ypol/100
ypol
length(ypol)
length(yav)
size = 100
richnesses <- c(1, 1:10*10)
richnessvect <- c()
for (x in richnesses){
community <- init_community(size, x)
a <- functionforplot(community)
richnessvect <- cbind(richnessvect, a)
}
init_community <- function(size, richness){
a <- seq(richness)
community <- rep(a, size/richness)
return(community)
}
functionforplot <- function(community) {
graphics.off()
x <- c()
y <- c()
sim = 10
duration = 500
speciation_rate = 0.1
for (i in 1:sim) {
richness <- neutral_time_series_speciation(community, speciation_rate, duration)
y <- sum_vect(y, richness)
}
}
size = 100
richnesses <- c(1, 1:10*10)
richnessvect <- c()
for (x in richnesses){
community <- init_community(size, x)
a <- functionforplot(community)
richnessvect <- cbind(richnessvect, a)
}
plot(x = 1:nrow(richnessvect), y = richnessvect[,1],type = "l", col = "black", ylim = c(0,100))
title(main = "species richness through generations across multiple average communities", line = 0.5, cex=0.2)
for (i in 1:ncol(richnessvect)){
lines(x = 1:nrow(richnessvect), y = richnessvect[,i], col = i)
}
for (x in richnesses){
community <- init_community(size, x)
a <- functionforplot(community)
richnessvect <- cbind(richnessvect, a)
}
richnesses <- c(1, 1:10*10)
richnesses
View(richnesses)
for (x in richnesses){
community <- init_community(size, x)
a <- functionforplot(community)
richnessvect <- cbind(richnessvect, a)
}
