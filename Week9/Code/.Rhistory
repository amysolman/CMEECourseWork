# Question 17
cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
community <- init_community_min(size) #set initial community
j <- 1 #initialise value for j for appending to lists
i <- 1 #initialise value of i for counting number of generations
species_richness_list <- list() #create empty list for species_richness
species_octaves_list <- list() #create empty list for species_octaves
ptm <- proc.time()[3] #set start of timer
while (proc.time()[3] - ptm < wall_time*60){ #while the third element in proc.time minus starting time is less than wall_time
community <- neutral_generation_speciation(community, speciation_rate)#run the simulation
if (i <= burn_in_generations) { #if the number of loops is less/equal to the number of burn_generations
if (i %% interval_rich == 0) { #if generation number divided by interval_rich has no remainder
a <- species_richness(community) #save species richness of the current community to a
species_richness_list[[as.character(j)]] <- a #append a to species_richness_list
}
}
if (i %% interval_oct == 0) { #if generation number divided by interval_oct has no remainder
c <- species_abundance(community) #save species abundance of current community to a
d <- octaves(c) #calculate octaves
species_octaves_list[[as.character(j)]] <- d #append octaves to species_octave_list
}
j <- j + 1 #add 1 to j to update count of loops (generations)
i <- i + 1 #add 1 to i to update count of loops (generations)
}
#save to file
total_time <- proc.time()[3] - ptm
# species_richness_vector <- unlist(species_richness_list)
# species_octaves_vector <- unlist(species_octaves_list)
save(community, species_richness_vector, species_octaves_vector, total_time,
speciation_rate, size, interval_oct, interval_rich, burn_in_generations,
file = output_file_name)
}
cluster_run(speciation_rate = 0.1, size = 100, wall_time = 5, interval_rich = 1, interval_oct = 10, burn_in_generations = 200, output_file_name = "test_my_file_1.rda")
setwd("~/Documents/CMEECourseWork/Week9/Code")
# Question 17
cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
community <- init_community_min(size) #set initial community
j <- 1 #initialise value for j for appending to lists
i <- 1 #initialise value of i for counting number of generations
species_richness_list <- list() #create empty list for species_richness
species_octaves_list <- list() #create empty list for species_octaves
ptm <- proc.time()[3] #set start of timer
while (proc.time()[3] - ptm < wall_time*60){ #while the third element in proc.time minus starting time is less than wall_time
community <- neutral_generation_speciation(community, speciation_rate)#run the simulation
if (i <= burn_in_generations) { #if the number of loops is less/equal to the number of burn_generations
if (i %% interval_rich == 0) { #if generation number divided by interval_rich has no remainder
a <- species_richness(community) #save species richness of the current community to a
species_richness_list[[as.character(j)]] <- a #append a to species_richness_list
}
}
if (i %% interval_oct == 0) { #if generation number divided by interval_oct has no remainder
c <- species_abundance(community) #save species abundance of current community to a
d <- octaves(c) #calculate octaves
species_octaves_list[[as.character(j)]] <- d #append octaves to species_octave_list
}
j <- j + 1 #add 1 to j to update count of loops (generations)
i <- i + 1 #add 1 to i to update count of loops (generations)
}
#save to file
total_time <- proc.time()[3] - ptm
save(community, species_richness_list, species_octaves_list, total_time,
speciation_rate, size, interval_oct, interval_rich, burn_in_generations,
file = output_file_name)
}
cluster_run(speciation_rate = 0.1, size = 100, wall_time = 5, interval_rich = 1, interval_oct = 10, burn_in_generations = 200, output_file_name = "test_my_file_1.rda")
load("/Users/amysolman/Documents/CMEECourseWork/Week9/Code/test_my_file_1.rda")
rm(list=ls())
load("/Users/amysolman/Documents/CMEECourseWork/Week9/Code/test_my_file_1.rda")
View(species_richness_list)
View(species_octaves_list)
View(species_richness_list)
View(species_richness_list)
View(species_richness_list)
View(species_richness_list)
rm(list=ls())
graphics.off()
#Load all the functions you need by sourcing your main R fail
source("jrosinde_HPC_2019_main.R")
iter <- 86
if (iter <= 25) {
size = 500
} else {
if (iter <= 50)
size = 1000
} else {}
if (iter <= 75)
size = 2500
} else {
if (iter <= 100)
size = 5000
}
iter <- 1:100
for (i in iter) {
set.seed(iter)
if (iter <= 25) {
size = 500
} else {
if (iter <= 50)
size = 1000
} else {
if (iter <= 75)
size = 2500
} else {
if (iter <= 100)
size = 5000
}
paste0("sim",i,".csv")
}
for (i in iter) {
set.seed(iter)
if (iter <= 25) {
size = 500
} else {
if (iter <= 50)
size = 1000
} else {
if (iter <= 75)
size = 2500
} else {
if (iter <= 100)
size = 5000
}
print(paste0("sim",i,".csv"))
}
for (i in iter) {
set.seed(iter)
if (iter <= 25) {
size = 500
} else {
if (iter <= 50)
size = 1000
} else {
if (iter <= 75)
size = 2500
} else {
if (iter <= 100)
size = 5000
}
print(paste0("sim",i,".csv"))
}
for (i in iter)
set.seed(iter)
for (i in iter) {
x <- set.seed(iter)
if (iter <= 25) {
size = 500
} else {
if (iter <= 50)
size = 1000
} else {
if (iter <= 75)
size = 2500
} else {
if (iter <= 100)
size = 5000
}
print(size)
print(x)
#print(paste("sim",i,".csv"))
}
for (i in 1:100) {
x <- set.seed(iter)
if (iter <= 25) {
size = 500
} else {
if (iter <= 50)
size = 1000
} else {
if (iter <= 75)
size = 2500
} else {
if (iter <= 100)
size = 5000
}
print(size)
print(x)
#print(paste("sim",i,".csv"))
}
for (i in 1:100) {
x <- set.seed(iter)
if (iter <= 25) {
size = 500
} else {
if (iter <= 50)
size = 1000
} else {
if (iter <= 75)
size = 2500
} else {
if (iter <= 100)
size = 5000
}
}
# written by james rosindell james@rosindell.org Imperial college london released open source under an MIT license
# Assign random speciation rates to class
CMEE_2019 <- c(
"vlb19",
"jb1919",
"ead19",
"rte19",
"hg816",
"leg19",
"ph419",
"lh1019",
"ojs19",
"abs119",
"ys219",
"hw2419",
"yy5819",
"xz4419",
"wz2812",
"yz2919",
"ha819",
"db319",
"mlc19",
"rbk119",
"pl1619",
"xl15918",
"sl6719",
"imm19",
"ams119",
"sat19",
"yz12119"
)
choose_student <- function(class) {
print(sample(class,1))
}
choose_student_2 <- function(class,seedin = 1) {
set.seed(seedin)
print(sample(class,1))
}
choose_student_3 <- function(class,seedin=-1) {
if (seedin <= 0){
set.seed(floor(proc.time()[3]*1000))
}
else {
set.seed(seedin)
}
print(sample(class,1))
}
assign_student_number <- function(class=CMEE_2019,seedin=2019,min=0.002,max=0.007,sigfig=4,unique=TRUE) {
if (seedin <= 0){
set.seed(floor(proc.time()[3]*1000))
}
else {
set.seed(seedin)
}
speciation_values <- signif(runif(length(class))*(max-min)+min,sigfig)
if (unique){
while(length(unique(speciation_values)) < length(class)){
speciation_values <- signif(runif(length(class))*(max-min)+min,sigfig)
}
}
return(cbind(speciation_values,class))
}
print(assign_student_number())
iter <- 1:100
for (i in inter) {
set.seed(i)
if (iter <= 25) {
size = 500
} else {
if (iter <= 50)
size = 1000
} else {
if (iter <= 75)
size = 2500
} else {
if (iter <= 100)
size = 5000
}
output_fil_name = paste0("simulation_", i, ".rda")
cluster_run(speciation_rate = 0.005043, size = size, wall_time = 5, interval_rich = 1, interval_oct = size/10,
burn_in_generations = 8*size, output_file_name = output_file_name)
#wall_time = 690 minutes
}
iter <- 1:100
i = inter
set.seed(i)
if (iter <= 25) {
size = 500
} else {
if (iter <= 50)
size = 1000
} else {
if (iter <= 75)
size = 2500
} else {
if (iter <= 100)
size = 5000
}
output_fil_name = paste0("simulation_", i, ".rda")
cluster_run(speciation_rate = 0.005043, size = size, wall_time = 5, interval_rich = 1, interval_oct = size/10,
burn_in_generations = 8*size, output_file_name = output_file_name)
rm(list=ls())
graphics.off()
#Load all the functions you need by sourcing your main R fail
source("jrosinde_HPC_2019_main.R")
iter <- 1:100
i = inter
set.seed(i)
if (iter <= 25) {
size = 500
} else {
if (iter <= 50)
size = 1000
} else {
if (iter <= 75)
size = 2500
} else {
if (iter <= 100)
size = 5000
}
output_file_name = paste0("simulation_", i, ".rda")
cluster_run(speciation_rate = 0.005043, size = size, wall_time = 3, interval_rich = 1, interval_oct = size/10,
burn_in_generations = 8*size, output_file_name = output_file_name)
rm(list=ls())
graphics.off()
#Load all the functions you need by sourcing your main R fail
source("jrosinde_HPC_2019_main.R")
#Read in the job number from the cluster. To do this your code should include a new variable iter
#and should start with the line:
#iter <- as.numeric(Sys.getenv("PBS_ARRAY_INDEX")) will not work on local machine, instead set iter for yourself
iter <- 1:100
i = inter
set.seed(i)
if (iter <= 25) {
size = 500
} else {
if (iter <= 50)
size = 1000
} else {
if (iter <= 75)
size = 2500
} else {
if (iter <= 100)
size = 5000
}
output_file_name = paste("simulation_", i, ".rda")
cluster_run(speciation_rate = 0.005043, size = size, wall_time = 3, interval_rich = 1, interval_oct = size/10,
burn_in_generations = 8*size, output_file_name = output_file_name)
65 %% 4
64 %% 4
66 %% 4
67 %% 4
68 %% 4
sizevect <- c(500, 1000, 2500, 5000)
iter = 24
sizevect[(iter %% 4) + 1]
iter = 5932
sizevect[(iter %% 4) + 1]
iter = 5939
sizevect[(iter %% 4) + 1]
rm(list=ls())
graphics.off()
#Load all the functions you need by sourcing your main R fail
source("jrosinde_HPC_2019_main.R")
#Read in the job number from the cluster. To do this your code should include a new variable iter
#and should start with the line:
#iter <- as.numeric(Sys.getenv("PBS_ARRAY_INDEX")) will not work on local machine, instead set iter for yourself
iter <- 1:100
i = iter
set.seed(i)
# if (iter <= 25) {
#   size = 500
# } else {
#   if (iter <= 50)
#     size = 1000
# } else {
#   if (iter <= 75)
#     size = 2500
# } else {
#   if (iter <= 100)
#     size = 5000
# }
sizevect <- c(500, 1000, 2500, 5000)
size = sizevect[(iter %% 4) + 1]
output_file_name = paste0("simulation_",i,".rda")
cluster_run(speciation_rate = 0.005043, size = size, wall_time = 3, interval_rich = 1, interval_oct = size/10,
burn_in_generations = 8*size, output_file_name = output_file_name)
rm(list=ls())
graphics.off()
#Load all the functions you need by sourcing your main R fail
source("jrosinde_HPC_2019_main.R")
iter <- 1:100
i = iter
set.seed(i)
sizevect <- c(500, 1000, 2500, 5000)
size = sizevect[(iter %% 4) + 1]
output_file_name = paste0("simulation_",i,".rda")
cluster_run(speciation_rate = 0.005043, size = size, wall_time = 3, interval_rich = 1, interval_oct = size/10,
burn_in_generations = 8*size, output_file_name = output_file_name)
cluster_run(speciation_rate = 0.005043, size = size, wall_time = 3, interval_rich = 1, interval_oct = size/10,
burn_in_generations = 8 * size, output_file_name = output_file_name)
iter = 67
sizevect <- c(500, 1000, 2500, 5000)
size = sizevect[(iter %% 4) + 1]
size
class(size)
iter <- 1:100
i = iter
set.seed(i)
if (iter <= 25) {
size = 500
} else {
if (iter <= 50)
size = 1000
} else {
if (iter <= 75)
size = 2500
} else {
if (iter <= 100)
size = 5000
}
# sizevect <- c(500, 1000, 2500, 5000)
# size = sizevect[(iter %% 4) + 1]
output_file_name = paste0("simulation_",i,".rda")
cluster_run(speciation_rate = 0.005043, size = size, wall_time = 3, interval_rich = 1, interval_oct = size/10,
burn_in_generations = 8*size, output_file_name = output_file_name)
iter <- 78
i = iter
set.seed(i)
if (iter <= 25) {
size = 500
} else {
if (iter <= 50)
size = 1000
} else {
if (iter <= 75)
size = 2500
} else {
if (iter <= 100)
size = 5000
}
# sizevect <- c(500, 1000, 2500, 5000)
# size = sizevect[(iter %% 4) + 1]
output_file_name = paste0("simulation_",i,".rda")
cluster_run(speciation_rate = 0.005043, size = size, wall_time = 3, interval_rich = 1, interval_oct = size/10,
burn_in_generations = 8*size, output_file_name = output_file_name)
load("/Users/amysolman/Documents/CMEECourseWork/Week9/Code/simulation_78.rda")
rm(list=ls())
graphics.off()
#Load all the functions you need by sourcing your main R fail
source("asolman_HPC_2019_main.R")
iter <- 20
i = iter
set.seed(i)
if (iter <= 25) {
size = 500
} else {
if (iter <= 50)
size = 1000
} else {
if (iter <= 75)
size = 2500
} else {
if (iter <= 100)
size = 5000
}
# sizevect <- c(500, 1000, 2500, 5000)
# size = sizevect[(iter %% 4) + 1]
output_file_name = paste0("simulation_",i,".rda")
cluster_run(speciation_rate = 0.005043, size = size, wall_time = 3, interval_rich = 1, interval_oct = size/10,
burn_in_generations = 8*size, output_file_name = output_file_name)
iter <- 97
i = iter
set.seed(i)
if (iter <= 25) {
size = 500
} else {
if (iter <= 50)
size = 1000
} else {
if (iter <= 75)
size = 2500
} else {
if (iter <= 100)
size = 5000
}
# sizevect <- c(500, 1000, 2500, 5000)
# size = sizevect[(iter %% 4) + 1]
output_file_name = paste0("simulation_",i,".rda")
cluster_run(speciation_rate = 0.005043, size = size, wall_time = 3, interval_rich = 1, interval_oct = size/10,
burn_in_generations = 8*size, output_file_name = output_file_name)
output_files <- list.files(path = "../results/", pattern="simulation_*.rda", full.names = TRUE)
output_files
output_files <- list.files(pattern="*.rda", full.names = TRUE)
output_files <- list.files(pattern="_*.rda", full.names = TRUE)
View(output_files)
output_files <- list.files(pattern="n_*.rda", full.names = TRUE)
output_files <- list.files(pattern="*.rda", full.names = TRUE)
datalist = lapply(output_files, function(x)read.table(x, header=T))
View(datalist)
datalist[1]
combined_results = lapply(output_files, function(x)read.table(x, header=T))
#combined_results <- list() #create your list output here to return
return(combined_results)
process_cluster_results <- function()  {
# clear any existing graphs and plot your graph within the R window
rm(list=ls())
graphics.off()
output_files <- list.files(pattern="*.rda", full.names = TRUE)
combined_results = lapply(output_files, function(x)read.table(x, header=T))
#combined_results <- list() #create your list output here to return
return(combined_results)
}
process_cluster_results()
View(datalist)
rm(list=ls())
graphics.off()
output_files <- list.files(pattern="***********.rda", full.names = TRUE)
output_files <- load.files(pattern="*.rda", full.names = TRUE)
