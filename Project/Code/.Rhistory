migration_rates <- migration_rates*0.001
names(my_mean_sp_rich) <- c(migration_rates)
return(my_mean_sp_rich)
}
means <- mean_species_richness(total_species_richness = sp)
View(means)
my_results <- list()
for (i in 1:100) {
load(paste0(file="simulation_", i, ".rda"))
my_results[[i]] <- all_communities
}
View(all_communities)
View(all_communities)
View(all_communities[[25]])
rm(list=ls())
graphics.off()
my_results <- list()
for (i in 1:100) {
load(paste0(file="simulation_", i, ".rda"))
my_results[[i]] <- all_communities
}
my_island_dataframes <- function(num_dfs) {
list_of_dfs <- list()
for (d in 1:num_dfs) {
df = data.frame()
list_of_dfs[[d]] <- df
}
return(list_of_dfs)
}
my_islands <- function(my_results) {
y <- my_island_dataframes(length(my_results[[1]]))#call the previous function to create a dataframe
#for each island
for (l in 1:length(y)) { #we'll create 100 spaces in the dataframe for our 100 sims
y[[l]] <- my_island_dataframes(length(my_results))
}
for (i in 1:length(my_results)) { #for each simulation
x <- my_results[[i]]
for (j in 1:length(x)) {
y[[j]][[i]] <- x[[j]] #store the community of each island in the relevant dataframe
}
}
migration_rates <- seq(1:25)
migration_rates <- migration_rates*0.001
names(y) <- c(migration_rates)
return(y)
}
y <- my_islands(my_results = my_results)
View(y)
how_rich_am_I <- function(outcomes) {
total_species_richness <- list()
for (i in 1:length(outcomes)) {
islands <- outcomes[[i]]
species_richness <- list()
for (j in 1:length(islands)) {
z <- islands[[j]]
x <- length(unique(as.vector(islands[[j]])))
species_richness[[j]] <- x
}
total_species_richness[[i]] <- species_richness
}
migration_rates <- seq(1:25)
migration_rates <- migration_rates*0.001
names(total_species_richness) <- c(migration_rates)
return(total_species_richness)
}
sp <- how_rich_am_I(outcomes = y)
View(sp)
mean_species_richness <- function(total_species_richness) {
my_mean_sp_rich <- list()
for (a in 1:length(total_species_richness)) {
x <- total_species_richness[[a]]
y <- sum(unlist(x))/length(x)
my_mean_sp_rich[[a]] <- y
}
migration_rates <- seq(1:25)
migration_rates <- migration_rates*0.001
names(my_mean_sp_rich) <- c(migration_rates)
return(my_mean_sp_rich)
}
means <- mean_species_richness(total_species_richness = sp)
View(means)
library("ggplot2")
final_sp_rich <- as.vector(sp)
View(final_sp_rich)
final_sp_rich <- as.vector(means)
View(final_sp_rich)
final_sp_rich <- unlist(means)
migration_rates <- seq(1:25)
migration_rates <- migration_rates*0.001
data <- data.frame("Migration Rates" = migration_rates, "Species Richness" = final_sp_rich)
View(data)
data <- data.frame("Migration_Rates" = migration_rates, "Species_Richness" = final_sp_rich)
p <- ggplot(data, aes(x = Migration_Rates, y=Species_Richness))
p
p <- ggplot(data, aes(x = Migration_Rates, y=Species_Richness)) +
geom_point()
p
p <- ggplot(data, aes(x = Migration_Rates, y=Species_Richness)) +
geom_point() +
geom_smooth()
p
p <- ggplot(data, aes(x = log(Migration_Rates), y=Species_Richness)) +
geom_point() +
geom_smooth()
p
View(all_communities)
export_me <- function() {
write.csv(data, "../Results/mean_sim_one.csv")
}
export_me()
#Find import the results of the simulation
#simulation_data <- read.csv("../Results/simulation_results.csv")
simulation_data <- read.csv("../Results/mean_sim_one.csv")
###Script to compare the species richness generated by my simulation
#to those predicted by Ryan Chisholm's model
rm(list=ls())
graphics.off()
#Find import the results of the simulation
#simulation_data <- read.csv("../Results/simulation_results.csv")
simulation_data <- read.csv("../Results/mean_sim_one.csv")
View(simulation_data)
chisholm_model <- function(area, theta, m0, K) {
rho = 1
K = K
Js = area*rho
J_stars = Js/K
ms = m0/sqrt(area)
gamma_stars = J_stars*ms/(1-ms)
return(theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K)))
}
#create empty list for storing estimated species richness
estimated_sp_rich <- vector()
for (i in 1:nrow(simulation_data)) {
m0 = simulation_data$migration_rate[[i]]
area = m0*10000
nu = 0.01
theta = 2*area*nu
K = simulation_data$niches[[i]]
estimated_sp_rich[[i]] <- chisholm_model(area, theta, m0, K)
}
View(simulation_data)
i = 1
m0 = simulation_data$Migration_Rate[[i]]
area = m0*10000
nu = 0.01
theta = 2*area*nu
K = simulation_data$niches[[i]]
K = i
estimated_sp_rich[[i]] <- chisholm_model(area, theta, m0, K)
#create empty list for storing estimated species richness
estimated_sp_rich <- vector()
for (i in 1:nrow(simulation_data)) {
m0 = simulation_data$Migration_Rate[[i]]
area = m0*10000
nu = 0.01
theta = 2*area*nu
K = i
estimated_sp_rich[[i]] <- chisholm_model(area, theta, m0, K)
}
#bind results to single dataframe
simulation_data_and_estimation <- cbind.data.frame(simulation_data, estimated_sp_rich)
p = ggplot() +
geom_point(data = simulation_data_and_estimation, aes(x = migration_rate, y = species_rich), color = "blue") +
geom_point(data = simulation_data_and_estimation, aes(x = migration_rate, y = estimated_sp_rich), color = "red") +
xlab('Migration Rate') +
ylab('Species Richness')
print(p)
View(simulation_data_and_estimation)
p = ggplot() +
geom_point(data = simulation_data_and_estimation, aes(x = Migration_Rate, y = Species_Rich), color = "blue") +
geom_point(data = simulation_data_and_estimation, aes(x = Migration_Rate, y = estimated_sp_rich), color = "red") +
xlab('Migration Rate') +
ylab('Species Richness')
print(p)
View(simulation_data_and_estimation)
p = ggplot() +
geom_point(data = simulation_data_and_estimation, aes(x = Migration_Rates, y = Species_Rich), color = "blue") +
geom_point(data = simulation_data_and_estimation, aes(x = Migration_Rates, y = estimated_sp_rich), color = "red") +
xlab('Migration Rate') +
ylab('Species Richness')
print(p)
p = ggplot() +
geom_point(data = simulation_data_and_estimation, aes(x = Migration_Rates, y = Species_Richness), color = "blue") +
geom_point(data = simulation_data_and_estimation, aes(x = Migration_Rates, y = estimated_sp_rich), color = "red") +
xlab('Migration Rate') +
ylab('Species Richness')
print(p)
rm(list=ls())
graphics.off()
source("neutral_island_simulation.R")
iter <- 29
i = iter
set.seed(i)
#output_file_name = paste0("simulation_two", i, ".rda")
outout_file_name = paste0("simulation_test.rda")
set.seed(i)
cluster_run_function(0.02, wall_time = 10, output_file_name = output_file_name)
rm(list=ls())
graphics.off()
source("neutral_island_simulation.R")
#Read in the job number from the cluster. To do this your code should include a new variable iter
#and should start with the line:
#iter <- as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))  #this will not work on a local machine
#so to run locally we set the value of iter for ourselves
iter <- 29
i = iter
set.seed(i)
#output_file_name = paste0("simulation_two", i, ".rda")
outout_file_name = paste0("simulation_test", i, ".rda")
cluster_run_function(0.02, wall_time = 10, output_file_name = output_file_name)
rm(list=ls())
graphics.off()
source("neutral_island_simulation.R")
iter <- 29
i = iter
set.seed(i)
output_file_name = paste0("simulation_test", i, ".rda")
cluster_run_function(0.02, wall_time = 2, output_file_name = output_file_name)
cluster_run_function(0.02, wall_time = 20, output_file_name = output_file_name)
View(all_communities)
View(all_communities[[20]])
View(all_communities[[19]])
m <- 0.0001
m <- m*10
m
m <- m*10
m
m <- m*3
m
m <- 0.0001
m <- m*3
m
rm(list=ls())
graphics.off()
source("neutral_island_simulation.R")
iter <- 29
i = iter
set.seed(i)
output_file_name = paste0("simulation_test", i, ".rda")
cluster_run_function(0.02, wall_time = 60, output_file_name = output_file_name)
m = 0.0001
m*5
m = 0.001
m*5
m*5
m <- m*5
m
m <- m*5
m <- m*5
m
m = 0.001
x <- (m*5)*10
x
m = 0.001
m <- m*5
m <- m*5
m <- m*5
m <- m*5
m <- m*5
m = 0.001
m <- m*2
m <- m*2
m <- m*2
m <- m*2
m <- m*2
m <- m*2
m <- m*2
m <- m*2
m <- m*2
m = 0.001
m <- m*1.5
m <- m*1.5
m <- m*1.5
m <- m*1.5
m <- m*1.5
m <- m*1.5
m <- m*1.5
m <- m*1.5
m <- m*1.5
m <- m*1.5
m = 0.001
m <- m + 0.003
m <- m + 0.003
m <- m + 0.003
m <- m + 0.003
m <- m + 0.003
m <- m + 0.003
m <- m + 0.003
m <- m + 0.003
m <- m + 0.003
m <- m + 0.003
m = 0.001
m = 0
m <- m + 0.005
m <- m + 0.005
m <- m + 0.005
m <- m + 0.005
m <- m + 0.005
m <- m + 0.005
m <- m + 0.005
m <- m + 0.005
m <- m + 0.005
m <- m + 0.005
rm(list=ls())
graphics.off()
source("neutral_island_simulation.R")
iter <- 29
i = iter
set.seed(i)
output_file_name = paste0("simulation_test", i, ".rda")
cluster_run_function(0.02, wall_time = 30, output_file_name = output_file_name)
load("/Users/amysolman/Documents/CMEECourseWork/Project/Code/simulation_test29.rda")
View(all_communities)
View(all_communities[[10]])
View(all_communities[[9]])
View(all_communities[[8]])
View(all_communities)
View(all_communities[[1]])
0.0001*10
x <- 0.0001*10
x <- x**10
x
x <- x*10
x
0.0001
0.001
View(all_communities)
rm(list=ls())
graphics.off()
source("neutral_island_simulation.R")
iter <- 29
i = iter
set.seed(i)
output_file_name = paste0("simulation_test", i, ".rda")
cluster_run_function(0.02, wall_time = 15, output_file_name = output_file_name)
load("/Users/amysolman/Documents/CMEECourseWork/Project/Code/simulation_test29.rda")
View(all_communities)
View(all_communities[[1]])
do_migration
do_migration = rbinom(100, 1, 0.005)
do_migration
do_migration = rbinom(100, 1, 0.05)
do_migration
rm(list=ls())
graphics.off()
source("neutral_island_simulation.R")
iter <- 29
i = iter
set.seed(i)
output_file_name = paste0("simulation_test", i, ".rda")
cluster_run_function(0.02, wall_time = 10, output_file_name = output_file_name)
load("/Users/amysolman/Documents/CMEECourseWork/Project/Code/simulation_test29.rda")
View(all_communities)
View(all_communities)
View(all_communities[[100]])
View(all_communities[[10]])
View(all_communities[[9]])
View(all_communities[[1]])
View(all_communities[[2]])
View(all_communities[[3]])
View(all_communities)
View(all_communities)
rm(list=ls())
graphics.off()
library("ggplot2")
my_results <- list()
for (i in 1:100) {
load(paste0(file="simulation_", i, ".rda"))
my_results[[i]] <- all_communities
}
View(all_communities)
View(my_results)
my_island_dataframes <- function(num_dfs) {
list_of_dfs <- list()
for (d in 1:num_dfs) {
df = data.frame()
list_of_dfs[[d]] <- df
}
return(list_of_dfs)
}
my_islands <- function(my_results) {
y <- my_island_dataframes(length(my_results[[1]]))#call the previous function to create a dataframe
#for each island
for (l in 1:length(y)) { #we'll create 100 spaces in the dataframe for our 100 sims
y[[l]] <- my_island_dataframes(length(my_results))
}
for (i in 1:length(my_results)) { #for each simulation
x <- my_results[[i]]
for (j in 1:length(x)) {
y[[j]][[i]] <- x[[j]] #store the community of each island in the relevant dataframe
}
}
migration_rates <- seq(1:25)
migration_rates <- migration_rates*0.001
names(y) <- c(migration_rates)
return(y)
}
y <- my_islands(my_results = my_results)
my_islands <- function(my_results) {
y <- my_island_dataframes(length(my_results[[1]]))#call the previous function to create a dataframe
#for each island
for (l in 1:length(y)) { #we'll create 100 spaces in the dataframe for our 100 sims
y[[l]] <- my_island_dataframes(length(my_results))
}
for (i in 1:length(my_results)) { #for each simulation
x <- my_results[[i]]
for (j in 1:length(x)) {
y[[j]][[i]] <- x[[j]] #store the community of each island in the relevant dataframe
}
}
migration_rates <- seq(1:10)
migration_rates <- migration_rates*0.01
names(y) <- c(migration_rates)
return(y)
}
y <- my_islands(my_results = my_results)
how_rich_am_I <- function(outcomes) {
total_species_richness <- list()
for (i in 1:length(outcomes)) {
islands <- outcomes[[i]]
species_richness <- list()
for (j in 1:length(islands)) {
z <- islands[[j]]
x <- length(unique(as.vector(islands[[j]])))
species_richness[[j]] <- x
}
total_species_richness[[i]] <- species_richness
}
migration_rates <- seq(1:25)
migration_rates <- migration_rates*0.001
names(total_species_richness) <- c(migration_rates)
return(total_species_richness)
}
total_species_richness <- how_rich_am_I(outcomes = y)
how_rich_am_I <- function(outcomes) {
total_species_richness <- list()
for (i in 1:length(outcomes)) {
islands <- outcomes[[i]]
species_richness <- list()
for (j in 1:length(islands)) {
z <- islands[[j]]
x <- length(unique(as.vector(islands[[j]])))
species_richness[[j]] <- x
}
total_species_richness[[i]] <- species_richness
}
migration_rates <- seq(1:10)
migration_rates <- migration_rates*0.01
names(total_species_richness) <- c(migration_rates)
return(total_species_richness)
}
total_species_richness <- how_rich_am_I(outcomes = y)
View(total_species_richness)
mean_species_richness <- function(total_species_richness) {
my_mean_sp_rich <- list()
for (a in 1:length(total_species_richness)) {
x <- total_species_richness[[a]]
y <- sum(unlist(x))/length(x)
my_mean_sp_rich[[a]] <- y
}
migration_rates <- seq(1:25)
migration_rates <- migration_rates*0.001
names(my_mean_sp_rich) <- c(migration_rates)
return(my_mean_sp_rich)
}
mean_species_richness <- function(total_species_richness) {
my_mean_sp_rich <- list()
for (a in 1:length(total_species_richness)) {
x <- total_species_richness[[a]]
y <- sum(unlist(x))/length(x)
my_mean_sp_rich[[a]] <- y
}
migration_rates <- seq(1:10)
migration_rates <- migration_rates*0.01
names(my_mean_sp_rich) <- c(migration_rates)
return(my_mean_sp_rich)
}
my_mean_sp_rich <- mean_species_richness(total_species_richness = total_species_richness)
View(my_mean_sp_rich)
results_dataframe <- function() {
final_sp_rich <- unlist(means)
migration_rates <- seq(1:10)
migration_rates <- migration_rates*0.01
data <- data.frame("Migration_Rates" = migration_rates, "Species_Richness" = final_sp_rich)
}
results_dataframe()
results_dataframe <- function() {
final_sp_rich <- unlist(my_mean_sp_rich)
migration_rates <- seq(1:10)
migration_rates <- migration_rates*0.01
data <- data.frame("Migration_Rates" = migration_rates, "Species_Richness" = final_sp_rich)
}
results_dataframe()
results_dataframe <- function() {
final_sp_rich <- unlist(my_mean_sp_rich)
migration_rates <- seq(1:10)
migration_rates <- migration_rates*0.01
data <- data.frame("Migration_Rates" = migration_rates, "Species_Richness" = final_sp_rich)
return(data)
}
data <- results_dataframe()
View(data)
p <- ggplot(data, aes(x = Migration_Rates, y=Species_Richness)) +
geom_point() +
geom_smooth()
p
q <- ggplot(data, aes(x = log(Migration_Rates), y=Species_Richness)) +
geom_point() +
geom_smooth()
q
View(my_mean_sp_rich)
View(data)
