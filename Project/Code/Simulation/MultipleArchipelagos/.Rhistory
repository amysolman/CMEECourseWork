tot = 0
for (j in 1:length(island)) {
sp <- unique(island[[j]]$Niche) #number of unique species in each niche
tot <- sum(tot, sp)
}
return(tot)
}
arch_sp <- function(archipelago){
total_sp <- vector()
for (i in 1:length(archipelago)){
island <- archipelago[[i]] #isolate one island
total_sp[i] <- island_sp(island) #get the island species
}
return(total_sp)
}
get_my_areas <- function(archipelago){
area <- vector()
arch_info <- get_my_arch_data(archipelago)
for (island in 1:length(archipelago)){
my_island <- archipelago[[island]]
niches <- arch_info[[1]]
niche_size <- length(my_island[[1]]$Niche)
area[[island]] <- niches*niche_size
}
return(area)
}
###################################################
#################FUNCTION TEN###################
###################################################
final_function <- function(Data) {
#get the m rates and k nums from the simultion
my_rates <- get_my_rates(Data = Data)
m_rates <- my_rates[[1]]
k_num <- my_rates[[2]]
#subset data by m rate
t <- list()
for (j in 1:length(m_rates)) {
t[[j]] <- subset_by_m_rate(m_rates[j], Data = Data)
}
#subset data by k num
archipelagos <- list()
for (b in 1:length(t)){
archipelagos[[b]] <- subset_multi_k_num(my_data = t[[b]], k_num = k_num)
}
#start archepelago counter
arch_num <- 1
#create empty dataframe
final_data <- data.frame(arch_num=numeric(0), niches=numeric(0), immigration=numeric(0),
area=numeric(0), species=numeric(0))
for (c in 1:length(archipelagos)) {
for (d in 1:length(archipelagos[[c]])){
#gives data of one archipelago
arch_1 <- archipelagos[[c]][[d]] #isolated one archipelago
#get the archepelago parameters
arch_info <- get_my_arch_data(my_archipelago = arch_1)
#get the archepelago species richness and island areas
species <- arch_sp(archipelago = arch_1)
area <- get_my_areas(archipelago = arch_1)
#bind into dataframe
new <- data.frame(arch_num, arch_info[[1]], arch_info[[2]], area, species)
names(new) <- c("arch_num", "niches", "immigration", "area", "species")
final_data <- rbind(final_data, new)
arch_num = arch_num + 1
}
}
return(final_data)
}
####SCRIPT TO IMPORT THE DATA AND SUBSET THE ARCHIPELAGOS####
##################FOR EACH SIMULATION #######################
##########THEN FIND THE MEANS OF EACH ARCHIPELAGO############
#############THEN EXPORT CSV WITH FINAL MEAN DATA############
get_all_my_dataframes <- function(){
#Import the data
MySimulations <- ImportMyData()
#divide islands into archipelagos for each simulation
all_my_dataframes <- list()
for (s in 1:length(MySimulations)) {
Data <- MySimulations[[s]] #isolate a simulation
Data <- lapply(Data, `[[`, 1) #keep only the niche data, not the timeseries data
all_my_dataframes[[s]] <- final_function(Data = Data)
}
return(all_my_dataframes)
}
###################################################
#################FUNCTION TWELVE######################
###################################################
get_my_final_means <- function(all_my_dataframes, arch_num){
df <- all_my_dataframes[[1]] #isolate the first simulation
arch <- df[df$arch_num == arch_num, ] #isolate the archipelago with that number
for (d in 2:length(all_my_dataframes)){
df2 <- all_my_dataframes[[d]] #get the next simulation
arch2 <- df2[df2$arch_num == arch_num, ] #get the same arch in that sim
sp2 <- arch2$species #get the species richness
arch$species_2 <- sp2 #add it to the dataframe
names(arch)[length(names(arch))]<- d #rename the column
}
#seperate out just the species data
n <- ncol(arch) - 6
arch_min <- arch[,(ncol(arch)-n-1):ncol(arch)]
#get the row means of the species data
my_row_means <- rowMeans(arch_min)
arch1 <- arch[, 1:4]
arch1$species <- my_row_means
return(arch1)
}
every_arch <- function(all_my_dataframes){
arch_list <- list()
for (arch_num in 1:length(all_my_dataframes)){
arch_list[[arch_num]] <- get_my_final_means(all_my_dataframes = all_my_dataframes, arch_num = arch_num)
}
return(arch_list)
}
#####################################################################################
#################FINAL SCRIPT TO GET THE ARCH MEAN DATA AND SAVE######################
#####################################################################################
all_my_dataframes <- get_all_my_dataframes() #get the dataframes for each simulationtun
#get the mean results for each archipelago across simulations
arch_list <- every_arch(all_my_dataframes = all_my_dataframes)
total_arch_list <- do.call("rbind", arch_list)
#export as csv file
write.csv(total_arch_list, "../../../Results/total_sim_results.csv", row.names = FALSE)
rm(list=ls())
graphics.off()
data <- read.csv("../../../Results/total_sim_results.csv")
#define the model function
chisholm_model <- function(area, theta, m0, K) {
rho = 1
K = K
Js = area*rho
J_stars = Js/K
ms = m0*sqrt(area) #changed this from m0/sqrt(area) to m0*sqrt(area)???
gamma_stars = J_stars*ms/(1-ms)
return(theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K)))
}
model_species <- vector()
for (i in 1:nrow(data)) { #for each row of the dataframe
island <- data[i, ]
m = island$immigration
area = island$area
J = area
m0 = m/sqrt(area)
nu = 0.01
J_meta = 10000000 #size of metacommunity that supplied island immigrants
K = island$niches
#theta = 2*(niche_size*K)*nu #2*the metacommunity size immigrating to the island*nu
theta = nu*(J_meta-1)/(1-nu) #should I use J_meta or the niche size?
model_species[[i]] <- round(chisholm_model(area, theta, m0, K), digits = 2)
}
Data <- cbind.data.frame(data, theta, model_species) #bind theta and model species in with the dataframe
View(Data)
Data <- Data[c(1,6,2,3,4,5,7)] #rearrange columns
Data$difference <- (Data$species - Data$model_species)
View(Data)
write.csv(Data, "../../../Results/Simulation2/SimAnalyticData.csv")
write.csv(Data, "../../../Results/Simulation2/MultiSimAnalyticData.csv")
rm(list=ls())
graphics.off()
#install nlls fitting package
#install.packages("minpack.lm") <- if you've never installed minpack before
library("minpack.lm") #for nlls fitting
library("ggplot2")
#Import Data
Data <- read.csv("../../../Results/Simulation2/MultiSimAnalyticData.csv")
rm(list=ls())
graphics.off()
data <- read.csv("../../../Results/total_sim_results.csv")
#define the model function
chisholm_model <- function(area, theta, m0, K) {
rho = 1
K = K
Js = area*rho
J_stars = Js/K
ms = m0/sqrt(area) #changed this from m0/sqrt(area) to m0*sqrt(area)???
gamma_stars = J_stars*ms/(1-ms)
return(theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K)))
}
model_species <- vector()
for (i in 1:nrow(data)) { #for each row of the dataframe
island <- data[i, ]
m = island$immigration
area = island$area
J = area
m0 = m/sqrt(area)
nu = 0.01
J_meta = 10000000 #size of metacommunity that supplied island immigrants
K = island$niches
#theta = 2*(niche_size*K)*nu #2*the metacommunity size immigrating to the island*nu
theta = nu*(J_meta-1)/(1-nu) #should I use J_meta or the niche size?
model_species[[i]] <- round(chisholm_model(area, theta, m0, K), digits = 2)
}
for (i in 1:nrow(data)) { #for each row of the dataframe
island <- data[i, ]
m = island$immigration
area = island$area
J = area
m0 = m/sqrt(area)
nu = 0.01
J_meta = 10000000 #size of metacommunity that supplied island immigrants
K = island$niches
#theta = 2*(niche_size*K)*nu #2*the metacommunity size immigrating to the island*nu
theta = nu*(J_meta-1)/(1-nu) #should I use J_meta or the niche size?
model_species[[i]] <- round(chisholm_model(area, theta, m0, K), digits = 2)
}
Data <- cbind.data.frame(data, theta, model_species) #bind theta and model species in with the dataframe
Data <- Data[c(1,6,2,3,4,5,7)] #rearrange columns
Data$difference <- (Data$species - Data$model_species)
View(Data)
rm(list=ls())
graphics.off()
data <- read.csv("../../../Results/total_sim_results.csv")
#define the model function
chisholm_model <- function(area, theta, m0, K) {
rho = 1
K = K
Js = area*rho
J_stars = Js/K
ms = m0*sqrt(area) #changed this from m0/sqrt(area) to m0*sqrt(area)???
gamma_stars = J_stars*ms/(1-ms)
return(theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K)))
}
model_species <- vector()
for (i in 1:nrow(data)) { #for each row of the dataframe
island <- data[i, ]
m = island$immigration
area = island$area
J = area
m0 = m/sqrt(area)
nu = 0.01
J_meta = 10000000 #size of metacommunity that supplied island immigrants
K = island$niches
#theta = 2*(niche_size*K)*nu #2*the metacommunity size immigrating to the island*nu
theta = nu*(J_meta-1)/(1-nu) #should I use J_meta or the niche size?
model_species[[i]] <- round(chisholm_model(area, theta, m0, K), digits = 2)
}
Data <- cbind.data.frame(data, theta, model_species) #bind theta and model species in with the dataframe
Data <- Data[c(1,6,2,3,4,5,7)] #rearrange columns
Data$difference <- (Data$species - Data$model_species)
write.csv(Data, "../../../Results/Simulation2/MultiSimAnalyticData.csv")
rm(list=ls())
graphics.off()
#install nlls fitting package
#install.packages("minpack.lm") <- if you've never installed minpack before
library("minpack.lm") #for nlls fitting
library("ggplot2")
#Import Data
Data <- read.csv("../../../Results/Simulation2/MultiSimAnalyticData.csv")
View(Data)
rm(list=ls())
graphics.off()
data <- read.csv("../../../Results/total_sim_results.csv")
#define the model function
chisholm_model <- function(area, theta, m0, K) {
rho = 1
K = K
Js = area*rho
J_stars = Js/K
ms = m0*sqrt(area) #changed this from m0/sqrt(area) to m0*sqrt(area)???
gamma_stars = J_stars*ms/(1-ms)
return(theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K)))
}
model_species <- vector()
for (i in 1:nrow(data)) { #for each row of the dataframe
island <- data[i, ]
m = island$immigration
area = island$area
J = area
m0 = m/sqrt(area)
nu = 0.01
J_meta = 10000000 #size of metacommunity that supplied island immigrants
K = island$niches
#theta = 2*(niche_size*K)*nu #2*the metacommunity size immigrating to the island*nu
theta = nu*(J_meta-1)/(1-nu) #should I use J_meta or the niche size?
model_species[[i]] <- round(chisholm_model(area, theta, m0, K), digits = 2)
}
Data <- cbind.data.frame(data, theta, model_species) #bind theta and model species in with the dataframe
Data <- Data[c(1,6,2,3,4,5,7)] #rearrange columns
Data$difference <- (Data$species - Data$model_species)
write.csv(Data, "../../../Results/Simulation2/MultiSimAnalyticData.csv", row.names = FALSE)
rm(list=ls())
graphics.off()
#install nlls fitting package
#install.packages("minpack.lm") <- if you've never installed minpack before
library("minpack.lm") #for nlls fitting
library("ggplot2")
#Import Data
Data <- read.csv("../../../Results/Simulation2/MultiSimAnalyticData.csv")
View(Data)
View(Data)
rm(list=ls())
graphics.off()
data <- read.csv("../../../Results/total_sim_results.csv")
#define the model function
chisholm_model <- function(area, theta, m0, K) {
rho = 1
K = K
Js = area*rho
J_stars = Js/K
ms = m0*sqrt(area) #changed this from m0/sqrt(area) to m0*sqrt(area)???
gamma_stars = J_stars*ms/(1-ms)
return(theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K)))
}
model_species <- vector()
x <- chisholm_model(area = 230, theta = 101010, m0 = 0.003/230, K = 10)
0.003/230
rm(list=ls())
graphics.off()
#install nlls fitting package
#install.packages("minpack.lm") <- if you've never installed minpack before
library("minpack.lm") #for nlls fitting
library("ggplot2")
#Import Data
Data <- read.csv("../../../Results/Simulation2/MultiSimAnalyticData.csv")
#define the model function
chisholm_model <- function(area, theta, m0, K) {
rho = 1
K = K
Js = area*rho
J_stars = Js/K
ms = m0*sqrt(area) #change this from m0/sqrt(area) to m0*sqrt(area)???
gamma_stars = J_stars*ms/(1-ms)
return(theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K)))
}
#function to find NLLS starting values
get_my_starts <- function() {
nu = 0.01
m_start = nu*median(Data$area)/200
m0_start = m_start/sqrt(median(Data$area))
theta_start = median(Data$species)*6
starts <- data.frame(nu, m_start, m0_start, theta_start)
return(starts)
}
View(Data)
Data2 <- Data[Data$arch_num == 1, ] #subset data to one archipelago
View(Data2)
NLLSfits <- function() {
starts <- get_my_starts() #get starting estimates
this_result = 0
best_fit_and_k <- list()
for (K in 1:ceiling(max(Data2$species))) { #for num of niches from 1 to max number of species
# #an atempt at finding starting values
# m_start = K/(1*median(Data2$area)*W(-K/1*(median(Data2$area)), branch = -1))
# gamma_start = (1*max(Data2$area - 1))*m_start/(1 - m_start)
#
# #species richness on largest island
# Largest_Island = Data2[Data2$area == max(Data2$area), ]
# SAmax = Largest_Island$species #found the mean here because we had two island of the same size
#
# theta_start = SAmax*gamma_start*log(m_start)/SAmax - gamma_start* log(m_start)*W((SAmax/gamma_start*log(m_start)*exp(SAmax/gamma_start*log(m_start))), branch = -1)
#fit the model
fit_chisholm <- try(nlsLM(species ~ chisholm_model(area, theta, m0, K), data = Data2,
start = list(theta = starts$theta_start, m0 = starts$m0_start)), silent = T)
#Get the R-squared value of the fitting
if(class(fit_chisholm) !="try-error"){
RSS <- sum(residuals(fit_chisholm)^2) #Residual sum of squares of our NLLS model
TSS <- sum((Data2$species - mean(Data2$species))^2) #Total sum of squares
RSq <- 1 - (RSS/TSS) #R-squared value
#if this RSq value is higher than the last one, we store the results
if (RSq >= this_result) {
fit_store <- fit_chisholm
this_result <- RSq
best_k <- K
}
}
}
best_fit_and_k[[1]] <- fit_store
best_fit_and_k[[2]] <- best_k
return(best_fit_and_k)
}
best_fit_and_k <- NLLSfits()
fit_store <- best_fit_and_k[[1]]
niches <- best_fit_and_k[[2]]
View(Data2)
RSS <- sum(residuals(fit_store)^2) #Residual sum of squares of our NLLS model
TSS <- sum((Data2$species - mean(Data2$species))^2) #Total sum of squares
RSq <- 1 - (RSS/TSS) #R-squared value
#get the parameter estimates
a <- (summary(fit_store))$coefficients[, 1]
get_my_points <- function() {
area <- Data2$area
chisholm_points <- chisholm_model(area = area, theta = a[[1]], m0 = a[[2]], K = niches)
#merge NLLS points into dataframe with simulation and analytic results
migration = a[[2]]*sqrt(median(area))
df <- data.frame(area, chisholm_points, migration, K = niches, a[[1]])
df <- round(df, 5)
df$SimOrAnalytic <- "NLLS"
names(df) <- c("area", "species", "migration", "niches", "theta", "SimAnalyticNLLS")
colnames(Data)[7] <- "SimAnalyticNLLS"
Data <- Data[, -c(1)]
Data <- rbind(Data, df)
return(Data)
}
Data <- get_my_points()
area <- Data2$area
chisholm_points <- chisholm_model(area = area, theta = a[[1]], m0 = a[[2]], K = niches)
#merge NLLS points into dataframe with simulation and analytic results
migration = a[[2]]*sqrt(median(area))
View(Data2)
View(Data2)
area <- Data2$area
chisholm_points <- chisholm_model(area = area, theta = a[[1]], m0 = a[[2]], K = niches)
Data2$chisholm_points <- chisholm_points
View(Data2)
Data2$est_migration = a[[2]]*sqrt(median(area))
View(Data2)
Data2$est_immigration = a[[2]]*sqrt(median(area))
Data2$est_theta = a[[1]]
Data2$est_K = niches
View(Data2)
rm(list=ls())
graphics.off()
#install nlls fitting package
#install.packages("minpack.lm") <- if you've never installed minpack before
library("minpack.lm") #for nlls fitting
library("ggplot2")
#Import Data
Data <- read.csv("../../../Results/Simulation2/MultiSimAnalyticData.csv")
#############################################################
#######################FUNCTION ONE##########################
#############################################################
#define the model function
chisholm_model <- function(area, theta, m0, K) {
rho = 1
K = K
Js = area*rho
J_stars = Js/K
ms = m0*sqrt(area) #change this from m0/sqrt(area) to m0*sqrt(area)???
gamma_stars = J_stars*ms/(1-ms)
return(theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K)))
}
#############################################################
#######################FUNCTION TWO##########################
#############################################################
#function to find NLLS starting values
get_my_starts <- function() {
nu = 0.01
m_start = nu*median(Data$area)/200
m0_start = m_start/sqrt(median(Data$area))
theta_start = median(Data$species)*6
starts <- data.frame(nu, m_start, m0_start, theta_start)
return(starts)
}
NLLSfits <- function(Data) {
starts <- get_my_starts() #get starting estimates
this_result = 0
best_fit_and_k <- list()
for (K in 1:ceiling(max(Data$species))) { #for num of niches from 1 to max number of species
#fit the model
fit_chisholm <- try(nlsLM(species ~ chisholm_model(area, theta, m0, K), data = Data2,
start = list(theta = starts$theta_start, m0 = starts$m0_start), lower=c(0, 0), upper=c(Inf, 1)), silent = T)
#Get the R-squared value of the fitting
if(class(fit_chisholm) !="try-error"){
RSS <- sum(residuals(fit_chisholm)^2) #Residual sum of squares of our NLLS model
TSS <- sum((Data2$species - mean(Data2$species))^2) #Total sum of squares
RSq <- 1 - (RSS/TSS) #R-squared value
#if this RSq value is higher than the last one, we store the results
if (RSq >= this_result) {
fit_store <- fit_chisholm
this_result <- RSq
best_k <- K
}
}
}
best_fit_and_k[[1]] <- fit_store
best_fit_and_k[[2]] <- best_k
return(best_fit_and_k)
}
get_my_points <- function(Data) {
area <- Data$area
chisholm_points <- chisholm_model(area = area, theta = a[[1]], m0 = a[[2]], K = niches)
Data$chisholm_points <- chisholm_points
Data$est_immigration = a[[2]]*sqrt(median(area))
Data$est_theta = a[[1]]
Data$est_K = niches
Data$immigration_dif <- (Data$immigration - Data$est_immigration)
Data$theta_dif <- (Data$theta - Data$est_theta)
Data$K_dif <- (Data$niches - Data$est_K)
return(Data)
}
num = 3
Data2 <- Data[Data$arch_num == num, ] #subset data to one archipelago
best_fit_and_k <- NLLSfits(Data = Data2)
fit_store <- best_fit_and_k[[1]]
num = 1
Data2 <- Data[Data$arch_num == num, ] #subset data to one archipelago
best_fit_and_k <- NLLSfits(Data = Data2)
starts <- get_my_starts() #get starting estimates
this_result = 0
best_fit_and_k <- list()
for (K in 1:ceiling(max(Data$species))) { #for num of niches from 1 to max number of species
#fit the model
fit_chisholm <- try(nlsLM(species ~ chisholm_model(area, theta, m0, K), data = Data2,
start = list(theta = starts$theta_start, m0 = starts$m0_start), lower=c(0, 0), upper=c(Inf, 1)), silent = T)
#Get the R-squared value of the fitting
if(class(fit_chisholm) !="try-error"){
RSS <- sum(residuals(fit_chisholm)^2) #Residual sum of squares of our NLLS model
TSS <- sum((Data2$species - mean(Data2$species))^2) #Total sum of squares
RSq <- 1 - (RSS/TSS) #R-squared value
#if this RSq value is higher than the last one, we store the results
if (RSq >= this_result) {
fit_store <- fit_chisholm
this_result <- RSq
best_k <- K
}
}
}
best_fit_and_k[[1]] <- fit_store
best_fit_and_k[[2]] <- best_k
arch = Data[Data$arch_num == 10, ]
View(arch)
plot(log(arch$area), arch$species)
arch = Data[Data$arch_num == 1, ]
plot(log(arch$area), arch$species)
