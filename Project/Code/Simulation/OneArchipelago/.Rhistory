#script to get analytic results of one archipelago
#from the simulation
rm(list=ls())
graphics.off()
library("ggplot2")
#FUNCTION TO READ IN SIMULATIONS#
#read in 100 simulations
ImportMyData <- function() {
my_sims <- list()
for (i in 1:100) {
try(load(paste0(file="../../Data/SimData/1stJuly/simulation_timeseries_", i, ".rda")), silent = T)
my_sims[[i]] <- store_my_islands
}
return(my_sims)
}
#Import the data
data <- ImportMyData()
#FUNCTION TO READ IN SIMULATIONS#
#read in 100 simulations
ImportMyData <- function() {
my_sims <- list()
for (i in 1:100) {
try(load(paste0(file="../../../Data/SimData/1stJuly/simulation_timeseries_", i, ".rda")), silent = T)
my_sims[[i]] <- store_my_islands
}
return(my_sims)
}
#Import the data
data <- ImportMyData()
#get the migration rate and number of niches for the archipelago
migration_rate <- data[[1]][[1]][[1]][[1]]$do_migration
num_niches <- length(data[[1]][[1]][[1]])
#find the archipelago mean
get_my_mean <- function() {
island_mean <- vector()
for (j in 1:length(data[[1]])) {
z <- vector()
for (i in 1:length(data)) {
x <- data[[i]][[j]][[2]]
y <- tail(x, n=1)
z <- c(z, y)
}
island_mean[[j]] <- mean(z)
}
return(island_mean)
}
get_my_areas <- function() {
area <- vector() #create empty list for storing island areas
for (i in 1:length(data[[1]])) {
area[[i]] <- length(data[[1]][[i]][[1]][[1]]$Niche)*num_niches
}
return(area)
}
#bind our data into a dataframe
island_mean <- get_my_mean()
area <- get_my_areas()
mean_data <- data.frame(area, island_mean)
mean_data$migration <- migration_rate
mean_data$niches <- num_niches
#define the model function
chisholm_model <- function(area, theta, m0, K) {
rho = 1
K = K
Js = area*rho
J_stars = Js/K
ms = m0*sqrt(area) #changed this from m0/sqrt(area) to m0*sqrt(area)???
gamma_stars = J_stars*ms/(1-ms)
return(theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K)))
}
model_species <- vector()
for (i in 1:nrow(mean_data)) {
data <- mean_data[i, ]
m = data$migration
area = data$area
J = area
m0 = m/sqrt(area)
nu = 0.01
J_meta = 10000000 #size of metacommunity that supplied island immigrants
K = data$niches
niche_size = J_meta/K #size of each niche in the metacommunity
#theta = 2*(niche_size*K)*nu #2*the metacommunity size immigrating to the island*nu
theta = nu*(J_meta-1)/(1-nu)
model_species[[i]] <- round(chisholm_model(area, theta, m0, K), digits = 2)
}
#bind results to single dataframe
Data <- cbind.data.frame(mean_data, theta)
Data$SimOrAnalytic <- "simulation"
names(Data) <- c("area", "species", "migration", "niches", "theta", "SimOrAnalytic")
Data2 <- Data[, -c(2)]
Data2 <- cbind.data.frame(Data2, model_species)
Data2 <- Data2[c(1,6,2,3,4, 5)]
Data2$SimOrAnalytic <- "analytic"
names(Data2) <- c("area", "species", "migration", "niches", "theta", "SimOrAnalytic")
Data <- rbind(Data, Data2)
write.csv(Data, "../../Results/Simulation2/SimAnalyticData_changed.csv")
write.csv(Data, "../....//Results/Simulation2/SimAnalyticData_changed.csv")
write.csv(Data, "../../../Results/Simulation2/SimAnalyticData_changed.csv")
p1<-ggplot(Data, aes(x=log(area), y=species, group=SimOrAnalytic)) +
geom_line(aes(color=SimOrAnalytic))+
geom_point(aes(color=SimOrAnalytic)) +
theme_bw()
p1
#define the model function
chisholm_model <- function(area, theta, m0, K) {
rho = 1
K = K
Js = area*rho
J_stars = Js/K
ms = m0/sqrt(area) #changed this from m0/sqrt(area) to m0*sqrt(area)???
gamma_stars = J_stars*ms/(1-ms)
return(theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K)))
}
model_species <- vector()
for (i in 1:nrow(mean_data)) {
data <- mean_data[i, ]
m = data$migration
area = data$area
J = area
m0 = m*sqrt(area)
nu = 0.01
J_meta = 10000000 #size of metacommunity that supplied island immigrants
K = data$niches
niche_size = J_meta/K #size of each niche in the metacommunity
#theta = 2*(niche_size*K)*nu #2*the metacommunity size immigrating to the island*nu
theta = nu*(J_meta-1)/(1-nu)
model_species[[i]] <- round(chisholm_model(area, theta, m0, K), digits = 2)
}
#bind results to single dataframe
Data <- cbind.data.frame(mean_data, theta)
Data$SimOrAnalytic <- "simulation"
names(Data) <- c("area", "species", "migration", "niches", "theta", "SimOrAnalytic")
Data2 <- Data[, -c(2)]
Data2 <- cbind.data.frame(Data2, model_species)
Data2 <- Data2[c(1,6,2,3,4, 5)]
Data2$SimOrAnalytic <- "analytic"
names(Data2) <- c("area", "species", "migration", "niches", "theta", "SimOrAnalytic")
Data <- rbind(Data, Data2)
p2<-ggplot(Data, aes(x=log(area), y=species, group=SimOrAnalytic)) +
geom_line(aes(color=SimOrAnalytic))+
geom_point(aes(color=SimOrAnalytic)) +
theme_bw()
p2
pdf("../../../Results/Simulation2/MeanResultsPlot_changed.pdf")
print(p)
print(p1)
dev.off()
rm(list=ls())
graphics.off()
#install nlls fitting package
#install.packages("minpack.lm") <- if you've never installed minpack before
library("minpack.lm") #for nlls fitting
library("ggplot2")
#Import Data
Data <- read.csv("../../Results/Simulation2/SimAnalyticData.csv")
#Import Data
Data <- read.csv("../../../Results/Simulation2/SimAnalyticData.csv")
#define the model function
chisholm_model <- function(area, theta, m0, K) {
rho = 1
K = K
Js = area*rho
J_stars = Js/K
ms = m0/sqrt(area) #change this from m0/sqrt(area) to m0*sqrt(area)???
gamma_stars = J_stars*ms/(1-ms)
return(theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K)))
}
#function to find NLLS starting values
get_my_starts <- function() {
nu = 0.01
m_start = nu*median(Data$area)/200
m0_start = m_start*sqrt(median(Data$area))
theta_start = median(Data$species)*6
starts <- data.frame(nu, m_start, m0_start, theta_start)
return(starts)
}
Data2 <- Data[Data$SimOrAnalytic == "simulation", ] #subset data to just simulation
NLLSfits <- function() {
starts <- get_my_starts() #get starting estimates
this_result = 0
best_fit_and_k <- list()
for (K in 1:ceiling(max(Data2$species))) { #for num of niches from 1 to max number of species
# #an atempt at finding starting values
# m_start = K/(1*median(Data2$area)*W(-K/1*(median(Data2$area)), branch = -1))
# gamma_start = (1*max(Data2$area - 1))*m_start/(1 - m_start)
#
# #species richness on largest island
# Largest_Island = Data2[Data2$area == max(Data2$area), ]
# SAmax = Largest_Island$species #found the mean here because we had two island of the same size
#
# theta_start = SAmax*gamma_start*log(m_start)/SAmax - gamma_start* log(m_start)*W((SAmax/gamma_start*log(m_start)*exp(SAmax/gamma_start*log(m_start))), branch = -1)
#fit the model
fit_chisholm <- try(nlsLM(species ~ chisholm_model(area, theta, m0, K), data = Data2,
start = list(theta = starts$theta_start, m0 = starts$m0_start)), silent = T)
#Get the R-squared value of the fitting
if(class(fit_chisholm) !="try-error"){
RSS <- sum(residuals(fit_chisholm)^2) #Residual sum of squares of our NLLS model
TSS <- sum((Data2$species - mean(Data2$species))^2) #Total sum of squares
RSq <- 1 - (RSS/TSS) #R-squared value
#if this RSq value is higher than the last one, we store the results
if (RSq >= this_result) {
fit_store <- fit_chisholm
this_result <- RSq
best_k <- K
}
}
}
best_fit_and_k[[1]] <- fit_store
best_fit_and_k[[2]] <- best_k
return(best_fit_and_k)
}
best_fit_and_k <- NLLSfits()
fit_store <- best_fit_and_k[[1]]
niches <- best_fit_and_k[[2]]
RSS <- sum(residuals(fit_store)^2) #Residual sum of squares of our NLLS model
TSS <- sum((Data2$species - mean(Data2$species))^2) #Total sum of squares
RSq <- 1 - (RSS/TSS) #R-squared value
#get the parameter estimates
a <- (summary(fit_store))$coefficients[, 1]
get_my_points <- function() {
area <- Data2$area
chisholm_points <- chisholm_model(area = area, theta = a[[1]], m0 = a[[2]], K = niches)
#merge NLLS points into dataframe with simulation and analytic results
migration = a[[2]]*sqrt(median(area))
df <- data.frame(area, chisholm_points, migration, K = niches, a[[1]])
df <- round(df, 5)
df$SimOrAnalytic <- "NLLS"
names(df) <- c("area", "species", "migration", "niches", "theta", "SimAnalyticNLLS")
colnames(Data)[7] <- "SimAnalyticNLLS"
Data <- Data[, -c(1)]
Data <- rbind(Data, df)
return(Data)
}
Data <- get_my_points()
m = a[[2]]/sqrt(median(Data$area))
k = niches
theta = a[[1]]
#Let's get our critical area for regime transition
ACrit <- theta*(1-m)*(exp(k/theta)-1)/m*1*log(1/m)
#plot simulation, analytic and NLLS results
p1 <- ggplot(Data, aes(x = area, y = species, group = SimAnalyticNLLS)) +
scale_x_log10() +
xlab("log(area)")+
geom_point(aes(colour = SimAnalyticNLLS)) +
geom_line(aes(colour = SimAnalyticNLLS)) +
annotate(geom="text", x=150, y=250, label="NLLS Results",
color="red") +
annotate(geom="text", x=100, y=230, label="R^2:",
color="red") +
annotate(geom="text", x=200, y=230, label=c(round(RSq, 2)),
color="red") +
annotate(geom="text", x=100, y=210, label="m_rate:",
color="red") +
annotate(geom="text", x=200, y=210, label=c(round(m, 2)),
color="red") +
annotate(geom="text", x=100, y=190, label="niches:",
color="red") +
annotate(geom="text", x=200, y=190, label=c(round(k, 2)),
color="red") +
annotate(geom="text", x=80, y=170, label="theta:",
color="red") +
annotate(geom="text", x=250, y=170, label=c(round(theta, 2)),
color="red") +
annotate(geom="text", x=100, y=150, label="ACrit:",
color="red") +
annotate(geom="text", x=270, y=150, label=c(round(ACrit, 2)),
color="red") +
geom_vline(xintercept = ACrit, linetype="dotted",
color = "red", size=1.5) +
theme_bw()
p1
#define the model function
chisholm_model <- function(area, theta, m0, K) {
rho = 1
K = K
Js = area*rho
J_stars = Js/K
ms = m0*sqrt(area) #change this from m0/sqrt(area) to m0*sqrt(area)???
gamma_stars = J_stars*ms/(1-ms)
return(theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K)))
}
#function to find NLLS starting values
get_my_starts <- function() {
nu = 0.01
m_start = nu*median(Data$area)/200
m0_start = m_start/sqrt(median(Data$area))
theta_start = median(Data$species)*6
starts <- data.frame(nu, m_start, m0_start, theta_start)
return(starts)
}
Data2 <- Data[Data$SimOrAnalytic == "simulation", ] #subset data to just simulation
NLLSfits <- function() {
starts <- get_my_starts() #get starting estimates
this_result = 0
best_fit_and_k <- list()
for (K in 1:ceiling(max(Data2$species))) { #for num of niches from 1 to max number of species
# #an atempt at finding starting values
# m_start = K/(1*median(Data2$area)*W(-K/1*(median(Data2$area)), branch = -1))
# gamma_start = (1*max(Data2$area - 1))*m_start/(1 - m_start)
#
# #species richness on largest island
# Largest_Island = Data2[Data2$area == max(Data2$area), ]
# SAmax = Largest_Island$species #found the mean here because we had two island of the same size
#
# theta_start = SAmax*gamma_start*log(m_start)/SAmax - gamma_start* log(m_start)*W((SAmax/gamma_start*log(m_start)*exp(SAmax/gamma_start*log(m_start))), branch = -1)
#fit the model
fit_chisholm <- try(nlsLM(species ~ chisholm_model(area, theta, m0, K), data = Data2,
start = list(theta = starts$theta_start, m0 = starts$m0_start)), silent = T)
#Get the R-squared value of the fitting
if(class(fit_chisholm) !="try-error"){
RSS <- sum(residuals(fit_chisholm)^2) #Residual sum of squares of our NLLS model
TSS <- sum((Data2$species - mean(Data2$species))^2) #Total sum of squares
RSq <- 1 - (RSS/TSS) #R-squared value
#if this RSq value is higher than the last one, we store the results
if (RSq >= this_result) {
fit_store <- fit_chisholm
this_result <- RSq
best_k <- K
}
}
}
best_fit_and_k[[1]] <- fit_store
best_fit_and_k[[2]] <- best_k
return(best_fit_and_k)
}
best_fit_and_k <- NLLSfits()
#Import Data
Data <- read.csv("../../../Results/Simulation2/SimAnalyticData.csv")
#define the model function
chisholm_model <- function(area, theta, m0, K) {
rho = 1
K = K
Js = area*rho
J_stars = Js/K
ms = m0*sqrt(area) #change this from m0/sqrt(area) to m0*sqrt(area)???
gamma_stars = J_stars*ms/(1-ms)
return(theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K)))
}
#function to find NLLS starting values
get_my_starts <- function() {
nu = 0.01
m_start = nu*median(Data$area)/200
m0_start = m_start/sqrt(median(Data$area))
theta_start = median(Data$species)*6
starts <- data.frame(nu, m_start, m0_start, theta_start)
return(starts)
}
Data2 <- Data[Data$SimOrAnalytic == "simulation", ] #subset data to just simulation
NLLSfits <- function() {
starts <- get_my_starts() #get starting estimates
this_result = 0
best_fit_and_k <- list()
for (K in 1:ceiling(max(Data2$species))) { #for num of niches from 1 to max number of species
# #an atempt at finding starting values
# m_start = K/(1*median(Data2$area)*W(-K/1*(median(Data2$area)), branch = -1))
# gamma_start = (1*max(Data2$area - 1))*m_start/(1 - m_start)
#
# #species richness on largest island
# Largest_Island = Data2[Data2$area == max(Data2$area), ]
# SAmax = Largest_Island$species #found the mean here because we had two island of the same size
#
# theta_start = SAmax*gamma_start*log(m_start)/SAmax - gamma_start* log(m_start)*W((SAmax/gamma_start*log(m_start)*exp(SAmax/gamma_start*log(m_start))), branch = -1)
#fit the model
fit_chisholm <- try(nlsLM(species ~ chisholm_model(area, theta, m0, K), data = Data2,
start = list(theta = starts$theta_start, m0 = starts$m0_start)), silent = T)
#Get the R-squared value of the fitting
if(class(fit_chisholm) !="try-error"){
RSS <- sum(residuals(fit_chisholm)^2) #Residual sum of squares of our NLLS model
TSS <- sum((Data2$species - mean(Data2$species))^2) #Total sum of squares
RSq <- 1 - (RSS/TSS) #R-squared value
#if this RSq value is higher than the last one, we store the results
if (RSq >= this_result) {
fit_store <- fit_chisholm
this_result <- RSq
best_k <- K
}
}
}
best_fit_and_k[[1]] <- fit_store
best_fit_and_k[[2]] <- best_k
return(best_fit_and_k)
}
best_fit_and_k <- NLLSfits()
fit_store <- best_fit_and_k[[1]]
niches <- best_fit_and_k[[2]]
RSS <- sum(residuals(fit_store)^2) #Residual sum of squares of our NLLS model
TSS <- sum((Data2$species - mean(Data2$species))^2) #Total sum of squares
RSq <- 1 - (RSS/TSS) #R-squared value
#get the parameter estimates
a <- (summary(fit_store))$coefficients[, 1]
get_my_points <- function() {
area <- Data2$area
chisholm_points <- chisholm_model(area = area, theta = a[[1]], m0 = a[[2]], K = niches)
#merge NLLS points into dataframe with simulation and analytic results
migration = a[[2]]*sqrt(median(area))
df <- data.frame(area, chisholm_points, migration, K = niches, a[[1]])
df <- round(df, 5)
df$SimOrAnalytic <- "NLLS"
names(df) <- c("area", "species", "migration", "niches", "theta", "SimAnalyticNLLS")
colnames(Data)[7] <- "SimAnalyticNLLS"
Data <- Data[, -c(1)]
Data <- rbind(Data, df)
return(Data)
}
Data <- get_my_points()
m = a[[2]]*sqrt(median(Data$area))
k = niches
theta = a[[1]]
#Let's get our critical area for regime transition
ACrit <- theta*(1-m)*(exp(k/theta)-1)/m*1*log(1/m)
#plot simulation, analytic and NLLS results
p2 <- ggplot(Data, aes(x = area, y = species, group = SimAnalyticNLLS)) +
scale_x_log10() +
xlab("log(area)")+
geom_point(aes(colour = SimAnalyticNLLS)) +
geom_line(aes(colour = SimAnalyticNLLS)) +
annotate(geom="text", x=150, y=250, label="NLLS Results",
color="red") +
annotate(geom="text", x=100, y=230, label="R^2:",
color="red") +
annotate(geom="text", x=200, y=230, label=c(round(RSq, 2)),
color="red") +
annotate(geom="text", x=100, y=210, label="m_rate:",
color="red") +
annotate(geom="text", x=200, y=210, label=c(round(m, 2)),
color="red") +
annotate(geom="text", x=100, y=190, label="niches:",
color="red") +
annotate(geom="text", x=200, y=190, label=c(round(k, 2)),
color="red") +
annotate(geom="text", x=80, y=170, label="theta:",
color="red") +
annotate(geom="text", x=250, y=170, label=c(round(theta, 2)),
color="red") +
annotate(geom="text", x=100, y=150, label="ACrit:",
color="red") +
annotate(geom="text", x=270, y=150, label=c(round(ACrit, 2)),
color="red") +
geom_vline(xintercept = ACrit, linetype="dotted",
color = "red", size=1.5) +
theme_bw()
p2
