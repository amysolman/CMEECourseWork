print(p1)
pdf("../../../FinalReport/AreaThetaResults.pdf")
print(p1)
dev.off()
pdf("../../../FinalReport/Aream0Results.pdf")
print(p2)
dev.off()
pdf("../../../FinalReport/AreaKResults.pdf")
print(p3)
dev.off()
View(theta_results)
View(m0_results)
View(K_results)
shapiro.test(theta_results$Difference) #normally distributed
shapiro.test(m0_results$Difference) #not normally distributed
shapiro.test(K_results$Difference) #normally distributed
t.test(theta_results$True, theta_results$Estimated, paired = TRUE, alternative = "two.sided") #results are significantly different
t.test(m0_results$True, m0_results$Estimated, paired = TRUE, alternative = "two.sided") #results not significantly different
t.test(K_results$True, K_results$Estimated, paired = TRUE, alternative = "two.sided") #results not significantly different
View(theta_results)
setwd("~/Documents/CMEECourseWork/Project/Code/Simulation/DepthSim")
rm(list=ls())
graphics.off()
library("ggplot2")
library("gridExtra") #for multiplots on one graph
#FUNCTION TO READ IN SIMULATIONS#
#read in 100 simulations
ImportMyData <- function(num_sim) {
my_sims <- list()
for (i in 1:100) {
load(paste0(file="../../../Data/SimData/Depth/simulation_depth_", num_sim, "_", i, ".rda"))
my_sims[[i]] <- store_my_islands
}
return(my_sims)
}
#Import the data
for (j in 1:10){
numbers <- c("one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten")
data <- ImportMyData(num_sim = numbers[j])
#select 3 random simulations
num <- sample(1:100, 3)
#empty list for storing my plots
my_plots <- list()
#plot three of our simulations to check they reached equilibrium
for (p in 1:3){
Data <- data[[num[[p]]]]
timesteps <- seq(1, length(Data[[1]][[2]]))*5000
island_num <- seq(1, 100)
species_rich <- Data[[1]][[2]]
df <- cbind.data.frame(timesteps, species_rich, island_num[[1]])
colnames(df) <- c("timesteps", "species", "island_num")
for (i in 2:length(Data)){
species_rich <- Data[[i]][[2]]
df2 <- cbind.data.frame(timesteps, species_rich, island_num[[i]])
colnames(df2) <- c("timesteps", "species", "island_num")
df <- rbind(df, df2)
}
plot <- ggplot(df, aes(x=timesteps, y=species, group=island_num))+
geom_line(aes(color=island_num, group=island_num))+
scale_colour_gradientn(colours=rainbow(10))
my_plots[[p]] <- plot
}
# Print the plot to a pdf file
file_name = paste0("../../../Results/Simulation/DepthTimeseriesPlot_", j, ".pdf")
pdf(file_name)
myplot <- do.call(grid.arrange,my_plots)
print(myplot)
dev.off()
}
#Script to get island means across all 100 simulations
rm(list=ls())
graphics.off()
##############################################################
#######################FUNCTION ONE###########################
##############################################################
#FUNCTION TO READ IN SIMULATIONS#
#read in 100 simulations
ImportMyData <- function(num_sim) {
my_sims <- list()
for (i in 1:100) {
load(paste0(file="../../../Data/SimData/Depth/simulation_depth_", num_sim, "_", i, ".rda"))
my_sims[[i]] <- store_my_islands
}
return(my_sims)
}
##############################################################
#######################FUNCTION TWO###########################
##############################################################
#function to get island areas
get_my_areas <- function(data, K_true) {
area <- vector() #create empty list for storing island areas
for (i in 1:length(data[[1]])) { #from 1 to the number of islands
area[[i]] <- K_true*(length(data[[1]][[i]][[1]][[1]]$Niche)) #area is the number of niches
#* size of niche
}
return(area)
}
##############################################################
#######################FUNCTION THREE###########################
##############################################################
#put the data for each island into a table
table_my_data <- function(data, K_true, m0_true, theta_true, depth){
area <- get_my_areas(data, K_true)
df <- data.frame(m0_true, K_true, theta_true, depth, area)
for (s in 1:length(data)){
simulation <- data[[s]]
sp_rich <- vector()
for (i in 1:length(simulation)){
island <- simulation[[i]]
sp_rich[[i]] <- tail(island[[2]], n=1)
}
df$sim <- sp_rich
names(df)[names(df) == "sim"] <- paste0("sim_", s)
}
return(df)
}
std <- function(x) sd(x)/sqrt(length(x))
##############################################################
#######################FUNCTION FIVE###########################
##############################################################
#get mean and standard error
mean_and_st_error <- function(df){
#get data without theta, K, m0 and area
my_data <- df[-c(1:5)]
species <- rowMeans(my_data)
st_error <- vector()
for (r in 1:nrow(my_data)){
island <- my_data[r, ]
st_error[[r]] <- std(island)
}
mean_and_error <- data.frame(species, st_error)
return(mean_and_error)
}
##############################################################
##################RUN THE FUNCTIONS###########################
##############################################################
#run the functions
#Import the data
for (j in 1:10){
numbers <- c("one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten")
data <- ImportMyData(num_sim = numbers[j])
#get the migration rate and number of niches for the archipelagos
nu_values = seq(0.00001, 0.0001, 0.00001)
K_true <- length(data[[1]][[1]][[1]])
m0_true <- data[[1]][[1]][[1]][[1]]$m0
nu = nu_values[j]
J_meta = K_true*10000
theta_true = nu*(J_meta-1)/(1-nu)
depth <- 1
df <- table_my_data(data, K_true, m0_true, theta_true, depth)
mean_and_error <- mean_and_st_error(df)
final_df <- cbind.data.frame(df, mean_and_error)
write.csv(final_df, paste0("../../../Data/SimulationMeansDepth", j, ".csv"), row.names=FALSE)
}
#script to get analytic results of one archipelago
#from the simulation
rm(list=ls())
graphics.off()
library("ggplot2")
#Import the data
for (j in 1:10){
data <- read.csv(paste0("../../../Data/SimulationMeansDepth", j, ".csv"))
##############################################################
#######################FUNCTION ONE###########################
##############################################################
#define the model function
chisholm_model <- function(area, theta, m0, K, depth) {
rho = 1
K = K
Js = area*rho*depth
J_stars = Js/K
ms = m0/depth #per capita immigration rate
gamma_stars = J_stars*ms/(1-ms)
return(theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K)))
}
##############################################################
#######################FUNCTION TWO###########################
##############################################################
get_my_model_species <- function(data){
model_species <- vector() #vector for storing analytic results
for (i in 1:nrow(data)) {
island <- data[i, ]
area = island$area
theta = island$theta_true
K = island$K_true
m0 = island$m0_true
depth = island$depth
model_species[[i]] <- round(chisholm_model(area, theta, m0, K, depth), digits = 2)
}
return(model_species)
}
##############################################################
##########RUN THE FUNCTIONS AND PLOT RESULTS##################
##############################################################
model_species <- get_my_model_species(data)
analytics <- data.frame(data$area, model_species)
#add analytics to dataframe
data$analytics <- analytics$model_species
#ACrit Estimate
theta = data$theta_true[[1]]
m0 = data$m0_true[[1]]
K = data$K_true[[1]]
rho = 1
depth = 1
CriticalArea <- function(theta, m0, K, rho, depth){
#Let's get our critical area for regime transition
x = 1/(rho*depth)
y = theta*(exp(K/theta)-1)*(depth-m0)
z = m0*log(depth/m0)
ACrit = x*((y/z)+1)
return(ACrit)
}
ACrit <- CriticalArea(theta, m0, K, rho, depth)
#plot simulation and analytic results
eb <- aes(ymax = species + st_error, ymin = species - st_error) #define the limits of the error ribbon
p <- ggplot(data = data, aes(x = area, y = species, colour = "Simulation")) +
scale_color_discrete(name="")+ #gets rid of the legend title
scale_x_log10()+
ylab("Species Richness")+
xlab("Log Area")+
labs(title = "Mean simulation results with standard error ribbon \nand analytic results")+
geom_line(size = 1) +
geom_ribbon(eb, alpha = 0.5, fill="blue") +
geom_line(data = analytics, aes(x=data.area, y=model_species, colour = "Analytic"), size = 1)+
geom_vline(xintercept = ACrit, linetype="dotted",
color = "red", size=1.5)+
theme_bw()
#save as pdf
file_name = paste0("../../../Results/Simulation/AnalyticPlotDepth", j, ".pdf")
pdf(file_name)
print(p)
dev.off()
#save results table
write.csv(data, paste0("../../../Data/MeanAnalyticDepth", j, ".csv"))
}
rm(list=ls())
graphics.off()
#install nlls fitting package
#install.packages("minpack.lm") <- if you've never installed minpack before
library("minpack.lm") #for nlls fitting
library("ggplot2")
#install.packages("LambertW") <- if you've never installed LambertW before
library("LambertW")
#define the model function
chisholm_model <- function(area, theta, m0, K, rho, depth) {
K = K
Js = area*rho*depth
J_stars = Js/K
ms = m0/depth#per capital immigration rate
gamma_stars = J_stars*ms/(1-ms)
return(theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K)))
}
#############################################################
#############FUNCTION TWO: STARTING VALUES###################
#############################################################
#function to find NLLS starting values
get_my_starts <- function(K, Data) {
rho = 1 #just for the simulation
Amed = median(Data$area)
m0_start = -(K/(rho*Amed*W(-K/(rho*Amed), branch=-1))) #estimation of the constant proportionality of immigration rate across all islands
m0 = m0_start
Amax = max(Data$area) #maximum area
SAmax = Data[Data$area == Amax, ]$species #species on largest island
S = SAmax
Y = (((rho*Amax) - 1)*m0)/(1-m0)
theta_start = (S*Y*log(m0))/(S-Y*log(m0)*W(((exp(S/(Y*log(m0)))*S)/(Y*log(m0))), branch=-1))
if (theta_start <= 0){
theta_start = 20
}
starts <- data.frame(m0_start, theta_start)
return(starts)
}
NLLSfits <- function(Data) {
#create empty dataframe for storing results
my_df <- data.frame(niches=numeric(0), RSq=numeric(0), m0=numeric(0), theta=numeric(0))
for (K in 1:ceiling(max(Data$species))) { #for num of niches from 1 to max number of species
starts <- get_my_starts(K = K, Data = Data) #get starting estimates
#fit the model
fit_chisholm <- try(nlsLM(species ~ chisholm_model(area, theta, m0, K, rho = 1, depth = 1), data = Data,
start = list(theta = starts$theta_start, m0 = starts$m0_start), lower=c(0, 0), upper=c(Inf, 1)), silent = T)
#Get the R-squared value of the fitting
if(class(fit_chisholm) !="try-error"){
RSS <- sum(residuals(fit_chisholm)^2) #Residual sum of squares of our NLLS model
TSS <- sum((Data$species - mean(Data$species))^2) #Total sum of squares
RSq <- 1 - (RSS/TSS) #R-squared value
#get our parameters
niches = K
m0 = coef(fit_chisholm)["m0"]
theta = coef(fit_chisholm)["theta"]
#confint(fit_chisholm) <- for confidence intervals
#add the results to the dataframe
new_df <- data.frame(niches, RSq, m0, theta)
my_df <- rbind(my_df, new_df)
}
}
return(my_df)
}
#################################################################
#############FUNCTION FOUR: CRITICAL AREA#####################
#################################################################
CriticalArea <- function(theta, m0, K, rho, depth){
#Let's get our critical area for regime transition
x = 1/(rho*depth)
y = theta*(exp(K/theta)-1)*(depth-m0)
z = m0*log(depth/m0)
ACrit = x*((y/z)+1)
return(ACrit)
}
##################################################
################DO THE FITTING####################
##################################################
my_df <- list()
RSqResults <- list()
for (j in 1:10){
Data <- read.csv(paste0("../../../Data/MeanAnalyticDepth", j, ".csv"))
#1) Do the model fitting and extract the parameter estimates
fit_Results <- NLLSfits(Data = Data) #do the fitting and store all results for K
best_fit_results <- fit_Results[which.max(fit_Results$RSq),] #extract the best results
theta = best_fit_results$theta
m0 = best_fit_results$m0
K = best_fit_results$niches
#calculate adjusted r-squared
RSq = best_fit_results$RSq #Rsquared
N = nrow(Data) #number of datapoints
IndReg = 4 #number of independent regressors/num variables in the model
RSqAdj = 1-(((1-RSq)*(N-1))/(N-IndReg-1))
RSqResults[[j]] <- cbind(j, RSq, RSqAdj)
#put the estimated parameters into a dataframe
m0_results <- data.frame("m0", Data$m0_true[[1]], m0)
colnames(m0_results) <- c("Parameter", "True", "Estimated")
K_results <- data.frame("K", Data$K_true[[1]], K)
colnames(K_results) <- c("Parameter", "True", "Estimated")
theta_results <- data.frame("theta", Data$theta_true[[1]], theta)
colnames(theta_results) <- c("Parameter", "True", "Estimated")
my_df[[j]] <- rbind(m0_results, K_results, theta_results)
#2) Get the points for plotting and bind with sim data
Area <- Data$area
rho = 1
depth=1
chisholm_points <- chisholm_model(Area, theta, m0, K, rho, depth)
plot_species <- c(Data$species, chisholm_points)
plot_areas <- c(Data$area, Area)
categories <- rep(c("Simulation", "NLLS"), each=length(plot_areas)/2)
df <- cbind.data.frame(plot_areas, plot_species, categories)
#3) Get the critical area
ACrit <- CriticalArea(theta, m0, K, rho, depth)
#4) Plot fitted results
p1 <- ggplot(df, aes(x=plot_areas, y=plot_species, group=categories))+
geom_point(data = df[df$categories == "Simulation",], aes(x=plot_areas, y=plot_species), colour = "black", size = 5)+
scale_x_log10()+
geom_line(data = df[df$categories == "NLLS",], aes(x=plot_areas, y=plot_species), colour = "blue")+
xlab(paste("log(area)")) +
ylab(paste("species")) +
geom_vline(xintercept = ACrit, linetype="dotted",
color = "red", size=5)+
theme(
plot.title = element_blank(),
axis.title.x = element_text(size=30, face="bold"),
axis.title.y = element_text(size=30, face="bold"),
axis.text.x = element_text(size=30, face="bold"),
axis.text.y = element_text(size=30, face="bold"),
# Remove panel border
panel.border = element_blank(),
# Remove panel grid lines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_blank(),
# Add axis line
axis.line = element_line(colour = "grey"),
legend.title = element_blank()
)
file_name = paste0("../../../Results/Simulation/NLLSPlotDepth", j, ".pdf")
pdf(file_name)
print(p1)
dev.off()
}
my_final_dfs <- do.call("rbind", my_df)
theta_results <- my_final_dfs[my_final_dfs$Parameter == "theta", ]
theta_results$Difference <- theta_results$Estimated - theta_results$True
theta_mean_dif <- mean(theta_results$Difference)
m0_results <- my_final_dfs[my_final_dfs$Parameter == "m0", ]
m0_results$Difference <- m0_results$Estimated - m0_results$True
m0_mean_dif <- mean(m0_results$Difference)
K_results <- my_final_dfs[my_final_dfs$Parameter == "K", ]
K_results$Difference <- K_results$Estimated - K_results$True
K_mean_dif <- mean(K_results$Difference)
final_RSq <- do.call("rbind", RSqResults)
meanRSq <- mean(final_RSq[,2])
meanRSqAdj <- mean(final_RSq[,3])
Parameters <- c("theta", "m0", "K")
T_theta <- mean(theta_results$True)
E_theta <- mean(theta_results$Estimated)
T_m0 <- mean(m0_results$True)
E_m0 <- mean(m0_results$Estimated)
T_K <- mean(K_results$True)
E_K <- mean(K_results$Estimated)
True <- c(T_theta, T_m0, T_K)
Estimated <- c(E_theta, E_m0, E_K)
my_df <- data.frame(Parameters, True, Estimated)
my_df$Difference <- my_df$True - my_df$Estimated
my_df$True <- round(my_df$True, digits = 3)
my_df$Estimated <- round(my_df$Estimated, digits = 3)
my_df$Difference <- round(my_df$Difference, digits = 3)
#export as csv
write.csv(my_df, "../../../Other/FinalReport/DepthParam.csv", row.names = FALSE, quote = FALSE)
p1 <- ggplot(theta_results, aes(x=True, y=Estimated))+
geom_point(size = 2.5)+
geom_abline(intercept = 0, slope = 1, size = 1.5)+
theme(
plot.title = element_blank(),
axis.title.x = element_text(size=30, face="bold"),
axis.title.y = element_text(size=30, face="bold"),
axis.text.x = element_text(size=30, face="bold"),
axis.text.y = element_text(size=30, face="bold"),
# Remove panel border
panel.border = element_blank(),
# Remove panel grid lines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_blank(),
# Add axis line
axis.line = element_line(colour = "grey")
)
p2 <- ggplot(m0_results, aes(x=True, y=Estimated))+
geom_point(size=2.5)+
geom_abline(intercept = 0, slope = 1, size=1.5)+
theme(
plot.title = element_blank(),
axis.title.x = element_text(size=30, face="bold"),
axis.title.y = element_text(size=30, face="bold"),
axis.text.x = element_text(size=30, face="bold"),
axis.text.y = element_text(size=30, face="bold"),
# Remove panel border
panel.border = element_blank(),
# Remove panel grid lines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_blank(),
# Add axis line
axis.line = element_line(colour = "grey")
)
#export as csv
write.csv(my_df, "../../../FinalReport/DepthParam.csv", row.names = FALSE, quote = FALSE)
p1 <- ggplot(theta_results, aes(x=True, y=Estimated))+
geom_point(size = 2.5)+
geom_abline(intercept = 0, slope = 1, size = 1.5)+
theme(
plot.title = element_blank(),
axis.title.x = element_text(size=30, face="bold"),
axis.title.y = element_text(size=30, face="bold"),
axis.text.x = element_text(size=30, face="bold"),
axis.text.y = element_text(size=30, face="bold"),
# Remove panel border
panel.border = element_blank(),
# Remove panel grid lines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_blank(),
# Add axis line
axis.line = element_line(colour = "grey")
)
p2 <- ggplot(m0_results, aes(x=True, y=Estimated))+
geom_point(size=2.5)+
geom_abline(intercept = 0, slope = 1, size=1.5)+
theme(
plot.title = element_blank(),
axis.title.x = element_text(size=30, face="bold"),
axis.title.y = element_text(size=30, face="bold"),
axis.text.x = element_text(size=30, face="bold"),
axis.text.y = element_text(size=30, face="bold"),
# Remove panel border
panel.border = element_blank(),
# Remove panel grid lines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_blank(),
# Add axis line
axis.line = element_line(colour = "grey")
)
p3 <- ggplot(K_results, aes(x=True, y=Estimated))+
geom_point(size=2.5)+
geom_abline(intercept = 0, slope = 1, size=1.5)+
theme(
plot.title = element_blank(),
axis.title.x = element_text(size=30, face="bold"),
axis.title.y = element_text(size=30, face="bold"),
axis.text.x = element_text(size=30, face="bold"),
axis.text.y = element_text(size=30, face="bold"),
# Remove panel border
panel.border = element_blank(),
# Remove panel grid lines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_blank(),
# Add axis line
axis.line = element_line(colour = "grey")
)
pdf("../../../FinalReport/DepthThetaResults.pdf")
print(p1)
dev.off()
pdf("../../../FinalReport/Depthm0Results.pdf")
print(p2)
dev.off()
pdf("../../../FinalReport/DepthKResults.pdf")
print(p3)
dev.off()
