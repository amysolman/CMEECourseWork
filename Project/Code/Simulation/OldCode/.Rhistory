h2 <- hist(SolmanData$area)
print(h2)
dev.off()
######HISTOGRAM OF NICHES
file_name = paste("../../Results/Simulation/SolmanNicheHistogram_", div, ".pdf", sep="")
pdf(file_name)
h3 <- hist(SolmanData$K_num)
print(h3)
dev.off()
#####HISTOGRAM OF CHISHOLM SPECIES RICHNESS
file_name = paste("../../Results/Simulation2/ChisholmDataHistogram_", div, ".pdf", sep="")
pdf(file_name)
h4 <- hist(ChisholmData$island_species) #produces uniform frequency of observations, no 'hump'
print(h4)
dev.off()
############################################################
##########STEP SIX: ARE THERE EXCESSIVELY MANY ZEROS?######
############################################################
#Look at the histogram for my species richnesses
#there are no zero species islands
############################################################
##########STEP SEVEN: VISUALLY INSPECT RELATIONSHIPS########
############################################################
#We've already looked at the boxplots of species/area for
#our sim vs model data. That looks pretty normal.
#area and migration rate are continuous covariates - do I have
#to do anything inparticular because of this?
#Is number of niches a continuous covariate?
############################################################
############STEP EIGHT: CONSIDER INTERACTIONS###############
############################################################
#What sort of interactions would I consider here?
##################################################################
#STEP NINE: DECIDE ON MAXIMAL MODEL BASED ON BIOLOGY AND QUESTION#
##################################################################
#will do a t test and paired t test to see if there is a significant
#difference between my simulation results and the model results
#will do linear models of z-transformed niche and area data against species richness
#to see if either influence the number of species
#will do multivariate analysis to see how migration rate, number of niches and
#island area affect species richness - to simplify in step 10/11
#######################################################################
#STEPS TEN AND ELEVEN: RUN TESTS/MODELS, SIMPLIFY AND RUN FINAL MODELS#
#######################################################################
#######LET'S DO A HYPOTHESIS TEST TO SEE IF THESE DIFFERENCES MEAN SOMETHING
#Null hypothesis: The difference between simulation species richness and model species
#richness is zero
#Usually t-test should only be done on normally distributed data
#but because we have a large dataset (N>50) we can use it
t.test1 <- t.test(TotalData$island_species ~ TotalData$SimOrModel)
if (t.test1$p.value < 0.001) {
pvalue <- c("$<$ 0.001")
} else if (t.test1$p.value < 0.05) {
pvalue <- c("$<$ 0.05")
} else {
pvalue <- c("$>$ 0.05")
}
df <- as.data.frame(tidy(t.test1))
names(df) <- c("Mean Difference", "Solman_Sim Mean", "Chisholm_Model Mean", "t-value", "p-value", "df",
"conf. low", "conf. high", "method", "alternative")
#Round the t-test statistics to 2 decimal places
for (i in 1:8) {
df[i][[1]] <- round(df[i][[1]], digits = 2)
}
df$`p-value` <- pvalue
#Save to CSV
write.csv(df, paste0("../../Results/Simulation2/tTestResults_", div, ".csv"), row.names = FALSE)
###Let's also try a paired sample t-test
t.test2 <- t.test(SolmanData$island_species, ChisholmData$island_species, paired = TRUE, alternative = "two.sided")
if (t.test2$p.value < 0.001) {
pvalue <- c("$<$ 0.001")
} else if (t.test2$p.value < 0.05) {
pvalue <- c("$<$ 0.05")
} else {
pvalue <- c("$>$ 0.05")
}
df1 <- as.data.frame(tidy(t.test2))
names(df1) <- c("Mean Difference", "t-value", "p-value", "df", "conf. low", "conf. high", "method", "alternative")
#Round the t-test statistics to 2 decimal places
for (i in 1:6) {
df1[i][[1]] <- round(df1[i][[1]], digits = 2)
}
df1$`p-value` <- pvalue
#Save to CSV
write.csv(df1, paste0("../../Results/Simulation2/PairedtTestResults_", div, ".csv"), row.names = FALSE)
#####LET'S START RUNNING SOME LINEAR MODELS TO SEE IF THERE
###IS A STATISTICALLY SIGNIFICANT RELATIONSHIP BETWEEN OUR VARIABLES
#for these I'm going to reduce the datasets again because my
#computer is struggling to process them all
#SolmanSim <- SolmanData[SolmanData$sim_number > 5 & SolmanData$sim_number<8, ]
#run linear models with species and my z transformed data
model2 <- lm(mean_sp ~ z.area, data = SolmanMean)
model3 <- lm(mean_sp ~ z.K_num, data = SolmanMean)
#Get the relevant statistics and, round to 3 decimal places and save to csv
AreaR <- summary(model2)$r.squared
#AreaP <- c("< 0.001") #this is a manual entry - check this and update yourself!
df2 <- tidy(model2)
if (df2$p.value[[1]] < 0.001) {
AreaP <- c("$<$ 0.001")
} else if (df2$p.value[[1]] < 0.05) {
AreaP <- c("$<$ 0.05")
} else {
AreaP <- c("$>$ 0.05")
}
df2$rSquared <- rep(AreaR, 2)
df2$Variate <- c("Area")
names(df2) <- c("Coefficients", "Estimate", "Standard Error", "t-value", "p.value", "R-Squared", "Variate")
df2$p.value <- AreaP
for (i in 2:4) {
df2[i][[1]] <- round(df2[i][[1]], digits = 3)
}
df2[6][[1]] <- round(df2[6][[1]], digits = 3)
NicheR <- summary(model3)$r.squared
df3 <- tidy(model3)
if (df3$p.value[[1]] < 0.001) {
NicheP <- c("$<$ 0.001")
} else if (df3$p.value[[1]] < 0.05) {
NicheP <- c("$<$ 0.05")
} else {
NicheP <- c("$>$ 0.05")
}
df3$rSquared <- rep(NicheR, 2)
df3$Variate <- c("Niches")
names(df3) <- c("Coefficients", "Estimate", "Standard Error", "t-value", "p.value", "R-Squared", "Variate")
df3$p.value <- NicheP
for (i in 2:4) {
df3[i][[1]] <- round(df3[i][[1]], digits = 3)
}
df3[6][[1]] <- round(df3[6][[1]], digits = 3)
df2_3 <- rbind(df2, df3)
write.csv(df2_3, paste0("../../Results/Simulation2/lmResults_", div, ".csv"))
##########################################################
####EXTENSION OF STEP THREE: HOMOGENEITY OF VARIANCES#####
##########################################################
####LET'S GET HISTOGRAMS OF THE RESIDUALS#####
file_name = paste("../../Results/Simulation2/AreaNicheResidualHisto_", div, ".pdf", sep="")
pdf(file_name)
h5 <- hist(model1$residuals)
print(h5)
dev.off()
file_name = paste("../../Results/Simulation2/AreaSpeciesResidualHisto_", div, ".pdf", sep="")
pdf(file_name)
h6 <- hist(model2$residuals)
print(h6)
dev.off()
file_name = paste("../../Results/Simulation2/NicheSpeciesResidualHisto_", div, ".pdf", sep="")
pdf(file_name)
h7 <- hist(model3$residuals)
print(h7)
dev.off()
#################################################
#########STEP TWELVE: MODEL VALIDATION###########
#################################################
#Looking for stary sky residuals
#######LET'S PLOT THE MODEL TO CHECK THE DISTRIBUTION OF OUR RESIDUALS####
file_name = paste("../../Results/Simulation2/AreaSpeciesLmPlot_", div, ".pdf", sep="")
pdf(file_name)
par(mfrow=c(2,2))
m2 <- plot(model2)
print(m2)
dev.off()
file_name = paste("../../Results/Simulation2/NicheSpeciesLmPlot_", div, ".pdf", sep="")
pdf(file_name)
par(mfrow=c(2,2))
m3 <- plot(model3)
print(m3)
dev.off()
####LASTLY LET'S FIT A MODEL WITH MULTIPLE VARIABLES###
########################################################################
#########EXTENSION OF STEP FOUR: ARE THE DATA NORMALLY DISTRIBUTED?#####
########################################################################
#histograms show data is not normally distributed - is this a problem?
#how do I address this?
h6 <- hist(SolmanMean$mean_sp)
h7 <- hist(SolmanMean$z.area)
h8 <- hist(SolmanMean$z.K_num)
file_name = paste("../../Results/Simulation2/HistoForMultivariateAnalysis_", div, ".pdf", sep="")
pdf(file_name)
plot(h6)
plot(h7)
plot(h8)
dev.off()
#first let's z-standardise migration rate
SolmanMean$z.migration <- scale(SolmanMean$migration_rate)
####################################################################################
#EXTENSION OF STEPS TEN AND ELEVEN: RUN TESTS/MODELS, SIMPLIFY AND RUN FINAL MODELS#
####################################################################################
####Now we'll do our multivariate analysis!!!
model4 <- lm(mean_sp ~ z.K_num + z.area + z.migration, data = SolmanMean)
Niche_Area_MigrationR <- summary(model4)$r.squared
df4 <- tidy(model4)
if (df4$p.value[[1]] < 0.001) {
Niche_Area_MigrationP <- c("$<$ 0.001")
} else if (df4$p.value[[1]] < 0.05) {
Niche_Area_MigrationP <- c("$<$ 0.05")
} else {
Niche_Area_MigrationP <- c("$>$ 0.05")
}
df4$rSquared <- rep(Niche_Area_MigrationR, 2)
df4$Variate <- c("Niche_Area_Migration")
names(df4) <- c("Coefficients", "Estimate", "Standard Error", "t-value", "p.value", "R-Squared", "Variate")
df4$p.value <- Niche_Area_MigrationP
for (i in 2:4) {
df4[i][[1]] <- round(df4[i][[1]], digits = 3)
}
df4[6][[1]] <- round(df4[6][[1]], digits = 3)
model5 <- lm(mean_sp ~ z.K_num + z.area, data = SolmanMean)
Niche_AreaR <- summary(model5)$r.squared
df5 <- tidy(model5)
if (df5$p.value[[1]] < 0.001) {
Niche_AreaP <- c("$<$ 0.001")
} else if (df5$p.value[[1]] < 0.05) {
Niche_AreaP <- c("$<$ 0.05")
} else {
Niche_AreaP <- c("$>$ 0.05")
}
df5$rSquared <- rep(Niche_AreaR, 3)
df5$Variate <- c("Niche_Area")
names(df5) <- c("Coefficients", "Estimate", "Standard Error", "t-value", "p.value", "R-Squared", "Variate")
df5$p.value <- Niche_AreaP
for (i in 2:4) {
df5[i][[1]] <- round(df5[i][[1]], digits = 3)
}
df5[6][[1]] <- round(df5[6][[1]], digits = 3)
model6 <- lm(mean_sp ~ z.K_num, data = SolmanMean)
NicheR <- summary(model6)$r.squared
df6 <- tidy(model6)
if (df6$p.value[[1]] < 0.001) {
NicheP <- c("$<$ 0.001")
} else if (df6$p.value[[1]] < 0.05) {
NicheP <- c("$<$ 0.05")
} else {
NicheP <- c("$>$ 0.05")
}
df6$rSquared <- rep(NicheR, 2)
df6$Variate <- c("Niche")
names(df6) <- c("Coefficients", "Estimate", "Standard Error", "t-value", "p.value", "R-Squared", "Variate")
df6$p.value <- NicheP
for (i in 2:4) {
df6[i][[1]] <- round(df6[i][[1]], digits = 3)
}
df6[6][[1]] <- round(df6[6][[1]], digits = 3)
dfs <- rbind(df4, df5, df6)
write.csv(dfs, paste0("../../Results/Simulation2/MultiAnalysis_", div, ".csv"))
##############################################################
#########EXTENSION OF STEP TWELVE: MODEL VALIDATION###########
##############################################################
#######LET'S PLOT THE MODEL TO CHECK THE DISTRIBUTION OF OUR RESIDUALS####
file_name = paste("../../Results/Simulation2/NicheAreaMigrationLmPlot_", div, ".pdf", sep="")
pdf(file_name)
par(mfrow=c(2,2))
m4 <- plot(model4)
print(m4)
dev.off()
file_name = paste("../../Results/Simulation2/NicheAreaLmPlot_", div, ".pdf", sep="")
pdf(file_name)
par(mfrow=c(2,2))
m5 <- plot(model5)
print(m5)
dev.off()
file_name = paste("../../Results/Simulation2/NicheLmPlot_", div, ".pdf", sep="")
pdf(file_name)
par(mfrow=c(2,2))
m6 <- plot(model6)
print(m6)
dev.off()
}
totalmaxArea <- unlist(totalmaxArea)
num_islands <- unlist(num_islands)
div_df <- data.frame(totalmaxArea, num_islands)
names(div_df) <- c("Maximum Island Area", "Number of Islands")
write.csv(div_df, "../../Results/Simulation2/DividedDF.csv", row.names = FALSE)
#Script to bind useful results together
rm(list=ls())
graphics.off()
Stats <- list()
maxArea <- vector()
div = 20
for (i in 1:div) {
data <- read.csv(paste0("../../Results/Simulation2/MyStats_", i, ".csv"))
Stats[[i]] <- data
a <- read.csv(paste0("../../Results/Simulation2/maxArea_", i, ".csv"))
maxArea <- c(maxArea, a)
}
maxArea <- unlist(maxArea)
Stats <- do.call("rbind", Stats)
Stats$maxArea <- rep(maxArea, each = 2)
Stats$ModelOrSim <- rep( c("SolmanSim", "ChisholmMod"), 10)
StatsMax <- Stats[Stats$maxArea == max(Stats$maxArea), ]
StatsMin <- Stats[Stats$maxArea == min(Stats$maxArea), ]
StatsEdit <- rbind(StatsMax, StatsMin)
write.csv(StatsEdit, "../../Results/Simulation2/StatsEdit.csv", row.names = FALSE)
write.csv(Stats, "../../Results/Simulation2/Stats.csv", row.names = FALSE)
View(StatsEdit)
ttest <-list()
pairedt <- list()
for (i in 1:div) {
tdata <- read.csv(paste0("../../Results/Simulation2/tTestResults_", i, ".csv"))
ttest[[i]] <- tdata
paireddata <- read.csv(paste0("../../Results/Simulation2/PairedtTestResults_", i, ".csv"))
pairedt[[i]] <- paireddata
}
ttest <- do.call("rbind", ttest)
pairedt <- do.call("rbind", pairedt)
ttest$maxArea <- maxArea
pairedt$maxArea <- maxArea
pairedtMax <- pairedt[pairedt$maxArea == max(as.numeric(pairedt$maxArea)), ]
pairedtMin <- pairedt[pairedt$maxArea == min(as.numeric(pairedt$maxArea)), ]
pairedtMaxMin <- rbind(pairedtMax, pairedtMin)
write.csv(ttest, "../../Results/Simulation2/tTest.csv", row.names = FALSE)
write.csv(pairedt, "../../Results/Simulation2/pairedT.csv", row.names = FALSE)
write.csv(pairedtMaxMin, "../../Results/Simulation2/pairedtMaxMin.csv", row.names = FALSE)
LMResults <- list()
for (i in 1:div){
data <- read.csv(paste0("../../Results/Simulation2/lmResults_", i, ".csv"))
LMResults[[i]] <- data
}
LMResults <- do.call("rbind", LMResults)
Area <- rep(maxArea, each = 4)
LMResults$X <- paste(Area)
names(LMResults)[[1]] <- c("maxArea")
LMMax <- LMResults[LMResults$maxArea == max(as.numeric(LMResults$maxArea)), ]
LMMin <- LMResults[LMResults$maxArea == min(as.numeric(LMResults$maxArea)), ]
LMMaxMin <- rbind(LMMax, LMMin)
write.csv(LMResults, "../../Results/Simulation2/LMResults.csv", row.names = FALSE)
write.csv(LMMaxMin, "../../Results/Simulation2/LMMaxMin.csv", row.names = FALSE)
MultiResults <- list()
for (i in 1:div) {
data <- read.csv(paste0("../../Results/Simulation2/MultiAnalysis_", i, ".csv"))
MultiResults[[i]] <- data
}
MultiResults <- do.call("rbind", MultiResults)
Area <- rep(maxArea, each = 9)
MultiResults$X <-paste(Area)
names(MultiResults)[[1]] <- c("maxArea")
MultiMax <- MultiResults[MultiResults$maxArea == max(as.numeric(MultiResults$maxArea)), ]
MultiMin <- MultiResults[MultiResults$maxArea == min(as.numeric(MultiResults$maxArea)), ]
MultiMaxMin <- rbind(MultiMax, MultiMin)
MultiMaxMin <- MultiMaxMin[MultiMaxMin$Variate != "Niche", ]
write.csv(MultiResults, "../../Results/Simulation2/MultiAnalysis.csv", row.names = FALSE)
write.csv(MultiMaxMin, "../../Results/Simulation2/MultiMaxMin.csv", row.names = FALSE)
View(MultiMaxMin)
View(pairedtMaxMin)
nu = 0.001
niche_size = 2500
nu*(niche_size-1)/(1-nu)
#Let's plot our mean simulation data with model estimates
rm(list=ls())
graphics.off()
library("ggplot2")
Solman <- read.csv("../../Results/Simulation2/SolmanMean_1.csv")
chisholm_model <- function(area, theta, m0, K) {
rho = 1
K = K
Js = area*rho
J_stars = Js/K
ms = m0/sqrt(area)
gamma_stars = J_stars*ms/(1-ms)
return(theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K)))
}
#create empty list for storing estimated species richness
Chisholm_Est <- vector()
for (i in 1: nrow(Solman)) {
data <- Solman[i, ]
m = data$migration_rate
area = data$area
J = area
m0 = m*sqrt(area)
nu = 0.001
J_meta = 50000
theta = 2*J_meta*nu
K = data$niches
Chisholm_Est[[i]] <- round(chisholm_model(area, theta, m0, K), digits = 2)
}
Chisholm_Est <- cbind.data.frame(Solman[, 1:3], Chisholm_Est)
Solman$SimOrMod <- rep("Solman", nrow(Solman))
colnames(Solman)[4] <- "Species_Rich"
Chisholm_Est$SimOrMod <- rep("Chisholm", nrow(Chisholm_Est))
colnames(Chisholm_Est)[4] <- "Species_Rich"
unique_areas <- unique(Solman$area)
df <- data.frame(area = integer(), Species_Rich = integer(), niches = integer(), migration = integer(), SimOrMod = character())
for (a in 1:length(unique_areas)) {
area <- unique_areas[a]
data <- Solman[Solman$area == area, ]
Species_Rich <- mean(data$Species_Rich)
niches <- mean(data$niches)
migration <- mean(data$migration_rate)
SimOrMod <- "Solman"
new_df <- data.frame(area, Species_Rich, niches, migration, SimOrMod)
df <- rbind(df, new_df)
}
#export those final mean results
write.csv(df, "../../Results/Simulation2/TotalMeanResults.csv", row.names = FALSE)
unique_areas <- unique(Chisholm_Est$area)
for (a in 1:length(unique_areas)) {
area <- unique_areas[a]
data <- Chisholm_Est[Chisholm_Est$area == area, ]
Species_Rich <- mean(data$Species_Rich)
niches <- mean(data$niches)
migration <- mean(data$migration_rate)
SimOrMod <- "Chisholm"
new_df <- data.frame(area, Species_Rich, niches, migration, SimOrMod)
df <- rbind(df, new_df)
}
TotalData <- rbind(Solman, Chisholm_Est)
p1 <- ggplot(df, aes(x=log(area), y = Species_Rich, colour = SimOrMod)) +
geom_point() +
scale_color_manual(values=c("red", "blue")) +
labs(colour = "Simulation (Solman) \n or Model (Chisholm)") +
labs(x = "Log Island Area", y = "Species Richness") +
theme(legend.title = element_blank())
pdf("../../Results/Simulation2/MeanResultsPlot.pdf")
print(p1)
dev.off()
p1
rm(list=ls())
graphics.off()
#install nlls fitting package
#install.packages("minpack.lm") <- if you've never installed minpack before
library("minpack.lm") #for nlls fitting
library("ggplot2")
library("broom")
#Start by defining the model function
chisholm_model <- function(area, theta, m0, K) {
rho = 1
K = K
Js = area*rho
J_stars = Js/K
ms = m0/sqrt(area)
gamma_stars = J_stars*ms/(1-ms)
return(theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma
(gamma_stars)))-digamma(theta/K)))
}
#get our full dataset
data <- read.csv("../../Data/SimData/ModData2.csv")
my_plots <- list()
results <- list()
library("ggplot2")
data <- read.csv("../../Results/Simulation2/LMResults.csv")
p1 <- ggplot(data, aes(x = maxArea, y = R.Squared, group = Variate)) +
geom_point(aes(colour = Variate)) +
geom_line(aes(colour = Variate)) +
xlab("Maximum Island Area") +
ylab("R-Squared Statistic") +
theme_bw()
pdf("../../Results/Simulation2/LMRSquared.pdf")
print(p1)
dev.off()
for (i in 1:length(unique(data$ID))){ #for each unique ID
mydata <- data[data$ID == i, ] #select all data with that id
#workout the mean species richness for each unique area
myareas <- unique(mydata$area)  #these are my unique areas
species <- list()
for (j in 1:length(myareas)){
x <- mydata[mydata$area == myareas[j], ] #these are all the islands with the same mrate
#num of niches and area
species[[j]] <- mean(x$island_species)
}
#unlist our species list
species <- unlist(species)
#plot
#plot(myareas, species)
df <- data.frame(myareas, species)
names(df) <- c("area", "species")
#To run the model fitting we need our island areas and species richness, as well as
#starting values for theta, m0 and K
nu = 0.001
theta_start <- nu*(sum(df$area-1)/(1-nu))
m_start <- max(df$species)/500
m0_start <- m_start*sqrt(sum(df$area))
K_start <- max(df$area)/20
#fit the model
fit_chisholm <- nlsLM(species ~ chisholm_model(area, theta, m0, K), data = df,
start = list(theta = theta_start, m0 = m0_start, K=K_start))
#summary(fit_chisholm)
#Get the R-squared value of the fitting
RSS <- sum(residuals(fit_chisholm)^2) #Residual sum of squares of our NLLS model
TSS <- sum((df$species - mean(df$species))^2) #Total sum of squares
RSq <- 1 - (RSS/TSS) #R-squared value
area <- df$area
chisholm_points <- chisholm_model(area = area, theta = coef(fit_chisholm)["theta"], m0 = coef(fit_chisholm)["m0"], K = coef(fit_chisholm)["K"])
df$Model <- as.factor("Solman")
names(df) <- c("area", "species", "ModelOrSim")
df1 <- data.frame(area, chisholm_points)
df1$Model <- as.factor("Chisholm")
names(df1) <- c("area", "species","ModelOrSim")
df2 <- rbind(df, df1)
p1 <- ggplot(df2, aes(x = area, y = species, colour = ModelOrSim)) +
geom_point() +
scale_color_manual(values=c("red", "blue")) +
theme_bw() +
ylab("Species Richness") +
xlab("Island Area") +
geom_line(data = df1, aes(x = area, y = species, colour = ModelOrSim)) +
#theme(legend.title = element_blank())
theme(legend.position = "none")
#store our plots
my_plots[[i]] <- p1
#let's store our r-squared results as well as summary parameter statistics
y <- tidy(fit_chisholm)
y <- as.data.frame(y)
y$r.squared <- RSq
z <- round(y[, 2:6], digits = 3)
z <- cbind(y[, 1], z)
names(z)[1] <- c("term")
z$migration.rates <- x$migration_rates[1]
z$niches <- x$K_num[1]
z$num.islands <- length(x$island_species)
z$fit.num <- i
z <- z[,c(10,1,2,3,4,5,6,7,8,9)]
results[[i]] <- z
}
