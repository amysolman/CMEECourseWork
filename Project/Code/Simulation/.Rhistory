sim_results <- as.data.frame(do.call("rbind", listofdataframes))
final_combo <- as.data.frame(do.call("rbind", all_my_sims))
FinalData[[1]] <- sim_results
FinalData[[2]] <- final_combo
return(FinalData)
}
FinalData <- DataForFitting()
View(FinalData)
Data2Fit <- FinalData[[1]]
View(Data2Fit)
Data2Plot <- FinalData[[2]]
View(Data2Plot)
View(Data2Fit)
View(Data2Plot)
#script to plot timeseries for each island and put results into dataframe
# library("ggplot2")
# library("gridExtra")
rm(list=ls())
graphics.off()
#read in 100 simulations
ImportMyData <- function() {
my_sims <- list()
for (i in 1:100) {
load(paste0(file="simulation_timeseries_", i, ".rda"))
my_sims[[i]] <- my_islands
}
return(my_sims)
}
# DataForPlotting <- function() {
#
#   my_sims <- ImportMyData()
#
#
#
#   for (sim in 1:length(my_sims)) { #for each simulation
#
#     simulation <- my_sims[[sim]] #seperate out the simulation
#     island_timeseries <- list()
#
#     for (island in 1:length(simulation)) { #for each island
#       focal_island <- simulation[[island]]
#       species_rich <- unlist(focal_island[[2]])
#       sim_number <- rep(sim, length(species_rich))
#       island_num <- rep(island, length(species_rich))
#       timestep <- 1:length(species_rich)
#       x <- focal_island[[1]]
#       migration_rate <- rep(x[[1]]$do_speciation, length(species_rich))
#       df <- cbind(sim_number, island_num, migration_rate, timestep, species_rich)
#       island_timeseries[[island]] <- df
#     }
#     combine <- as.data.frame(do.call("rbind", island_timeseries))
#
#     all_my_sims[[sim]] <- combine
#   }
#
#   final_combo <- as.data.frame(do.call("rbind", all_my_sims))
# }
ProcessMyData <- function() {
my_sims <- ImportMyData()
FinalData <- list()
listofdataframes <- list()
all_my_sims <- list()
for (sim in 1:length(my_sims)) { #for each simulation
island_timeseries <- list()
simulation <- my_sims[[sim]] #seperate out the simulation
sim_number <- rep(sim, length(simulation)) #get the number of the simulation
migration_rates <- names(simulation)
K_num <- rep(1:20, 50)
area <- K_num*10
island_species <- vector()
for (island in 1:length(simulation)) { #for each island in the simulation
focal_island <- simulation[[island]]
species_richness <- unlist(tail(focal_island[[2]], n=1))
island_species[[island]] <- species_richness
SpRichTimeseries <- unlist(focal_island[[2]])
sim_number <- rep(sim, length(SpRichTimeseries))
island_num <- rep(island, length(SpRichTimeseries))
timestep <- 1:length(SpRichTimeseries)
x <- focal_island[[1]]
migration_rate <- rep(x[[1]]$do_speciation, length(SpRichTimeseries))
df <- cbind(sim_number, island_num, migration_rate, timestep, SpRichTimeseries)
island_timeseries[[island]] <- df
}
df <- cbind(sim_number, migration_rates, area, K_num, island_species)
listofdataframes[[sim]] <- df
combine <- as.data.frame(do.call("rbind", island_timeseries))
all_my_sims[[sim]] <- combine
}
FinalData[[1]] <- as.data.frame(do.call("rbind", listofdataframes))
FinalData[[2]] <- as.data.frame(do.call("rbind", all_my_sims))
return(FinalData)
}
DataForFitting <- function(FinalData) {
Data2Fit <- FinalData[[1]]
return(Data2Fit)
}
DataForPlotting <- function(FinalData) {
Data2Plot <- FinalData[[2]]
return(Data2Plot)
}
FinalData <- ProcessMyData()
Data2Fit <- DataForFitting(FinalData)
Data2Plot <- DataForPlotting(FinalData)
write.csv(Data2Fit, "../../Results/SimModelFitData.csv", row.names = FALSE)
write.csv(Data2Plot, "../../Results/SimTimeseriesPlotData.csv")
PlottingData <- read.csv("../../Results/SimTimeseriesPlotData.csv")
rm(list=ls())
graphics.off()
PlottingData <- read.csv("../../Results/SimTimeseriesPlotData.csv")
View(PlottingData)
#script to plot timeseries for each island and put results into dataframe
# library("ggplot2")
# library("gridExtra")
rm(list=ls())
graphics.off()
#FUNCTION TO READ IN SIMULATIONS#
#read in 100 simulations
ImportMyData <- function() {
my_sims <- list()
for (i in 1:100) {
load(paste0(file="simulation_timeseries_", i, ".rda"))
my_sims[[i]] <- my_islands
}
return(my_sims)
}
#FUNCTION TO PROCESS DATA READY TO WRITE TO CSV#
ProcessMyData <- function() {
my_sims <- ImportMyData()
FinalData <- list()
listofdataframes <- list()
all_my_sims <- list()
for (sim in 1:length(my_sims)) { #for each simulation
island_timeseries <- list()
simulation <- my_sims[[sim]] #seperate out the simulation
sim_number <- rep(sim, length(simulation)) #get the number of the simulation
migration_rates <- names(simulation)
K_num <- rep(1:20, 50)
area <- K_num*10
island_species <- vector()
for (island in 1:length(simulation)) { #for each island in the simulation
focal_island <- simulation[[island]]
species_richness <- unlist(tail(focal_island[[2]], n=1))
island_species[[island]] <- species_richness
SpRichTimeseries <- unlist(focal_island[[2]])
sim_number <- rep(sim, length(SpRichTimeseries))
island_num <- rep(island, length(SpRichTimeseries))
timestep <- 1:length(SpRichTimeseries)
x <- focal_island[[1]]
migration_rate <- rep(x[[1]]$do_speciation, length(SpRichTimeseries))
df <- cbind(sim_number, island_num, migration_rate, timestep, SpRichTimeseries)
island_timeseries[[island]] <- df
}
df <- cbind(sim_number, migration_rates, area, K_num, island_species)
listofdataframes[[sim]] <- df
combine <- as.data.frame(do.call("rbind", island_timeseries))
all_my_sims[[sim]] <- combine
}
FinalData[[1]] <- as.data.frame(do.call("rbind", listofdataframes))
FinalData[[2]] <- as.data.frame(do.call("rbind", all_my_sims))
return(FinalData)
}
#FUNCTION FOR EXTRACTING FITTING DATA
DataForFitting <- function(FinalData) {
Data2Fit <- FinalData[[1]]
return(Data2Fit)
}
#FUNCTION FOR EXTRACTING PLOTTING DATA
DataForPlotting <- function(FinalData) {
Data2Plot <- FinalData[[2]]
return(Data2Plot)
}
#GET THE DATA, WRITE TO CSV
FinalData <- ProcessMyData()
Data2Fit <- DataForFitting(FinalData)
Data2Plot <- DataForPlotting(FinalData)
write.csv(Data2Fit, "../../Results/SimModelFitData.csv", row.names = FALSE)
write.csv(Data2Plot, "../../Results/SimTimeseriesPlotData.csv", row.names = FALSE)
rm(list=ls())
graphics.off()
library("ggplot2")
library("gridExtra")
PlottingData <- read.csv("../../Results/SimTimeseriesPlotData.csv")
View(PlottingData)
#
#plot three of our simulations to check they reached equilibrium
plot_data_a <- PlottingData[PlottingData$sim_number == 1, ]
View(plot_data_a)
View(PlottingData)
plot_data_b <- PlottingData[PlottingData$sim_number == 50, ]
plot_data_c <- PlottingData[PlottingData$sim_number == 100, ]
View(plot_data_a)
View(plot_data_a)
a<-ggplot(plot_data_a, aes(x=timestep, y=SpRichTimeseries, group=migration_rate)) +
geom_line(aes(color=migration_rate, group=migration_rate))+
geom_point(aes(color=migration_rate, group=migration_rate)) +
scale_colour_gradientn(colours=rainbow(10))
b<-ggplot(plot_data_b, aes(x=timestep, y=SpRichTimeseries, group=migration_rate)) +
geom_line(aes(color=migration_rate, group=migration_rate))+
geom_point(aes(color=migration_rate, group=migration_rate)) +
scale_colour_gradientn(colours=rainbow(10))
c<-ggplot(plot_data_c, aes(x=timestep, y=SpRichTimeseries, group=migration_rate)) +
geom_line(aes(color=migration_rate, group=migration_rate))+
geom_point(aes(color=migration_rate, group=migration_rate)) +
scale_colour_gradientn(colours=rainbow(10))
grid.arrange(a, b, c, nrow = 3)
a<-ggplot(plot_data_a, aes(x=timestep, y=SpRichTimeseries, group=island_num)) +
geom_line(aes(color=island_num, group=island_num))+
geom_point(aes(color=island_num, group=island_num)) +
scale_colour_gradientn(colours=rainbow(10))
b<-ggplot(plot_data_b, aes(x=timestep, y=SpRichTimeseries, group=island_num)) +
geom_line(aes(color=island_num, group=island_num))+
geom_point(aes(color=island_num, group=island_num)) +
scale_colour_gradientn(colours=rainbow(10))
c<-ggplot(plot_data_c, aes(x=timestep, y=SpRichTimeseries, group=island_num)) +
geom_line(aes(color=island_num, group=island_num))+
geom_point(aes(color=island_num, group=island_num)) +
scale_colour_gradientn(colours=rainbow(10))
grid.arrange(a, b, c, nrow = 3)
ggsave("../../Results/TimeseriesPlot.pdf")
pdf("../../Results/TimeseriesPlot.pdf")
myplot <- grid.arrange(a, b, c, nrow = 3)
print(myplot)
dev.off()
#script to plot timeseries for each island and put results into dataframe
rm(list=ls())
graphics.off()
#FUNCTION TO READ IN SIMULATIONS#
#read in 100 simulations
ImportMyData <- function() {
my_sims <- list()
for (i in 1:100) {
load(paste0(file="simulation_timeseries_", i, ".rda"))
my_sims[[i]] <- my_islands
}
return(my_sims)
}
#FUNCTION TO PROCESS DATA READY TO WRITE TO CSV#
ProcessMyData <- function() {
my_sims <- ImportMyData()
FinalData <- list()
listofdataframes <- list()
all_my_sims <- list()
for (sim in 1:length(my_sims)) { #for each simulation
island_timeseries <- list()
simulation <- my_sims[[sim]] #seperate out the simulation
sim_number <- rep(sim, length(simulation)) #get the number of the simulation
migration_rates <- names(simulation)
K_num <- rep(1:20, 50)
area <- K_num*10
island_species <- vector()
for (island in 1:length(simulation)) { #for each island in the simulation
focal_island <- simulation[[island]]
species_richness <- unlist(tail(focal_island[[2]], n=1))
island_species[[island]] <- species_richness
SpRichTimeseries <- unlist(focal_island[[2]])
sim_number <- rep(sim, length(SpRichTimeseries))
island_num <- rep(island, length(SpRichTimeseries))
timestep <- (1:length(SpRichTimeseries))*1000
x <- focal_island[[1]]
migration_rate <- rep(x[[1]]$do_speciation, length(SpRichTimeseries))
df <- cbind(sim_number, island_num, migration_rate, timestep, SpRichTimeseries)
island_timeseries[[island]] <- df
}
df <- cbind(sim_number, migration_rates, area, K_num, island_species)
listofdataframes[[sim]] <- df
combine <- as.data.frame(do.call("rbind", island_timeseries))
all_my_sims[[sim]] <- combine
}
FinalData[[1]] <- as.data.frame(do.call("rbind", listofdataframes))
FinalData[[2]] <- as.data.frame(do.call("rbind", all_my_sims))
return(FinalData)
}
#FUNCTION FOR EXTRACTING FITTING DATA
DataForFitting <- function(FinalData) {
Data2Fit <- FinalData[[1]]
return(Data2Fit)
}
#FUNCTION FOR EXTRACTING PLOTTING DATA
DataForPlotting <- function(FinalData) {
Data2Plot <- FinalData[[2]]
return(Data2Plot)
}
#GET THE DATA, WRITE TO CSV
FinalData <- ProcessMyData()
Data2Fit <- DataForFitting(FinalData)
Data2Plot <- DataForPlotting(FinalData)
write.csv(Data2Fit, "../../Results/SimModelFitData.csv", row.names = FALSE)
write.csv(Data2Plot, "../../Results/SimTimeseriesPlotData.csv", row.names = FALSE)
View(Data2Plot)
rm(list=ls())
graphics.off()
library("ggplot2")
library("gridExtra")
PlottingData <- read.csv("../../Results/SimTimeseriesPlotData.csv")
#plot three of our simulations to check they reached equilibrium
plot_data_a <- PlottingData[PlottingData$sim_number == 1, ]
plot_data_b <- PlottingData[PlottingData$sim_number == 50, ]
plot_data_c <- PlottingData[PlottingData$sim_number == 100, ]
a<-ggplot(plot_data_a, aes(x=timestep, y=SpRichTimeseries, group=island_num)) +
geom_line(aes(color=island_num, group=island_num))+
geom_point(aes(color=island_num, group=island_num)) +
scale_colour_gradientn(colours=rainbow(10))
b<-ggplot(plot_data_b, aes(x=timestep, y=SpRichTimeseries, group=island_num)) +
geom_line(aes(color=island_num, group=island_num))+
geom_point(aes(color=island_num, group=island_num)) +
scale_colour_gradientn(colours=rainbow(10))
c<-ggplot(plot_data_c, aes(x=timestep, y=SpRichTimeseries, group=island_num)) +
geom_line(aes(color=island_num, group=island_num))+
geom_point(aes(color=island_num, group=island_num)) +
scale_colour_gradientn(colours=rainbow(10))
grid.arrange(a, b, c, nrow = 3)
grid.arrange(a, b, c, nrow = 3)
# Print the plot to a pdf file
pdf("../../Results/TimeseriesPlot.pdf")
myplot <- grid.arrange(a, b, c, nrow = 3)
print(myplot)
dev.off()
my_plots <- list()
for (p in 1:3) {
plot_data <- PlottingData[PlottingData$sim_number == p*15, ]
plot <-ggplot(plot_data, aes(x=timestep, y=SpRichTimeseries, group=island_num)) +
geom_line(aes(color=island_num, group=island_num))+
geom_point(aes(color=island_num, group=island_num)) +
scale_colour_gradientn(colours=rainbow(10))
my_plots[p] <- plot
}
View(my_plots)
p[1]
p = 1
plot_data <- PlottingData[PlottingData$sim_number == p*15, ]
plot <-ggplot(plot_data, aes(x=timestep, y=SpRichTimeseries, group=island_num)) +
geom_line(aes(color=island_num, group=island_num))+
geom_point(aes(color=island_num, group=island_num)) +
scale_colour_gradientn(colours=rainbow(10))
my_plots[p] <- plot
my_plots[p]
print(my_plots[1])
rm(list=ls())
graphics.off()
library("ggplot2")
library("gridExtra") #for multiplots on one graph
PlottingData <- read.csv("../../Results/SimTimeseriesPlotData.csv")
my_plots <- list()
for (p in 1:3) {
plot_data <- PlottingData[PlottingData$sim_number == p*15, ]
plot <-ggplot(plot_data, aes(x=timestep, y=SpRichTimeseries, group=island_num)) +
geom_line(aes(color=island_num, group=island_num))+
geom_point(aes(color=island_num, group=island_num)) +
scale_colour_gradientn(colours=rainbow(10))
my_plots[p] <- plot
}
# Print the plot to a pdf file
pdf("../../Results/TimeseriesPlot.pdf")
myplot <- grid.arrange(my_plots[1], my_plots[2], my_plots[3], nrow = 3)
print(myplot)
View(my_plots)
x <- my_plots[1]
View(x)
x
my_plots <- list()
for (p in 1:3) {
plot_data <- PlottingData[PlottingData$sim_number == p*15, ]
1 <- ggplot(plot_data, aes(x=timestep, y=SpRichTimeseries, group=island_num)) +
geom_line(aes(color=island_num, group=island_num))+
geom_point(aes(color=island_num, group=island_num)) +
scale_colour_gradientn(colours=rainbow(10))
my_plots[[p]] <- plot
}
my_plots <- list()
for (p in 1:3) {
plot_data <- PlottingData[PlottingData$sim_number == p*15, ]
plot <- ggplot(plot_data, aes(x=timestep, y=SpRichTimeseries, group=island_num)) +
geom_line(aes(color=island_num, group=island_num))+
geom_point(aes(color=island_num, group=island_num)) +
scale_colour_gradientn(colours=rainbow(10))
my_plots[[p]] <- plot
}
myplot <- grid.arrange(my_plots[1], my_plots[2], my_plots[3], nrow = 3)
myplot <- grid.arrange(my_plots[[1]], my_plots[[2]], my_plots[[3]], nrow = 3)
print(myplot)
grid.arrange(my_plots[[1]], my_plots[[2]], my_plots[[3]], nrow = 3)
View(my_plots)
rm(list=ls())
graphics.off()
library("ggplot2")
library("gridExtra") #for multiplots on one graph
PlottingData <- read.csv("../../Results/SimTimeseriesPlotData.csv")
my_plots <- list()
for (p in 1:3) {
plot_data <- PlottingData[PlottingData$sim_number == p*15, ]
plot <- ggplot(plot_data, aes(x=timestep, y=SpRichTimeseries, group=island_num)) +
geom_line(aes(color=island_num, group=island_num))+
geom_point(aes(color=island_num, group=island_num)) +
scale_colour_gradientn(colours=rainbow(10))
my_plots[[p]] <- plot
}
# Print the plot to a pdf file
pdf("../../Results/TimeseriesPlot_test.pdf")
myplot <- grid.arrange(my_plots[[1]], my_plots[[2]], my_plots[[3]], nrow = 3)
print(myplot)
dev.off()
test <- do.call(grid.arrange,my_plots)
rm(list=ls())
graphics.off()
library("ggplot2")
library("gridExtra") #for multiplots on one graph
PlottingData <- read.csv("../../Results/SimTimeseriesPlotData.csv")
my_plots <- list()
for (p in 1:3) {
plot_data <- PlottingData[PlottingData$sim_number == p*15, ]
plot <- ggplot(plot_data, aes(x=timestep, y=SpRichTimeseries, group=island_num)) +
geom_line(aes(color=island_num, group=island_num))+
geom_point(aes(color=island_num, group=island_num)) +
scale_colour_gradientn(colours=rainbow(10)) +
ggtitle("Simulation", p)
my_plots[[p]] <- plot
}
# Print the plot to a pdf file
pdf("../../Results/TimeseriesPlot.pdf")
#myplot <- grid.arrange(my_plots[[1]], my_plots[[2]], my_plots[[3]], nrow = 3)
myplot <- do.call(grid.arrange,my_plots)
print(myplot)
dev.off()
rm(list=ls())
graphics.off()
library("ggplot2")
library("gridExtra") #for multiplots on one graph
PlottingData <- read.csv("../../Results/SimTimeseriesPlotData.csv")
my_plots <- list()
for (p in 1:3) {
plot_data <- PlottingData[PlottingData$sim_number == p*15, ]
plot <- ggplot(plot_data, aes(x=timestep, y=SpRichTimeseries, group=island_num)) +
geom_line(aes(color=island_num, group=island_num))+
geom_point(aes(color=island_num, group=island_num)) +
scale_colour_gradientn(colours=rainbow(10)) +
ggtitle("Simulation" p*15)
my_plots[[p]] <- plot
}
for (p in 1:3) {
plot_data <- PlottingData[PlottingData$sim_number == p*15, ]
plot <- ggplot(plot_data, aes(x=timestep, y=SpRichTimeseries, group=island_num)) +
geom_line(aes(color=island_num, group=island_num))+
geom_point(aes(color=island_num, group=island_num)) +
scale_colour_gradientn(colours=rainbow(10)) +
ggtitle("Simulation", p*15)
my_plots[[p]] <- plot
}
# Print the plot to a pdf file
pdf("../../Results/TimeseriesPlot.pdf")
#myplot <- grid.arrange(my_plots[[1]], my_plots[[2]], my_plots[[3]], nrow = 3)
myplot <- do.call(grid.arrange,my_plots)
print(myplot)
dev.off()
rm(list=ls())
graphics.off()
library("ggplot2")
library("gridExtra") #for multiplots on one graph
PlottingData <- read.csv("../../Results/SimTimeseriesPlotData.csv")
my_plots <- list()
for (p in 1:3) {
plot_data <- PlottingData[PlottingData$sim_number == p*25, ]
plot <- ggplot(plot_data, aes(x=timestep, y=SpRichTimeseries, group=island_num)) +
geom_line(aes(color=island_num, group=island_num))+
geom_point(aes(color=island_num, group=island_num)) +
scale_colour_gradientn(colours=rainbow(10)) +
ggtitle("Simulation", p*25)
my_plots[[p]] <- plot
}
# Print the plot to a pdf file
pdf("../../Results/TimeseriesPlot.pdf")
#myplot <- grid.arrange(my_plots[[1]], my_plots[[2]], my_plots[[3]], nrow = 3)
myplot <- do.call(grid.arrange,my_plots)
print(myplot)
dev.off()
###Script to compare the species richness generated by my simulation
#to those predicted by Ryan Chisholm's model
rm(list=ls())
graphics.off()
#install nlls fitting package
#install.packages("minpack.lm") <- if you've never installed minpack before
library("minpack.lm") #for nlls fitting
SimData <- read.csv("../../Results/SimModelFitData.csv")
View(SimData)
View(SimData)
View(SimData)
chisholm_model <- function(area, theta, m0, K) {
rho = 1
K = K
Js = area*rho
J_stars = Js/K
ms = m0/sqrt(area)
gamma_stars = J_stars*ms/(1-ms)
return(theta*(digamma(theta/K+gamma_stars*(digamma(gamma_stars+J_stars)-digamma(gamma_stars)))-digamma(theta/K)))
}
length(unique(SimData$sim_num))
View(SimData)
islands <- SimData[SimData$sim_number == i, ]
i = 1
islands <- SimData[SimData$sim_number == i, ]
area <- islands$area
species_richness <- islands$sp_rich
View(islands)
species_richness <- islands$island_species
plot(area ~ species_richness, data = islands)
plot(species_richness ~ area, data = islands)
View(islands)
x <- islands[islands$migration_rates == 0.001, ]
y <- x[x$K_num == 1, ]
View(y)
x <- SimData[SimData$migration_rates == 0.001, ]
y <- x[x$K_num == 1, ]
View(y)
